<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/[eventId]/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/[eventId]/page.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {useParams} from 'next/navigation';&#10;import {toast} from 'sonner';&#10;import {getEventById} from '@/lib/actions/eventActions';&#10;import {EventDetailDTO} from '@/lib/validators/event';&#10;import {Skeleton} from '@/components/ui/skeleton';&#10;import {EventStatusTracker} from '../_components/EventStatusTracker';&#10;import {useOrganization} from '@/providers/OrganizationProvider';&#10;&#10;// Import review components to reuse them&#10;import {ReviewEventHero} from '../_components/review/ReviewEventHero';&#10;import {ReviewEventDetails} from '../_components/review/ReviewEventDetails';&#10;import {ReviewTicketTiers} from '../_components/review/ReviewTicketTiers';&#10;import {ReviewSessions} from '../_components/review/ReviewSessions';&#10;&#10;// Import UI components&#10;import {Button} from '@/components/ui/button';&#10;import {Card} from '@/components/ui/card';&#10;import {Tabs, TabsContent, TabsList, TabsTrigger} from '@/components/ui/tabs';&#10;&#10;export default function EventDetailsPage() {&#10;    const params = useParams();&#10;    const eventId = params.eventId as string;&#10;    const {organization} = useOrganization();&#10;&#10;    const [event, setEvent] = useState&lt;EventDetailDTO | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [activeTab, setActiveTab] = useState('details');&#10;&#10;    useEffect(() =&gt; {&#10;        if (eventId) {&#10;            setIsLoading(true);&#10;            getEventById(eventId)&#10;                .then(setEvent)&#10;                .catch(() =&gt; toast.error(&quot;Failed to load event details.&quot;))&#10;                .finally(() =&gt; setIsLoading(false));&#10;        }&#10;    }, [eventId]);&#10;&#10;    if (isLoading) {&#10;        return (&#10;            &lt;div className=&quot;p-4 md:p-8 max-w-4xl mx-auto space-y-8&quot;&gt;&#10;                &lt;Skeleton className=&quot;h-24 w-full&quot;/&gt;&#10;                &lt;Skeleton className=&quot;h-48 w-full&quot;/&gt;&#10;                &lt;Skeleton className=&quot;h-32 w-full&quot;/&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    if (!event) {&#10;        return &lt;div className=&quot;p-8 text-center&quot;&gt;Event not found.&lt;/div&gt;;&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-8 max-w-4xl mx-auto p-4 md:p-8&quot;&gt;&#10;            {/* Header Section with Title &amp; Status */}&#10;            &lt;div className=&quot;flex flex-col md:flex-row md:items-center justify-between gap-4&quot;&gt;&#10;                &lt;h1 className=&quot;text-3xl font-bold tracking-tight&quot;&gt;{event.title}&lt;/h1&gt;&#10;&#10;                &lt;div className=&quot;flex flex-col sm:flex-row gap-4&quot;&gt;&#10;                    &lt;EventStatusTracker status={event.status} rejectionReason={event.rejectionReason}/&gt;&#10;                    &lt;Button variant=&quot;outline&quot;&gt;Edit Event&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Tabs Navigation */}&#10;            &lt;Tabs defaultValue=&quot;overview&quot; className=&quot;w-full&quot;&gt;&#10;                &lt;TabsList className=&quot;grid w-full grid-cols-4&quot;&gt;&#10;                    &lt;TabsTrigger value=&quot;overview&quot;&gt;Overview&lt;/TabsTrigger&gt;&#10;                    &lt;TabsTrigger value=&quot;tickets&quot;&gt;Tickets&lt;/TabsTrigger&gt;&#10;                    &lt;TabsTrigger value=&quot;sessions&quot;&gt;Sessions&lt;/TabsTrigger&gt;&#10;                    &lt;TabsTrigger value=&quot;analytics&quot;&gt;Analytics&lt;/TabsTrigger&gt;&#10;                &lt;/TabsList&gt;&#10;&#10;                {/* Overview Tab */}&#10;                &lt;TabsContent value=&quot;overview&quot; className=&quot;space-y-8 mt-6&quot;&gt;&#10;                    {/* Hero Section with Cover Photos and Title */}&#10;                    &lt;ReviewEventHero&#10;                        title={event.title}&#10;                        categoryName={event.categoryName}&#10;                        organization={organization}&#10;                        coverFiles={event.coverPhotos}&#10;                    /&gt;&#10;&#10;                    {/* Event Details Section with Description and Overview */}&#10;                    &lt;ReviewEventDetails&#10;                        description={event.description}&#10;                        overview={event.overview}&#10;                    /&gt;&#10;                &lt;/TabsContent&gt;&#10;&#10;                {/* Tickets Tab */}&#10;                &lt;TabsContent value=&quot;tickets&quot; className=&quot;space-y-8 mt-6&quot;&gt;&#10;                    &lt;Card className=&quot;p-6&quot;&gt;&#10;                        &lt;h2 className=&quot;text-xl font-semibold mb-4&quot;&gt;Ticket Tiers&lt;/h2&gt;&#10;                        &lt;ReviewTicketTiers tiers={event.tiers}/&gt;&#10;                    &lt;/Card&gt;&#10;&#10;                    &lt;Card className=&quot;p-6&quot;&gt;&#10;                        &lt;h2 className=&quot;text-xl font-semibold mb-4&quot;&gt;Sales Summary&lt;/h2&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;                            &lt;div className=&quot;bg-muted p-4 rounded-lg text-center&quot;&gt;&#10;                                &lt;p className=&quot;text-muted-foreground text-sm&quot;&gt;Total Sales&lt;/p&gt;&#10;                                &lt;p className=&quot;text-2xl font-bold&quot;&gt;$0&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;bg-muted p-4 rounded-lg text-center&quot;&gt;&#10;                                &lt;p className=&quot;text-muted-foreground text-sm&quot;&gt;Tickets Sold&lt;/p&gt;&#10;                                &lt;p className=&quot;text-2xl font-bold&quot;&gt;0&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;bg-muted p-4 rounded-lg text-center&quot;&gt;&#10;                                &lt;p className=&quot;text-muted-foreground text-sm&quot;&gt;Remaining&lt;/p&gt;&#10;                                &lt;p className=&quot;text-2xl font-bold&quot;&gt;0&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/Card&gt;&#10;                &lt;/TabsContent&gt;&#10;&#10;                {/* Sessions Tab */}&#10;                &lt;TabsContent value=&quot;sessions&quot; className=&quot;space-y-8 mt-6&quot;&gt;&#10;                    &lt;Card className=&quot;p-6&quot;&gt;&#10;                        &lt;h2 className=&quot;text-xl font-semibold mb-4&quot;&gt;Sessions Schedule&lt;/h2&gt;&#10;                        &lt;ReviewSessions sessions={event.sessions}/&gt;&#10;                    &lt;/Card&gt;&#10;                &lt;/TabsContent&gt;&#10;&#10;                {/* Analytics Tab */}&#10;                &lt;TabsContent value=&quot;analytics&quot; className=&quot;space-y-8 mt-6&quot;&gt;&#10;                    &lt;Card className=&quot;p-6&quot;&gt;&#10;                        &lt;h2 className=&quot;text-xl font-semibold mb-4&quot;&gt;Event Performance&lt;/h2&gt;&#10;                        &lt;div className=&quot;text-center p-12 bg-muted rounded-lg&quot;&gt;&#10;                            &lt;p className=&quot;text-muted-foreground&quot;&gt;Analytics features will be available once the event is&#10;                                published.&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/Card&gt;&#10;                &lt;/TabsContent&gt;&#10;            &lt;/Tabs&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {useParams} from 'next/navigation';&#10;import {toast} from 'sonner';&#10;import {getEventById} from '@/lib/actions/eventActions';&#10;import {EventDetailDTO} from '@/lib/validators/event';&#10;import {Skeleton} from '@/components/ui/skeleton';&#10;import {EventStatusTracker} from '../_components/EventStatusTracker';&#10;import {useOrganization} from '@/providers/OrganizationProvider';&#10;&#10;// Import review components to reuse them&#10;import {ReviewEventHero} from '../_components/review/ReviewEventHero';&#10;import {ReviewEventDetails} from '../_components/review/ReviewEventDetails';&#10;import {ReviewTicketTiers} from '../_components/review/ReviewTicketTiers';&#10;import {ReviewSessions} from '../_components/review/ReviewSessions';&#10;&#10;// Import UI components&#10;import {Button} from '@/components/ui/button';&#10;import {Card} from '@/components/ui/card';&#10;import {Separator} from '@/components/ui/separator';&#10;&#10;export default function EventDetailsPage() {&#10;    const params = useParams();&#10;    const eventId = params.eventId as string;&#10;    const {organization} = useOrganization();&#10;&#10;    const [event, setEvent] = useState&lt;EventDetailDTO | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;&#10;    useEffect(() =&gt; {&#10;        if (eventId) {&#10;            setIsLoading(true);&#10;            getEventById(eventId)&#10;                .then(setEvent)&#10;                .catch(() =&gt; toast.error(&quot;Failed to load event details.&quot;))&#10;                .finally(() =&gt; setIsLoading(false));&#10;        }&#10;    }, [eventId]);&#10;&#10;    if (isLoading) {&#10;        return (&#10;            &lt;div className=&quot;p-4 md:p-8 max-w-4xl mx-auto space-y-8&quot;&gt;&#10;                &lt;Skeleton className=&quot;h-24 w-full&quot;/&gt;&#10;                &lt;Skeleton className=&quot;h-48 w-full&quot;/&gt;&#10;                &lt;Skeleton className=&quot;h-32 w-full&quot;/&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    if (!event) {&#10;        return &lt;div className=&quot;p-8 text-center&quot;&gt;Event not found.&lt;/div&gt;;&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-8 max-w-4xl mx-auto p-4 md:p-8&quot;&gt;&#10;            {/* Header Section with Title &amp; Status */}&#10;            &lt;div className=&quot;flex flex-col md:flex-row md:items-center justify-between gap-4&quot;&gt;&#10;                &lt;h1 className=&quot;text-3xl font-bold tracking-tight&quot;&gt;{event.title}&lt;/h1&gt;&#10;                &#10;                &lt;div className=&quot;flex flex-col sm:flex-row gap-4&quot;&gt;&#10;                    &lt;EventStatusTracker status={event.status} rejectionReason={event.rejectionReason} /&gt;&#10;                    &lt;Button variant=&quot;outline&quot;&gt;Edit Event&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &#10;            &lt;Separator className=&quot;my-6&quot; /&gt;&#10;&#10;            {/* Hero Section with Cover Photos and Title */}&#10;            &lt;ReviewEventHero&#10;                title={event.title}&#10;                categoryName={event.categoryName}&#10;                organization={organization}&#10;                coverFiles={event.coverPhotos}&#10;            /&gt;&#10;&#10;            {/* Event Details Section with Description and Overview */}&#10;            &lt;ReviewEventDetails&#10;                description={event.description}&#10;                overview={event.overview}&#10;            /&gt;&#10;&#10;            {/* Ticket Tiers Section */}&#10;            &lt;Card className=&quot;p-6&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-semibold mb-4&quot;&gt;Ticket Tiers&lt;/h2&gt;&#10;                &lt;ReviewTicketTiers tiers={event.tiers} /&gt;&#10;            &lt;/Card&gt;&#10;            &#10;            {/* Sales Summary Section */}&#10;            &lt;Card className=&quot;p-6&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-semibold mb-4&quot;&gt;Sales Summary&lt;/h2&gt;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;                    &lt;div className=&quot;bg-muted p-4 rounded-lg text-center&quot;&gt;&#10;                        &lt;p className=&quot;text-muted-foreground text-sm&quot;&gt;Total Sales&lt;/p&gt;&#10;                        &lt;p className=&quot;text-2xl font-bold&quot;&gt;$0&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;bg-muted p-4 rounded-lg text-center&quot;&gt;&#10;                        &lt;p className=&quot;text-muted-foreground text-sm&quot;&gt;Tickets Sold&lt;/p&gt;&#10;                        &lt;p className=&quot;text-2xl font-bold&quot;&gt;0&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;bg-muted p-4 rounded-lg text-center&quot;&gt;&#10;                        &lt;p className=&quot;text-muted-foreground text-sm&quot;&gt;Remaining&lt;/p&gt;&#10;                        &lt;p className=&quot;text-2xl font-bold&quot;&gt;0&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/Card&gt;&#10;&#10;            {/* Sessions Schedule Section */}&#10;            &lt;Card className=&quot;p-6&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-semibold mb-4&quot;&gt;Sessions Schedule&lt;/h2&gt;&#10;                &lt;ReviewSessions sessions={event.sessions} /&gt;&#10;            &lt;/Card&gt;&#10;            &#10;            {/* Analytics Section */}&#10;            &lt;Card className=&quot;p-6&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-semibold mb-4&quot;&gt;Event Performance&lt;/h2&gt;&#10;                &lt;div className=&quot;text-center p-12 bg-muted rounded-lg&quot;&gt;&#10;                    &lt;p className=&quot;text-muted-foreground&quot;&gt;Analytics features will be available once the event is published.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/Card&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/InteractiveBlocks.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/InteractiveBlocks.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useDraggable} from '@dnd-kit/core';&#10;import {Block, Tier} from '@/lib/validators/event';&#10;import {cn} from '@/lib/utils';&#10;import {Button} from '@/components/ui/button';&#10;&#10;// --- Interactive Draggable Block for Seated Grids ---&#10;interface DraggableBlockProps {&#10;    block: Block;&#10;    tiers: Tier[];&#10;    onSeatClick: (blockId: string, rowId: string, seatId: string) =&gt; void;&#10;    onApplyToAllSeats?: (blockId: string) =&gt; void;  // New prop for handling apply to all&#10;}&#10;&#10;export function InteractiveDraggableBlock({block, tiers, onSeatClick, onApplyToAllSeats}: DraggableBlockProps) {&#10;    const {setNodeRef} = useDraggable({&#10;        id: block.id,&#10;        disabled: true, // Dragging is disabled in assignment mode&#10;    });&#10;&#10;    const style = {&#10;        // No transform needed as blocks are static in this editor&#10;        left: block.position.x,&#10;        top: block.position.y,&#10;    };&#10;&#10;    const getTierColor = (tierId?: string) =&gt; {&#10;        if (tierId === 'RESERVED') return 'hsla(var(--muted-foreground), 0.5)'; // Added opacity&#10;        if (!tierId) return undefined;&#10;        const tier = tiers.find(t =&gt; t.id === tierId);&#10;        // Add opacity to the color&#10;        if (tier?.color) {&#10;            // Handle HSL color format&#10;            if (tier.color.startsWith('hsl')) {&#10;                return tier.color.replace('hsl', 'hsla').replace(')', ', 0.5)');&#10;            }&#10;            // Handle hex or other formats by adding opacity suffix&#10;            return `${tier.color}80`; // 80 is equivalent to 50% opacity in hex&#10;        }&#10;        return 'hsla(var(--primary), 0.5)'; // Added opacity&#10;    };&#10;&#10;    return (&#10;        &lt;div ref={setNodeRef} style={style} className=&quot;absolute p-3 bg-card border rounded-lg&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col text-center relative&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between w-full mb-2&quot;&gt;&#10;                    &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#10;                    {onApplyToAllSeats &amp;&amp; (&#10;                        &lt;Button&#10;                            size=&quot;sm&quot;&#10;                            variant=&quot;outline&quot;&#10;                            type={'button'}&#10;                            className=&quot;text-xs py-0 h-6&quot;&#10;                            onClick={(e) =&gt; {&#10;                                e.stopPropagation();&#10;                                onApplyToAllSeats(block.id);&#10;                            }}&#10;                        &gt;&#10;                            Apply to All&#10;                        &lt;/Button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;grid gap-1.5&quot;&#10;                     style={{gridTemplateColumns: `repeat(${block.rows?.[0]?.seats?.length || 1}, 1fr)`}}&gt;&#10;                    {block.rows?.map(row =&gt;&#10;                        row.seats.map(seat =&gt; (&#10;                            &lt;button&#10;                                key={seat.id}&#10;                                type=&quot;button&quot;&#10;                                onClick={() =&gt; onSeatClick(block.id, row.id, seat.id)}&#10;                                className={cn(&#10;                                    &quot;h-6 w-6 rounded-full border text-xs font-mono transition-all hover:scale-110 flex items-center justify-center&quot;,&#10;                                    seat.status === 'RESERVED' &amp;&amp; &quot;bg-muted-foreground/50 text-primary-foreground line-through border-destructive border-2&quot;&#10;                                )}&#10;                                style={{backgroundColor: seat.tierId &amp;&amp; seat.status !== 'RESERVED' ? getTierColor(seat.tierId) : undefined}}&#10;                            &gt;&#10;                                {seat.label}&#10;                            &lt;/button&gt;&#10;                        ))&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;// --- Interactive Resizable Block for Standing Capacity ---&#10;interface ResizableBlockProps {&#10;    block: Block;&#10;    tiers: Tier[];&#10;    onClick: (blockId: string) =&gt; void;&#10;}&#10;&#10;export function InteractiveResizableBlock({block, tiers, onClick}: ResizableBlockProps) {&#10;    const {setNodeRef} = useDraggable({&#10;        id: block.id,&#10;        disabled: true,&#10;    });&#10;&#10;    const style = {&#10;        left: block.position.x,&#10;        top: block.position.y,&#10;        width: block.width,&#10;        height: block.height,&#10;    };&#10;&#10;    // Determine the background color based on the tier of the seats inside the block&#10;    // with 50% opacity&#10;    const getBlockTierColor = () =&gt; {&#10;        const firstTieredSeat = block.seats?.find(s =&gt; s.tierId);&#10;        if (!firstTieredSeat || !firstTieredSeat.tierId) return undefined;&#10;        const tier = tiers.find(t =&gt; t.id === firstTieredSeat.tierId);&#10;&#10;        // Add opacity to the color&#10;        if (tier?.color) {&#10;            // Handle HSL color format&#10;            if (tier.color.startsWith('hsl')) {&#10;                return tier.color.replace('hsl', 'hsla').replace(')', ', 0.5)');&#10;            }&#10;            // Handle hex or other formats by adding opacity suffix&#10;            return `${tier.color}80`; // 80 is equivalent to 50% opacity in hex&#10;        }&#10;        return undefined;&#10;    };&#10;&#10;    return (&#10;        &lt;div ref={setNodeRef} style={style} className=&quot;absolute&quot;&gt;&#10;            &lt;div&#10;                onClick={() =&gt; onClick(block.id)}&#10;                className=&quot;p-2 bg-card border rounded-lg shadow-md box-border flex flex-col relative cursor-pointer h-full w-full&quot;&#10;                style={{backgroundColor: getBlockTierColor()}}&#10;            &gt;&#10;                &lt;div className=&quot;flex items-center gap-2 flex-grow&quot;&gt;&#10;                    &lt;div className=&quot;flex flex-col text-center flex-grow&quot;&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#10;                        &lt;span className=&quot;text-xs text-muted-foreground&quot;&gt;{block.capacity} capacity&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useDraggable} from '@dnd-kit/core';&#10;import {Block, Tier} from '@/lib/validators/event';&#10;import {cn} from '@/lib/utils';&#10;import {Button} from '@/components/ui/button';&#10;&#10;// --- Interactive Draggable Block for Seated Grids ---&#10;interface DraggableBlockProps {&#10;    block: Block;&#10;    tiers: Tier[];&#10;    onSeatClick: (blockId: string, rowId: string, seatId: string) =&gt; void;&#10;    onApplyToAllSeats?: (blockId: string) =&gt; void;  // New prop for handling apply to all&#10;}&#10;&#10;export function InteractiveDraggableBlock({block, tiers, onSeatClick, onApplyToAllSeats}: DraggableBlockProps) {&#10;    const {setNodeRef} = useDraggable({&#10;        id: block.id,&#10;        disabled: true, // Dragging is disabled in assignment mode&#10;    });&#10;&#10;    const style = {&#10;        // No transform needed as blocks are static in this editor&#10;        left: block.position.x,&#10;        top: block.position.y,&#10;    };&#10;&#10;    const getTierColor = (tierId?: string) =&gt; {&#10;        if (tierId === 'RESERVED') return 'hsla(var(--muted-foreground), 0.5)'; // Added opacity&#10;        if (!tierId) return undefined;&#10;        const tier = tiers.find(t =&gt; t.id === tierId);&#10;        // Add opacity to the color&#10;        if (tier?.color) {&#10;            // Handle HSL color format&#10;            if (tier.color.startsWith('hsl')) {&#10;                return tier.color.replace('hsl', 'hsla').replace(')', ', 0.5)');&#10;            }&#10;            // Handle hex or other formats by adding opacity suffix&#10;            return `${tier.color}80`; // 80 is equivalent to 50% opacity in hex&#10;        }&#10;        return 'hsla(var(--primary), 0.5)'; // Added opacity&#10;    };&#10;&#10;    return (&#10;        &lt;div ref={setNodeRef} style={style} className=&quot;absolute p-3 bg-card border rounded-lg&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col text-center relative&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between w-full mb-2&quot;&gt;&#10;                    &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#10;                    {onApplyToAllSeats &amp;&amp; (&#10;                        &lt;Button&#10;                            size=&quot;sm&quot;&#10;                            variant=&quot;outline&quot;&#10;                            type={'button'}&#10;                            className=&quot;text-xs py-0 h-6&quot;&#10;                            onClick={(e) =&gt; {&#10;                                e.stopPropagation();&#10;                                onApplyToAllSeats(block.id);&#10;                            }}&#10;                        &gt;&#10;                            Apply to All&#10;                        &lt;/Button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;grid gap-1.5&quot;&#10;                     style={{gridTemplateColumns: `repeat(${block.rows?.[0]?.seats?.length || 1}, 1fr)`}}&gt;&#10;                    {block.rows?.map(row =&gt;&#10;                        row.seats.map(seat =&gt; (&#10;                            &lt;button&#10;                                key={seat.id}&#10;                                type=&quot;button&quot;&#10;                                onClick={() =&gt; onSeatClick(block.id, row.id, seat.id)}&#10;                                className={cn(&#10;                                    &quot;h-6 w-6 rounded-full border text-xs font-mono transition-all hover:scale-110 flex items-center justify-center&quot;,&#10;                                    seat.status === 'RESERVED' &amp;&amp; &quot;bg-muted-foreground/50 text-primary-foreground line-through border-destructive border-2&quot;&#10;                                )}&#10;                                style={{backgroundColor: seat.tierId &amp;&amp; seat.status !== 'RESERVED' ? getTierColor(seat.tierId) : undefined}}&#10;                            &gt;&#10;                                {seat.label}&#10;                            &lt;/button&gt;&#10;                        ))&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;// --- Interactive Resizable Block for Standing Capacity ---&#10;interface ResizableBlockProps {&#10;    block: Block;&#10;    tiers: Tier[];&#10;    onClick: (blockId: string) =&gt; void;&#10;}&#10;&#10;export function InteractiveResizableBlock({block, tiers, onClick}: ResizableBlockProps) {&#10;    const {setNodeRef} = useDraggable({&#10;        id: block.id,&#10;        disabled: true,&#10;    });&#10;&#10;    // Fix the TypeScript error by ensuring width and height are valid CSS values&#10;    const style: React.CSSProperties = {&#10;        left: block.position.x,&#10;        top: block.position.y,&#10;        width: block.width ?? undefined,&#10;        height: block.height ?? undefined,&#10;    };&#10;&#10;    // Determine the background color based on the tier of the seats inside the block&#10;    // with 50% opacity&#10;    const getBlockTierColor = () =&gt; {&#10;        const firstTieredSeat = block.seats?.find(s =&gt; s.tierId);&#10;        if (!firstTieredSeat || !firstTieredSeat.tierId) return undefined;&#10;        const tier = tiers.find(t =&gt; t.id === firstTieredSeat.tierId);&#10;&#10;        // Add opacity to the color&#10;        if (tier?.color) {&#10;            // Handle HSL color format&#10;            if (tier.color.startsWith('hsl')) {&#10;                return tier.color.replace('hsl', 'hsla').replace(')', ', 0.5)');&#10;            }&#10;            // Handle hex or other formats by adding opacity suffix&#10;            return `${tier.color}80`; // 80 is equivalent to 50% opacity in hex&#10;        }&#10;        return undefined;&#10;    };&#10;&#10;    return (&#10;        &lt;div ref={setNodeRef} style={style} className=&quot;absolute&quot;&gt;&#10;            &lt;div&#10;                onClick={() =&gt; onClick(block.id)}&#10;                className=&quot;p-2 bg-card border rounded-lg shadow-md box-border flex flex-col relative cursor-pointer h-full w-full&quot;&#10;                style={{backgroundColor: getBlockTierColor()}}&#10;            &gt;&#10;                &lt;div className=&quot;flex items-center gap-2 flex-grow&quot;&gt;&#10;                    &lt;div className=&quot;flex flex-col text-center flex-grow&quot;&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#10;                        &lt;span className=&quot;text-xs text-muted-foreground&quot;&gt;{block.capacity} capacity&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/LocationConfigDialog.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/LocationConfigDialog.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useFormContext} from 'react-hook-form';&#10;import {CreateEventFormData, SessionType} from '@/lib/validators/event';&#10;import {toast} from 'sonner';&#10;import {GoogleMap, useJsApiLoader, Marker} from '@react-google-maps/api';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Label} from '@/components/ui/label';&#10;import {Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter} from '@/components/ui/dialog';&#10;import {Tabs, TabsContent, TabsList, TabsTrigger} from '@/components/ui/tabs';&#10;import {FormField, FormItem, FormLabel, FormControl, FormMessage} from '@/components/ui/form';&#10;import {Checkbox} from '@/components/ui/checkbox';&#10;import {Skeleton} from '@/components/ui/skeleton';&#10;&#10;const MAP_CONTAINER_STYLE = {&#10;    width: '100%',&#10;    height: '100%',&#10;    borderRadius: 'var(--radius)',&#10;};&#10;&#10;// Default center for the map (Colombo, Sri Lanka)&#10;const DEFAULT_MAP_CENTER = {&#10;    lat: 6.9271,&#10;    lng: 79.8612,&#10;};&#10;&#10;const LIBRARIES: (&quot;places&quot;)[] = ['places'];&#10;&#10;export function LocationConfigDialog({index, open, setOpenAction}: {&#10;    index: number;&#10;    open: boolean;&#10;    setOpenAction: (open: boolean) =&gt; void&#10;}) {&#10;    const {control, watch, getValues, setValue} = useFormContext&lt;CreateEventFormData&gt;();&#10;    const isOnline = watch(`sessions.${index}.sessionType`) === SessionType.ONLINE;&#10;    const venueDetails = watch(`sessions.${index}.venueDetails`);&#10;&#10;    const [applyToAll, setApplyToAll] = useState(false);&#10;    const [markerPosition, setMarkerPosition] = useState&lt;google.maps.LatLngLiteral&gt;(&#10;        venueDetails?.latitude &amp;&amp; venueDetails?.longitude&#10;            ? {lat: venueDetails.latitude, lng: venueDetails.longitude}&#10;            : DEFAULT_MAP_CENTER&#10;    );&#10;    const autocompleteRef = useRef&lt;google.maps.places.Autocomplete | null&gt;(null);&#10;    const autocompleteInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    useEffect(() =&gt; {&#10;        if (markerPosition &amp;&amp; watch(`sessions.${index}.sessionType`) === SessionType.PHYSICAL &amp;&amp; open) {&#10;            setValue(`sessions.${index}.venueDetails.latitude`, markerPosition.lat, {shouldValidate: true});&#10;            setValue(`sessions.${index}.venueDetails.longitude`, markerPosition.lng, {shouldValidate: true});&#10;        }&#10;    }, [markerPosition, index, setValue, watch, open]);&#10;&#10;    // Reset layoutData if any change happen in the session type or venue details&#10;    useEffect(() =&gt; {&#10;        setValue(`sessions.${index}.layoutData`, {name: null, layout: {blocks: []}}, {shouldValidate: true});&#10;    }, [index, isOnline, venueDetails, setValue]);&#10;&#10;    const {isLoaded} = useJsApiLoader({&#10;        id: 'google-map-script',&#10;        googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY!,&#10;        libraries: LIBRARIES,&#10;    });&#10;&#10;    // Configure Google Places Autocomplete after loading&#10;    useEffect(() =&gt; {&#10;        if (isLoaded &amp;&amp; autocompleteRef.current &amp;&amp; autocompleteInputRef.current) {&#10;            // Ensure autocomplete suggestions appear above the dialog&#10;            const pacContainers = document.querySelectorAll('.pac-container');&#10;            pacContainers.forEach(container =&gt; {&#10;                (container as HTMLElement).style.zIndex = '9999';&#10;            });&#10;        }&#10;    }, [isLoaded]);&#10;&#10;    useEffect(() =&gt; {&#10;        if (venueDetails?.latitude &amp;&amp; venueDetails?.longitude) {&#10;            setMarkerPosition({lat: venueDetails.latitude, lng: venueDetails.longitude});&#10;        }&#10;    }, [venueDetails]);&#10;&#10;    const handleMapClick = (event: google.maps.MapMouseEvent) =&gt; {&#10;        if (event.latLng) {&#10;            const newPos = {lat: event.latLng.lat(), lng: event.latLng.lng()};&#10;            setMarkerPosition(newPos);&#10;        }&#10;    };&#10;&#10;    // const onAutocompleteLoad = (autocomplete: google.maps.places.Autocomplete) =&gt; {&#10;    //     autocompleteRef.current = autocomplete;&#10;    // };&#10;    //&#10;    // const onPlaceChanged = () =&gt; {&#10;    //     console.log('Place changed:', autocompleteRef.current?.getPlace());&#10;    //     if (autocompleteRef.current) {&#10;    //         const place = autocompleteRef.current.getPlace();&#10;    //         if (place.geometry?.location) {&#10;    //             const newPos = {&#10;    //                 lat: place.geometry.location.lat(),&#10;    //                 lng: place.geometry.location.lng(),&#10;    //             };&#10;    //             setMarkerPosition(newPos);&#10;    //             setValue(`sessions.${index}.venueDetails.name`, place.name || '', {shouldValidate: true});&#10;    //             setValue(`sessions.${index}.venueDetails.address`, place.formatted_address || '', {shouldValidate: true});&#10;    //             setValue(`sessions.${index}.venueDetails.latitude`, newPos.lat, {shouldValidate: true});&#10;    //             setValue(`sessions.${index}.venueDetails.longitude`, newPos.lng, {shouldValidate: true});&#10;    //         }&#10;    //     }&#10;    // };&#10;&#10;    const handleSave = () =&gt; {&#10;        const currentSessionData = getValues(`sessions.${index}`);&#10;        if (applyToAll) {&#10;            const allSessions = getValues('sessions');&#10;            allSessions.forEach((_, i) =&gt; {&#10;                if (i === index) return; // Skip the current session&#10;                // Always reset layoutData&#10;                setValue(`sessions.${i}.sessionType`, currentSessionData.sessionType, {shouldValidate: true});&#10;                setValue(`sessions.${i}.venueDetails`, currentSessionData.venueDetails, {shouldValidate: true});&#10;            });&#10;            toast.success(&quot;Location details applied to all sessions.&quot;);&#10;        }&#10;&#10;        setOpenAction(false);&#10;    };&#10;&#10;&#10;    return (&#10;        &lt;Dialog open={open} onOpenChange={setOpenAction}&gt;&#10;            {/* ✅ Restructured Dialog for better overflow handling */}&#10;            &lt;DialogContent className=&quot;sm:max-w-6xl p-0 grid grid-rows-[auto_1fr_auto] max-h-[90vh]&quot;&gt;&#10;                &lt;DialogHeader className=&quot;p-6 pb-4 border-b&quot;&gt;&#10;                    &lt;DialogTitle&gt;Configure Location for Session {index + 1}&lt;/DialogTitle&gt;&#10;                &lt;/DialogHeader&gt;&#10;&#10;                {/* ✅ Main content area is now scrollable */}&#10;                &lt;div className=&quot;overflow-y-auto&quot;&gt;&#10;                    &lt;Tabs&#10;                        defaultValue={isOnline ? &quot;online&quot; : &quot;physical&quot;}&#10;                        onValueChange={(value) =&gt; {&#10;                            setValue(`sessions.${index}.sessionType`, value === 'online' ? SessionType.ONLINE : SessionType.PHYSICAL, {shouldValidate: true});&#10;                            setValue(`sessions.${index}.venueDetails`, undefined, {shouldValidate: true});&#10;                        }}&#10;                        className=&quot;w-full&quot;&#10;                    &gt;&#10;                        &lt;TabsList className=&quot;mx-6 mt-4&quot;&gt;&#10;                            &lt;TabsTrigger value=&quot;physical&quot;&gt;Physical&lt;/TabsTrigger&gt;&#10;                            &lt;TabsTrigger value=&quot;online&quot;&gt;Online&lt;/TabsTrigger&gt;&#10;                        &lt;/TabsList&gt;&#10;                        &lt;TabsContent value=&quot;physical&quot; className={'px-4 py-0'}&gt;&#10;                            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2&quot;&gt;&#10;                                {/* Left Side - Form Fields */}&#10;                                &lt;div className=&quot;space-y-4 p-6&quot;&gt;&#10;                                    &lt;FormField control={control} name={`sessions.${index}.venueDetails.name`}&#10;                                               render={({field}) =&gt; (&#10;                                                   &lt;FormItem&gt;&lt;FormLabel&gt;Venue Name&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                                       placeholder=&quot;e.g., Grand Hall&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                                    &lt;FormField control={control} name={`sessions.${index}.venueDetails.address`}&#10;                                               render={({field}) =&gt; (&#10;                                                   &lt;FormItem&gt;&lt;FormLabel&gt;Address&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                                       placeholder=&quot;Street, City&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                                    &lt;div className=&quot;text-sm text-muted-foreground pt-4&quot;&gt;&#10;                                        &lt;p&gt;Use the map to locate the venue precisely. You can:&lt;/p&gt;&#10;                                        &lt;ul className=&quot;list-disc pl-5 mt-2 space-y-1&quot;&gt;&#10;                                            &lt;li&gt;Search for a venue using the search box.&lt;/li&gt;&#10;                                            &lt;li&gt;Click on the map to place a marker.&lt;/li&gt;&#10;                                            &lt;li&gt;Drag the marker to fine-tune the location.&lt;/li&gt;&#10;                                        &lt;/ul&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Right Side - Map */}&#10;                                &lt;div className=&quot;flex flex-col md:h-full gap-4&quot;&gt;&#10;                                    {isLoaded ? (&#10;                                        &lt;&gt;&#10;                                            {/*&#10;                                              * Autocomplete functionality temporarily disabled&#10;                                              * TODO: Fix this to properly handle clickable suggestions&#10;                                              */}&#10;                                            {/*&#10;                                            &lt;Autocomplete&#10;                                                onLoad={onAutocompleteLoad}&#10;                                                className={'!z-10'}&#10;                                                onPlaceChanged={() =&gt; {&#10;                                                    console.log('Place changed');&#10;                                                }}&#10;                                            &gt;&#10;                                                &lt;Input&#10;                                                    type=&quot;text&quot;&#10;                                                    placeholder=&quot;Search for a location...&quot;&#10;                                                    className=&quot;w-full shadow-md&quot;&#10;                                                /&gt;&#10;                                            &lt;/Autocomplete&gt;&#10;                                            */}&#10;&#10;                                            {/* Simple input field while autocomplete is disabled */}&#10;                                            &lt;Input&#10;                                                type=&quot;text&quot;&#10;                                                placeholder=&quot;Search functionality coming soon...&quot;&#10;                                                className=&quot;w-full shadow-md opacity-70&quot;&#10;                                                disabled&#10;                                            /&gt;&#10;&#10;                                            &lt;GoogleMap mapContainerStyle={MAP_CONTAINER_STYLE} center={markerPosition}&#10;                                                       zoom={15} onClick={handleMapClick}&gt;&#10;                                                &lt;Marker&#10;                                                    position={markerPosition}&#10;                                                    draggable={true}&#10;                                                    onDragEnd={(e) =&gt; {&#10;                                                        if (e.latLng) {&#10;                                                            const newPos = {lat: e.latLng.lat(), lng: e.latLng.lng()};&#10;                                                            setMarkerPosition(newPos); // useEffect will push to form&#10;                                                        }&#10;                                                    }}&#10;                                                /&gt;&#10;                                            &lt;/GoogleMap&gt;&#10;                                        &lt;/&gt;&#10;                                    ) : &lt;Skeleton className=&quot;h-full w-full&quot;/&gt;}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/TabsContent&gt;&#10;                        &lt;TabsContent value=&quot;online&quot; className=&quot;p-6&quot;&gt;&#10;                            &lt;FormField control={control} name={`sessions.${index}.venueDetails.onlineLink`}&#10;                                       render={({field}) =&gt; (&#10;                                           &lt;FormItem&gt;&lt;FormLabel&gt;Online Link&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                               placeholder=&quot;https://zoom.us/...&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                        &lt;/TabsContent&gt;&#10;                    &lt;/Tabs&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;DialogFooter className=&quot;justify-between p-6 border-t&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;Checkbox id=&quot;apply-to-all&quot; checked={applyToAll}&#10;                                  onCheckedChange={(checked) =&gt; setApplyToAll(checked === true)}/&gt;&#10;                        &lt;Label htmlFor=&quot;apply-to-all&quot;&gt;Apply to all sessions&lt;/Label&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Button type=&quot;button&quot; onClick={handleSave}&gt;Save Location&lt;/Button&gt;&#10;                &lt;/DialogFooter&gt;&#10;            &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useFormContext} from 'react-hook-form';&#10;import {CreateEventFormData, SessionType} from '@/lib/validators/event';&#10;import {toast} from 'sonner';&#10;import {GoogleMap, useJsApiLoader, Marker} from '@react-google-maps/api';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Label} from '@/components/ui/label';&#10;import {Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter} from '@/components/ui/dialog';&#10;import {Tabs, TabsContent, TabsList, TabsTrigger} from '@/components/ui/tabs';&#10;import {FormField, FormItem, FormLabel, FormControl, FormMessage, Form} from '@/components/ui/form';&#10;import {Checkbox} from '@/components/ui/checkbox';&#10;import {Skeleton} from '@/components/ui/skeleton';&#10;import { zodResolver } from &quot;@hookform/resolvers/zod&quot;;&#10;import * as z from &quot;zod&quot;;&#10;import { useForm } from &quot;react-hook-form&quot;;&#10;&#10;const MAP_CONTAINER_STYLE = {&#10;    width: '100%',&#10;    height: '100%',&#10;    borderRadius: 'var(--radius)',&#10;};&#10;&#10;// Default center for the map (Colombo, Sri Lanka)&#10;const DEFAULT_MAP_CENTER = {&#10;    lat: 6.9271,&#10;    lng: 79.8612,&#10;};&#10;&#10;const LIBRARIES: (&quot;places&quot;)[] = ['places'];&#10;&#10;// Local validation schema&#10;const physicalVenueSchema = z.object({&#10;    name: z.string().min(1, &quot;Venue name is required&quot;),&#10;    address: z.string().optional(),&#10;    latitude: z.number().optional(),&#10;    longitude: z.number().optional(),&#10;});&#10;&#10;const onlineVenueSchema = z.object({&#10;    onlineLink: z.string().url(&quot;Must be a valid URL&quot;).min(1, &quot;Online link is required&quot;),&#10;});&#10;&#10;const locationConfigSchema = z.object({&#10;    sessionType: z.enum([SessionType.ONLINE, SessionType.PHYSICAL]),&#10;    venueDetails: z.union([physicalVenueSchema, onlineVenueSchema]),&#10;});&#10;&#10;export function LocationConfigDialog({index, open, setOpenAction}: {&#10;    index: number;&#10;    open: boolean;&#10;    setOpenAction: (open: boolean) =&gt; void&#10;}) {&#10;    const {control, watch, getValues, setValue} = useFormContext&lt;CreateEventFormData&gt;();&#10;    &#10;    // Local form state&#10;    const [localFormState, setLocalFormState] = useState({&#10;        sessionType: SessionType.PHYSICAL,&#10;        venueDetails: {&#10;            name: '',&#10;            address: '',&#10;            onlineLink: '',&#10;            latitude: DEFAULT_MAP_CENTER.lat,&#10;            longitude: DEFAULT_MAP_CENTER.lng,&#10;        }&#10;    });&#10;    const [applyToAll, setApplyToAll] = useState(false);&#10;    const [hasChanges, setHasChanges] = useState(false);&#10;    const [localErrors, setLocalErrors] = useState&lt;{&#10;        venueName?: string;&#10;        onlineLink?: string;&#10;    }&gt;({});&#10;    &#10;    const [markerPosition, setMarkerPosition] = useState&lt;google.maps.LatLngLiteral&gt;(DEFAULT_MAP_CENTER);&#10;    const autocompleteRef = useRef&lt;google.maps.places.Autocomplete | null&gt;(null);&#10;    const autocompleteInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    // Snapshot form values when dialog opens&#10;    useEffect(() =&gt; {&#10;        if (open) {&#10;            const sessionData = getValues(`sessions.${index}`);&#10;            setLocalFormState({&#10;                sessionType: sessionData.sessionType || SessionType.PHYSICAL,&#10;                venueDetails: {&#10;                    name: sessionData.venueDetails?.name || '',&#10;                    address: sessionData.venueDetails?.address || '',&#10;                    onlineLink: sessionData.venueDetails?.onlineLink || '',&#10;                    latitude: sessionData.venueDetails?.latitude || DEFAULT_MAP_CENTER.lat,&#10;                    longitude: sessionData.venueDetails?.longitude || DEFAULT_MAP_CENTER.lng,&#10;                }&#10;            });&#10;            &#10;            // Set marker position based on venueDetails if available&#10;            if (sessionData.venueDetails?.latitude &amp;&amp; sessionData.venueDetails?.longitude) {&#10;                setMarkerPosition({&#10;                    lat: sessionData.venueDetails.latitude,&#10;                    lng: sessionData.venueDetails.longitude&#10;                });&#10;            } else {&#10;                setMarkerPosition(DEFAULT_MAP_CENTER);&#10;            }&#10;            &#10;            setHasChanges(false);&#10;            setLocalErrors({});&#10;        }&#10;    }, [open, getValues, index]);&#10;    &#10;    // Update marker position when local venue details change&#10;    useEffect(() =&gt; {&#10;        if (localFormState.sessionType === SessionType.PHYSICAL) {&#10;            setMarkerPosition({&#10;                lat: localFormState.venueDetails.latitude || DEFAULT_MAP_CENTER.lat,&#10;                lng: localFormState.venueDetails.longitude || DEFAULT_MAP_CENTER.lng&#10;            });&#10;        }&#10;    }, [localFormState.venueDetails.latitude, localFormState.venueDetails.longitude, localFormState.sessionType]);&#10;&#10;    const {isLoaded} = useJsApiLoader({&#10;        id: 'google-map-script',&#10;        googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY!,&#10;        libraries: LIBRARIES,&#10;    });&#10;&#10;    // Configure Google Places Autocomplete after loading&#10;    useEffect(() =&gt; {&#10;        if (isLoaded &amp;&amp; autocompleteRef.current &amp;&amp; autocompleteInputRef.current) {&#10;            // Ensure autocomplete suggestions appear above the dialog&#10;            const pacContainers = document.querySelectorAll('.pac-container');&#10;            pacContainers.forEach(container =&gt; {&#10;                (container as HTMLElement).style.zIndex = '9999';&#10;            });&#10;        }&#10;    }, [isLoaded]);&#10;&#10;    const handleMapClick = (event: google.maps.MapMouseEvent) =&gt; {&#10;        if (event.latLng) {&#10;            const newPos = {lat: event.latLng.lat(), lng: event.latLng.lng()};&#10;            setMarkerPosition(newPos);&#10;            &#10;            // Update local state&#10;            setLocalFormState(prev =&gt; ({&#10;                ...prev,&#10;                venueDetails: {&#10;                    ...prev.venueDetails,&#10;                    latitude: newPos.lat,&#10;                    longitude: newPos.lng&#10;                }&#10;            }));&#10;            &#10;            setHasChanges(true);&#10;        }&#10;    };&#10;    &#10;    // Local validation&#10;    const validateLocalState = () =&gt; {&#10;        const errors: {venueName?: string; onlineLink?: string} = {};&#10;        &#10;        if (localFormState.sessionType === SessionType.PHYSICAL &amp;&amp; !localFormState.venueDetails.name) {&#10;            errors.venueName = &quot;Venue name is required&quot;;&#10;        }&#10;        &#10;        if (localFormState.sessionType === SessionType.ONLINE) {&#10;            if (!localFormState.venueDetails.onlineLink) {&#10;                errors.onlineLink = &quot;Online link is required&quot;;&#10;            } else if (!/^https?:\/\/.+/.test(localFormState.venueDetails.onlineLink)) {&#10;                errors.onlineLink = &quot;Must be a valid URL&quot;;&#10;            }&#10;        }&#10;        &#10;        setLocalErrors(errors);&#10;        return Object.keys(errors).length === 0;&#10;    };&#10;&#10;    const handleSave = () =&gt; {&#10;        // Validate before saving&#10;        const isValid = validateLocalState();&#10;        &#10;        if (!isValid) return;&#10;        &#10;        // Apply changes to current session&#10;        setValue(`sessions.${index}.sessionType`, localFormState.sessionType, {shouldValidate: true});&#10;        &#10;        if (localFormState.sessionType === SessionType.PHYSICAL) {&#10;            setValue(`sessions.${index}.venueDetails`, {&#10;                name: localFormState.venueDetails.name,&#10;                address: localFormState.venueDetails.address,&#10;                latitude: localFormState.venueDetails.latitude,&#10;                longitude: localFormState.venueDetails.longitude&#10;            }, {shouldValidate: true});&#10;        } else {&#10;            setValue(`sessions.${index}.venueDetails`, {&#10;                onlineLink: localFormState.venueDetails.onlineLink&#10;            }, {shouldValidate: true});&#10;        }&#10;        &#10;        // Reset layoutData for current session&#10;        setValue(`sessions.${index}.layoutData`, {name: null, layout: {blocks: []}}, {shouldValidate: true});&#10;        &#10;        if (applyToAll) {&#10;            const allSessions = getValues('sessions');&#10;            allSessions.forEach((_, i) =&gt; {&#10;                if (i === index) return; // Skip the current session&#10;                &#10;                setValue(`sessions.${i}.sessionType`, localFormState.sessionType, {shouldValidate: true});&#10;                &#10;                if (localFormState.sessionType === SessionType.PHYSICAL) {&#10;                    setValue(`sessions.${i}.venueDetails`, {&#10;                        name: localFormState.venueDetails.name,&#10;                        address: localFormState.venueDetails.address,&#10;                        latitude: localFormState.venueDetails.latitude,&#10;                        longitude: localFormState.venueDetails.longitude&#10;                    }, {shouldValidate: true});&#10;                } else {&#10;                    setValue(`sessions.${i}.venueDetails`, {&#10;                        onlineLink: localFormState.venueDetails.onlineLink&#10;                    }, {shouldValidate: true});&#10;                }&#10;                &#10;                // Reset layoutData for all sessions&#10;                setValue(`sessions.${i}.layoutData`, {name: null, layout: {blocks: []}}, {shouldValidate: true});&#10;            });&#10;            toast.success(&quot;Location details applied to all sessions.&quot;);&#10;        }&#10;&#10;        setOpenAction(false);&#10;    };&#10;    &#10;    const handleInputChange = (field: string, value: string | number) =&gt; {&#10;        setLocalFormState(prev =&gt; ({&#10;            ...prev,&#10;            venueDetails: {&#10;                ...prev.venueDetails,&#10;                [field]: value&#10;            }&#10;        }));&#10;        setHasChanges(true);&#10;    };&#10;    &#10;    const handleSessionTypeChange = (type: SessionType) =&gt; {&#10;        setLocalFormState(prev =&gt; ({&#10;            ...prev,&#10;            sessionType: type&#10;        }));&#10;        setHasChanges(true);&#10;    };&#10;&#10;    return (&#10;        &lt;Dialog open={open} onOpenChange={setOpenAction}&gt;&#10;            {/* ✅ Restructured Dialog for better overflow handling */}&#10;            &lt;DialogContent className=&quot;sm:max-w-6xl p-0 grid grid-rows-[auto_1fr_auto] max-h-[90vh]&quot;&gt;&#10;                &lt;DialogHeader className=&quot;p-6 pb-4 border-b&quot;&gt;&#10;                    &lt;DialogTitle&gt;Configure Location for Session {index + 1}&lt;/DialogTitle&gt;&#10;                &lt;/DialogHeader&gt;&#10;&#10;                {/* ✅ Main content area is now scrollable */}&#10;                &lt;div className=&quot;overflow-y-auto&quot;&gt;&#10;                    &lt;Tabs&#10;                        defaultValue={localFormState.sessionType === SessionType.ONLINE ? &quot;online&quot; : &quot;physical&quot;}&#10;                        onValueChange={(value) =&gt; {&#10;                            handleSessionTypeChange(value === 'online' ? SessionType.ONLINE : SessionType.PHYSICAL);&#10;                        }}&#10;                        className=&quot;w-full&quot;&#10;                    &gt;&#10;                        &lt;TabsList className=&quot;mx-6 mt-4&quot;&gt;&#10;                            &lt;TabsTrigger value=&quot;physical&quot;&gt;Physical&lt;/TabsTrigger&gt;&#10;                            &lt;TabsTrigger value=&quot;online&quot;&gt;Online&lt;/TabsTrigger&gt;&#10;                        &lt;/TabsList&gt;&#10;                        &lt;TabsContent value=&quot;physical&quot; className={'px-4 py-0'}&gt;&#10;                            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2&quot;&gt;&#10;                                {/* Left Side - Form Fields */}&#10;                                &lt;div className=&quot;space-y-4 p-6&quot;&gt;&#10;                                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                                        &lt;Label htmlFor=&quot;venue-name&quot;&gt;Venue Name&lt;/Label&gt;&#10;                                        &lt;Input &#10;                                            id=&quot;venue-name&quot;&#10;                                            placeholder=&quot;e.g., Grand Hall&quot; &#10;                                            value={localFormState.venueDetails.name || ''}&#10;                                            onChange={(e) =&gt; handleInputChange('name', e.target.value)}&#10;                                        /&gt;&#10;                                        {localErrors.venueName &amp;&amp; (&#10;                                            &lt;p className=&quot;text-sm text-destructive&quot;&gt;{localErrors.venueName}&lt;/p&gt;&#10;                                        )}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                                        &lt;Label htmlFor=&quot;venue-address&quot;&gt;Address&lt;/Label&gt;&#10;                                        &lt;Input &#10;                                            id=&quot;venue-address&quot;&#10;                                            placeholder=&quot;Street, City&quot; &#10;                                            value={localFormState.venueDetails.address || ''}&#10;                                            onChange={(e) =&gt; handleInputChange('address', e.target.value)}&#10;                                        /&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;text-sm text-muted-foreground pt-4&quot;&gt;&#10;                                        &lt;p&gt;Use the map to locate the venue precisely. You can:&lt;/p&gt;&#10;                                        &lt;ul className=&quot;list-disc pl-5 mt-2 space-y-1&quot;&gt;&#10;                                            &lt;li&gt;Search for a venue using the search box.&lt;/li&gt;&#10;                                            &lt;li&gt;Click on the map to place a marker.&lt;/li&gt;&#10;                                            &lt;li&gt;Drag the marker to fine-tune the location.&lt;/li&gt;&#10;                                        &lt;/ul&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Right Side - Map */}&#10;                                &lt;div className=&quot;flex flex-col md:h-full gap-4&quot;&gt;&#10;                                    {isLoaded ? (&#10;                                        &lt;&gt;&#10;                                            &lt;Input&#10;                                                type=&quot;text&quot;&#10;                                                placeholder=&quot;Search functionality coming soon...&quot;&#10;                                                className=&quot;w-full shadow-md opacity-70&quot;&#10;                                                disabled&#10;                                            /&gt;&#10;&#10;                                            &lt;GoogleMap mapContainerStyle={MAP_CONTAINER_STYLE} center={markerPosition}&#10;                                                       zoom={15} onClick={handleMapClick}&gt;&#10;                                                &lt;Marker&#10;                                                    position={markerPosition}&#10;                                                    draggable={true}&#10;                                                    onDragEnd={(e) =&gt; {&#10;                                                        if (e.latLng) {&#10;                                                            const newPos = {lat: e.latLng.lat(), lng: e.latLng.lng()};&#10;                                                            setMarkerPosition(newPos);&#10;                                                            setLocalFormState(prev =&gt; ({&#10;                                                                ...prev,&#10;                                                                venueDetails: {&#10;                                                                    ...prev.venueDetails,&#10;                                                                    latitude: newPos.lat,&#10;                                                                    longitude: newPos.lng&#10;                                                                }&#10;                                                            }));&#10;                                                            setHasChanges(true);&#10;                                                        }&#10;                                                    }}&#10;                                                /&gt;&#10;                                            &lt;/GoogleMap&gt;&#10;                                        &lt;/&gt;&#10;                                    ) : &lt;Skeleton className=&quot;h-full w-full&quot;/&gt;}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/TabsContent&gt;&#10;                        &lt;TabsContent value=&quot;online&quot; className=&quot;p-6&quot;&gt;&#10;                            &lt;div className=&quot;space-y-2&quot;&gt;&#10;                                &lt;Label htmlFor=&quot;online-link&quot;&gt;Online Link&lt;/Label&gt;&#10;                                &lt;Input &#10;                                    id=&quot;online-link&quot;&#10;                                    placeholder=&quot;https://zoom.us/...&quot; &#10;                                    value={localFormState.venueDetails.onlineLink || ''}&#10;                                    onChange={(e) =&gt; handleInputChange('onlineLink', e.target.value)}&#10;                                /&gt;&#10;                                {localErrors.onlineLink &amp;&amp; (&#10;                                    &lt;p className=&quot;text-sm text-destructive&quot;&gt;{localErrors.onlineLink}&lt;/p&gt;&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        &lt;/TabsContent&gt;&#10;                    &lt;/Tabs&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;DialogFooter className=&quot;justify-between p-6 border-t&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;Checkbox id=&quot;apply-to-all&quot; checked={applyToAll}&#10;                                  onCheckedChange={(checked) =&gt; setApplyToAll(checked === true)}/&gt;&#10;                        &lt;Label htmlFor=&quot;apply-to-all&quot;&gt;Apply to all sessions&lt;/Label&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Button type=&quot;button&quot; onClick={handleSave}&gt;Save Location&lt;/Button&gt;&#10;                &lt;/DialogFooter&gt;&#10;            &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/SeratingStep.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/SeratingStep.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {useFieldArray, useFormContext} from 'react-hook-form';&#10;import {CreateEventFormData} from '@/lib/validators/event';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {&#10;    SessionListItemSeating&#10;} from &quot;@/app/manage/organization/[organization_id]/event/_components/SessionListItemSeating&quot;;&#10;import {OnlineConfigView} from &quot;@/app/manage/organization/[organization_id]/event/_components/OnlineConfigView&quot;;&#10;import {PhysicalConfigView} from &quot;@/app/manage/organization/[organization_id]/event/_components/PhysicalConfigView&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {Checkbox} from &quot;@/components/ui/checkbox&quot;;&#10;import {Label} from &quot;@/components/ui/label&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {ArrowLeft} from &quot;lucide-react&quot;;&#10;&#10;interface SeatingStepProps {&#10;    onConfigModeChange?: (isInConfigMode: boolean) =&gt; void;&#10;}&#10;&#10;// --- Main Seating Step Component ---&#10;export function SeatingStep({ onConfigModeChange }: SeatingStepProps) {&#10;    const { control, formState: { errors }, watch, getValues, setValue } = useFormContext&lt;CreateEventFormData&gt;();&#10;    const [configuringIndex, setConfiguringIndex] = useState&lt;number | null&gt;(null);&#10;    const [applyToAll, setApplyToAll] = useState(false);&#10;&#10;    const { fields } = useFieldArray({&#10;        control,&#10;        name: &quot;sessions&quot;,&#10;    });&#10;&#10;    // Get the session being configured&#10;    const currentSession = configuringIndex !== null ? watch(`sessions.${configuringIndex}`) : null;&#10;&#10;    // Notify parent component when configuration mode changes&#10;    useEffect(() =&gt; {&#10;        if (onConfigModeChange) {&#10;            onConfigModeChange(configuringIndex !== null);&#10;        }&#10;    }, [configuringIndex, onConfigModeChange]);&#10;&#10;    const handleSave = (layoutData: any) =&gt; {&#10;        if (configuringIndex === null) return;&#10;&#10;        setValue(`sessions.${configuringIndex}.layoutData`, layoutData);&#10;&#10;        if (applyToAll) {&#10;            const allSessions = getValues('sessions');&#10;            allSessions.forEach((s, i) =&gt; {&#10;                // Apply only to sessions of the same type (online/physical)&#10;                if (s.isOnline === currentSession?.isOnline) {&#10;                    setValue(`sessions.${i}.layoutData`, layoutData);&#10;                }&#10;            });&#10;            toast.success(`Seating applied to all ${currentSession?.isOnline ? 'online' : 'physical'} sessions.`);&#10;        } else {&#10;            toast.success(`Seating configured for Session ${configuringIndex + 1}.`);&#10;        }&#10;&#10;        setConfiguringIndex(null);&#10;    };&#10;&#10;    // If we're configuring a session, show the full-page configuration view&#10;    if (configuringIndex !== null &amp;&amp; currentSession) {&#10;        return (&#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;Button&#10;                        variant=&quot;ghost&quot;&#10;                        onClick={() =&gt; setConfiguringIndex(null)}&#10;                        className=&quot;flex items-center gap-1&quot;&#10;                    &gt;&#10;                        &lt;ArrowLeft className=&quot;h-4 w-4&quot; /&gt;&#10;                        Back to Sessions&#10;                    &lt;/Button&gt;&#10;                    &lt;h2 className=&quot;text-xl font-semibold&quot;&gt;&#10;                        Configure Seating for Session {configuringIndex + 1}&#10;                    &lt;/h2&gt;&#10;                    &lt;div&gt;&lt;/div&gt; {/* Empty div for flexbox spacing */}&#10;                &lt;/div&gt;&#10;&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;&#10;                            {currentSession.isOnline&#10;                                ? &quot;Online Capacity Configuration&quot;&#10;                                : &quot;Physical Seating Configuration&quot;}&#10;                        &lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;&#10;                            {currentSession.isOnline&#10;                                ? &quot;Set the capacity and ticket tier for your online event.&quot;&#10;                                : &quot;Choose a layout template or create a new one, then assign your tiers.&quot;}&#10;                        &lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                        {currentSession.isOnline ? (&#10;                            &lt;OnlineConfigView onSave={handleSave} /&gt;&#10;                        ) : (&#10;                            &lt;PhysicalConfigView onSave={handleSave} /&gt;&#10;                        )}&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                &lt;div className=&quot;flex items-center justify-between border-t pt-4 mt-8&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;Checkbox&#10;                            id=&quot;apply-to-all-seating&quot;&#10;                            checked={applyToAll}&#10;                            onCheckedChange={(checked) =&gt; setApplyToAll(checked === true)}&#10;                        /&gt;&#10;                        &lt;Label htmlFor=&quot;apply-to-all-seating&quot;&gt;&#10;                            Apply to all {currentSession.isOnline ? 'online' : 'physical'} sessions&#10;                        &lt;/Label&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    // Otherwise show the session list&#10;    return (&#10;        &lt;Card&gt;&#10;            &lt;CardHeader&gt;&#10;                &lt;CardTitle&gt;Seating &amp; Tier Assignment&lt;/CardTitle&gt;&#10;                &lt;CardDescription&gt;&#10;                    Configure the seating layout and assign ticket tiers for each session.&#10;                &lt;/CardDescription&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;                {fields.map((field, index) =&gt; (&#10;                    &lt;SessionListItemSeating&#10;                        key={field.id}&#10;                        field={field}&#10;                        index={index}&#10;                        onConfigure={() =&gt; setConfiguringIndex(index)}&#10;                    /&gt;&#10;                ))}&#10;&#10;                {errors.sessions?.root &amp;&amp; (&#10;                    &lt;p className=&quot;text-sm font-medium text-destructive&quot;&gt;{errors.sessions.root.message}&lt;/p&gt;&#10;                )}&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {useFieldArray, useFormContext} from 'react-hook-form';&#10;import {CreateEventFormData} from '@/lib/validators/event';&#10;import {SessionListItemSeating} from &quot;@/app/manage/organization/[organization_id]/event/_components/SessionListItemSeating&quot;;&#10;import {OnlineConfigView} from &quot;@/app/manage/organization/[organization_id]/event/_components/OnlineConfigView&quot;;&#10;import {PhysicalConfigView} from &quot;@/app/manage/organization/[organization_id]/event/_components/PhysicalConfigView&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {Checkbox} from &quot;@/components/ui/checkbox&quot;;&#10;import {Label} from &quot;@/components/ui/label&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {ArrowLeft} from &quot;lucide-react&quot;;&#10;&#10;interface SeatingStepProps {&#10;    onConfigModeChange?: (isInConfigMode: boolean) =&gt; void;&#10;}&#10;&#10;// --- Main Seating Step Component ---&#10;export function SeatingStep({ onConfigModeChange }: SeatingStepProps) {&#10;    const { control, formState: { errors }, watch, getValues, setValue } = useFormContext&lt;CreateEventFormData&gt;();&#10;    const [configuringIndex, setConfiguringIndex] = useState&lt;number | null&gt;(null);&#10;    const [applyToAll, setApplyToAll] = useState(false);&#10;&#10;    const { fields } = useFieldArray({&#10;        control,&#10;        name: &quot;sessions&quot;,&#10;    });&#10;&#10;    // Get the session being configured&#10;    const currentSession = configuringIndex !== null ? watch(`sessions.${configuringIndex}`) : null;&#10;&#10;    // Notify parent component when configuration mode changes&#10;    useEffect(() =&gt; {&#10;        if (onConfigModeChange) {&#10;            onConfigModeChange(configuringIndex !== null);&#10;        }&#10;    }, [configuringIndex, onConfigModeChange]);&#10;&#10;    const handleSave = (layoutData: any) =&gt; {&#10;        if (configuringIndex === null) return;&#10;&#10;        setValue(`sessions.${configuringIndex}.layoutData`, layoutData);&#10;&#10;        if (applyToAll) {&#10;            const allSessions = getValues('sessions');&#10;            allSessions.forEach((s, i) =&gt; {&#10;                // Apply only to sessions of the same type (online/physical)&#10;                if (s.isOnline === currentSession?.isOnline) {&#10;                    setValue(`sessions.${i}.layoutData`, layoutData);&#10;                }&#10;            });&#10;            toast.success(`Seating applied to all ${currentSession?.isOnline ? 'online' : 'physical'} sessions.`);&#10;        } else {&#10;            toast.success(`Seating configured for Session ${configuringIndex + 1}.`);&#10;        }&#10;&#10;        setConfiguringIndex(null);&#10;    };&#10;&#10;    // If we're configuring a session, show the full-page configuration view&#10;    if (configuringIndex !== null &amp;&amp; currentSession) {&#10;        return (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;Button&#10;                        variant=&quot;ghost&quot;&#10;                        onClick={() =&gt; setConfiguringIndex(null)}&#10;                        className=&quot;flex items-center gap-1&quot;&#10;                    &gt;&#10;                        &lt;ArrowLeft className=&quot;h-4 w-4&quot; /&gt;&#10;                        Back to Sessions&#10;                    &lt;/Button&gt;&#10;                    &lt;h2 className=&quot;text-xl font-semibold&quot;&gt;&#10;                        Configure Seating for Session {configuringIndex + 1}&#10;                    &lt;/h2&gt;&#10;                    &lt;div&gt;&lt;/div&gt; {/* Empty div for flexbox spacing */}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-medium&quot;&gt;&#10;                        {currentSession.isOnline&#10;                            ? &quot;Online Capacity Configuration&quot;&#10;                            : &quot;Physical Seating Configuration&quot;}&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-muted-foreground text-sm&quot;&gt;&#10;                        {currentSession.isOnline&#10;                            ? &quot;Set the capacity and ticket tier for your online event.&quot;&#10;                            : &quot;Choose a layout template or create a new one, then assign your tiers.&quot;}&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div className=&quot;border rounded-md p-6 bg-card&quot;&gt;&#10;                    {currentSession.isOnline ? (&#10;                        &lt;OnlineConfigView onSave={handleSave} /&gt;&#10;                    ) : (&#10;                        &lt;PhysicalConfigView onSave={handleSave} /&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex items-center border-t pt-4 mt-8&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;Checkbox&#10;                            id=&quot;apply-to-all-seating&quot;&#10;                            checked={applyToAll}&#10;                            onCheckedChange={(checked) =&gt; setApplyToAll(checked === true)}&#10;                        /&gt;&#10;                        &lt;Label htmlFor=&quot;apply-to-all-seating&quot;&gt;&#10;                            Apply to all {currentSession.isOnline ? 'online' : 'physical'} sessions&#10;                        &lt;/Label&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    // Otherwise show the session list&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;div&gt;&#10;                &lt;h2 className=&quot;text-xl font-semibold mb-1&quot;&gt;Seating &amp; Tier Assignment&lt;/h2&gt;&#10;                &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                    Configure the seating layout and assign ticket tiers for each session.&#10;                &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;                {fields.map((field, index) =&gt; (&#10;                    &lt;SessionListItemSeating&#10;                        key={field.id}&#10;                        field={field}&#10;                        index={index}&#10;                        onConfigure={() =&gt; setConfiguringIndex(index)}&#10;                    /&gt;&#10;                ))}&#10;&#10;                {errors.sessions?.root &amp;&amp; (&#10;                    &lt;p className=&quot;text-sm font-medium text-destructive&quot;&gt;{errors.sessions.root.message}&lt;/p&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/TierDialog.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/TierDialog.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import { useState } from 'react';&#10;import { z } from 'zod';&#10;import { useForm } from 'react-hook-form';&#10;import { zodResolver } from '@hookform/resolvers/zod';&#10;&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';&#10;import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';&#10;&#10;const tierSchema = z.object({&#10;  name: z.string().min(1, { message: &quot;Tier name is required&quot; }),&#10;  price: z.number().min(0, { message: &quot;Price must be a positive number&quot; }),&#10;  color: z.string().min(1, { message: &quot;Color is required&quot; })&#10;});&#10;&#10;type TierFormValues = z.infer&lt;typeof tierSchema&gt;;&#10;&#10;interface TierDialogProps {&#10;  open: boolean;&#10;  setOpen: (open: boolean) =&gt; void;&#10;  onSave: (tier: { name: string, price: number, color: string }) =&gt; void;&#10;  initialValues?: { name: string, price: number, color: string };&#10;  mode: 'create' | 'edit';&#10;}&#10;&#10;export function TierDialog({ open, setOpen, onSave, initialValues, mode }: TierDialogProps) {&#10;  // Default values when creating a new tier&#10;  const defaultValues: TierFormValues = {&#10;    name: '',&#10;    price: 0,&#10;    color: '#8B5CF6' // Default purple color&#10;  };&#10;  &#10;  const form = useForm&lt;TierFormValues&gt;({&#10;    resolver: zodResolver(tierSchema),&#10;    defaultValues: initialValues || defaultValues&#10;  });&#10;  &#10;  const handleSubmit = (values: TierFormValues) =&gt; {&#10;    onSave({&#10;      name: values.name,&#10;      price: values.price,&#10;      color: values.color&#10;    });&#10;    setOpen(false);&#10;    form.reset();&#10;  };&#10;&#10;  return (&#10;    &lt;Dialog open={open} onOpenChange={setOpen}&gt;&#10;      &lt;DialogContent className=&quot;sm:max-w-[425px]&quot;&gt;&#10;        &lt;DialogHeader&gt;&#10;          &lt;DialogTitle&gt;{mode === 'create' ? 'Create New Tier' : 'Edit Tier'}&lt;/DialogTitle&gt;&#10;        &lt;/DialogHeader&gt;&#10;        &#10;        &lt;Form {...form}&gt;&#10;          &lt;form onSubmit={form.handleSubmit(handleSubmit)} className=&quot;space-y-6 py-4&quot;&gt;&#10;            &lt;FormField&#10;              control={form.control}&#10;              name=&quot;name&quot;&#10;              render={({ field }) =&gt; (&#10;                &lt;FormItem&gt;&#10;                  &lt;FormLabel&gt;Tier Name&lt;/FormLabel&gt;&#10;                  &lt;FormControl&gt;&#10;                    &lt;Input &#10;                      placeholder=&quot;e.g., VIP, Premium, Gold&quot; &#10;                      {...field} &#10;                    /&gt;&#10;                  &lt;/FormControl&gt;&#10;                  &lt;FormMessage /&gt;&#10;                &lt;/FormItem&gt;&#10;              )}&#10;            /&gt;&#10;            &#10;            &lt;FormField&#10;              control={form.control}&#10;              name=&quot;price&quot;&#10;              render={({ field }) =&gt; (&#10;                &lt;FormItem&gt;&#10;                  &lt;FormLabel&gt;Price (USD)&lt;/FormLabel&gt;&#10;                  &lt;FormControl&gt;&#10;                    &lt;Input&#10;                      type=&quot;number&quot;&#10;                      min=&quot;0&quot;&#10;                      step=&quot;0.01&quot;&#10;                      placeholder=&quot;50.00&quot;&#10;                      {...field}&#10;                      onChange={(e) =&gt; field.onChange(parseFloat(e.target.value) || 0)}&#10;                    /&gt;&#10;                  &lt;/FormControl&gt;&#10;                  &lt;FormMessage /&gt;&#10;                &lt;/FormItem&gt;&#10;              )}&#10;            /&gt;&#10;            &#10;            &lt;FormField&#10;              control={form.control}&#10;              name=&quot;color&quot;&#10;              render={({ field }) =&gt; (&#10;                &lt;FormItem&gt;&#10;                  &lt;FormLabel&gt;Theme Color&lt;/FormLabel&gt;&#10;                  &lt;FormControl&gt;&#10;                    &lt;div className=&quot;flex gap-2 items-center&quot;&gt;&#10;                      &lt;Input&#10;                        type=&quot;color&quot;&#10;                        className=&quot;p-1 h-10 w-16 cursor-pointer bg-background&quot;&#10;                        {...field}&#10;                      /&gt;&#10;                      &lt;Input&#10;                        type=&quot;text&quot;&#10;                        placeholder=&quot;#8B5CF6&quot;&#10;                        className=&quot;flex-1 font-mono text-sm&quot;&#10;                        {...field}&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/FormControl&gt;&#10;                  &lt;FormMessage /&gt;&#10;                &lt;/FormItem&gt;&#10;              )}&#10;            /&gt;&#10;            &#10;            &lt;DialogFooter&gt;&#10;              &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; onClick={() =&gt; setOpen(false)}&gt;&#10;                Cancel&#10;              &lt;/Button&gt;&#10;              &lt;Button type=&quot;submit&quot;&gt;{mode === 'create' ? 'Create' : 'Save'}&lt;/Button&gt;&#10;            &lt;/DialogFooter&gt;&#10;          &lt;/form&gt;&#10;        &lt;/Form&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/TierStep.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/TierStep.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useEffect, useRef} from 'react';&#10;import {useFieldArray, useFormContext} from 'react-hook-form';&#10;import {CreateEventFormData} from '@/lib/validators/event';&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;import {PlusCircle, Ticket} from 'lucide-react';&#10;import {TicketCard} from &quot;@/app/manage/organization/[organization_id]/event/_components/TicketCard&quot;;&#10;&#10;export function TiersStep() {&#10;    const {control, formState: {errors}} = useFormContext&lt;CreateEventFormData&gt;();&#10;    const initialRenderRef = useRef(true);&#10;&#10;    const {fields, append, remove} = useFieldArray({&#10;        control,&#10;        name: &quot;tiers&quot;,&#10;    });&#10;&#10;    // Add default &quot;General Admission&quot; tier only on initial render&#10;    useEffect(() =&gt; {&#10;        if (initialRenderRef.current &amp;&amp; fields.length === 0) {&#10;            append({&#10;                id: `default_tier_${Date.now()}`,&#10;                name: 'General Admission',&#10;                price: 0,&#10;                color: '#3B82F6' // Blue color&#10;            });&#10;        }&#10;        initialRenderRef.current = false;&#10;    }, [append, fields.length]);&#10;&#10;    const addNewTier = () =&gt; {&#10;        append({&#10;            id: `temp_tier_${Date.now()}`, // Temporary client ID&#10;            name: '',&#10;            price: 0,&#10;            color: '#8B5CF6' // Purple default color&#10;        });&#10;    };&#10;&#10;    return (&#10;        &lt;Card className=&quot;border-none shadow-sm&quot;&gt;&#10;            &lt;CardHeader&gt;&#10;                &lt;CardTitle className=&quot;text-2xl font-bold&quot;&gt;Tiers &amp; Pricing&lt;/CardTitle&gt;&#10;                &lt;CardDescription className=&quot;text-base&quot;&gt;&#10;                    Create different ticket types for your event. You will assign these to seats in a later step.&#10;                &lt;/CardDescription&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                {fields.length === 0 &amp;&amp; (&#10;                    &lt;div className=&quot;py-8 text-center&quot;&gt;&#10;                        &lt;Ticket className=&quot;mx-auto h-12 w-12 text-muted-foreground mb-4&quot;/&gt;&#10;                        &lt;p className=&quot;text-lg text-muted-foreground&quot;&gt;&#10;                            No tiers added yet. Click &amp;#34;Add Tier&amp;#34; to create your first ticket tier.&#10;                        &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                &lt;div className=&quot;space-y-6&quot;&gt;&#10;                    {fields.map((field, index) =&gt; (&#10;                        &lt;TicketCard&#10;                            key={field.id}&#10;                            name={field.name || ''}&#10;                            price={field.price || 0}&#10;                            color={field.color || '#8B5CF6'}&#10;                            index={index}&#10;                            control={control}&#10;                            onRemove={() =&gt; remove(index)}&#10;                        &gt;&#10;                            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;                                &lt;FormField&#10;                                    control={control}&#10;                                    name={`tiers.${index}.name`}&#10;                                    render={({field}) =&gt; (&#10;                                        &lt;FormItem&gt;&#10;                                            &lt;FormLabel&#10;                                                className=&quot;text-xs font-medium text-muted-foreground uppercase tracking-wide&quot;&gt;&#10;                                                Tier Name&#10;                                            &lt;/FormLabel&gt;&#10;                                            &lt;FormControl&gt;&#10;                                                &lt;Input&#10;                                                    placeholder=&quot;e.g., VIP, Premium, Gold&quot;&#10;                                                    className=&quot;border-2 focus:border-primary/50 bg-background/80&quot;&#10;                                                    {...field}&#10;                                                /&gt;&#10;                                            &lt;/FormControl&gt;&#10;                                            &lt;FormMessage/&gt;&#10;                                        &lt;/FormItem&gt;&#10;                                    )}&#10;                                /&gt;&#10;                                &lt;FormField&#10;                                    control={control}&#10;                                    name={`tiers.${index}.price`}&#10;                                    render={({field}) =&gt; (&#10;                                        &lt;FormItem&gt;&#10;                                            &lt;FormLabel&#10;                                                className=&quot;text-xs font-medium text-muted-foreground uppercase tracking-wide&quot;&gt;&#10;                                                Price (USD)&#10;                                            &lt;/FormLabel&gt;&#10;                                            &lt;FormControl&gt;&#10;                                                &lt;Input&#10;                                                    type=&quot;number&quot;&#10;                                                    min=&quot;0&quot;&#10;                                                    step=&quot;0.01&quot;&#10;                                                    placeholder=&quot;50.00&quot;&#10;                                                    className=&quot;border-2 focus:border-primary/50 bg-background/80&quot;&#10;                                                    {...field}&#10;                                                    onChange={e =&gt; field.onChange(parseFloat(e.target.value) || 0)}&#10;                                                /&gt;&#10;                                            &lt;/FormControl&gt;&#10;                                            &lt;FormMessage/&gt;&#10;                                        &lt;/FormItem&gt;&#10;                                    )}&#10;                                /&gt;&#10;                                &lt;FormField&#10;                                    control={control}&#10;                                    name={`tiers.${index}.color`}&#10;                                    render={({field}) =&gt; (&#10;                                        &lt;FormItem&gt;&#10;                                            &lt;FormLabel&#10;                                                className=&quot;text-xs font-medium text-muted-foreground uppercase tracking-wide&quot;&gt;&#10;                                                Theme Color&#10;                                            &lt;/FormLabel&gt;&#10;                                            &lt;FormControl&gt;&#10;                                                &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                                                    &lt;Input&#10;                                                        type=&quot;color&quot;&#10;                                                        className=&quot;p-1 h-10 w-16 border-2 rounded-lg cursor-pointer bg-background&quot;&#10;                                                        {...field}&#10;                                                    /&gt;&#10;                                                    &lt;Input&#10;                                                        type=&quot;text&quot;&#10;                                                        placeholder=&quot;#3B82F6&quot;&#10;                                                        className=&quot;flex-1 border-2 focus:border-primary/50 bg-background/80 font-mono text-sm&quot;&#10;                                                        {...field}&#10;                                                    /&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/FormControl&gt;&#10;                                            &lt;FormMessage/&gt;&#10;                                        &lt;/FormItem&gt;&#10;                                    )}&#10;                                /&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/TicketCard&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;pt-4&quot;&gt;&#10;                    &lt;Button&#10;                        type=&quot;button&quot;&#10;                        variant=&quot;outline&quot;&#10;                        onClick={addNewTier}&#10;                        className=&quot;w-full md:w-auto border-2 border-dashed border-muted-foreground/30 hover:border-primary/50 hover:bg-primary/5 transition-all duration-200&quot;&#10;                    &gt;&#10;                        &lt;PlusCircle className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;                        Add New Tier&#10;                    &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* This will display the root error for the tiers array (e.g., &quot;You must create at least one tier.&quot;) */}&#10;                {errors.tiers?.root &amp;&amp; (&#10;                    &lt;div className=&quot;p-4 bg-destructive/10 border border-destructive/20 rounded-lg&quot;&gt;&#10;                        &lt;p className=&quot;text-sm font-medium text-destructive&quot;&gt;&#10;                            {errors.tiers.root.message}&#10;                        &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import { useState, useEffect, useRef } from 'react';&#10;import { useFieldArray, useFormContext } from 'react-hook-form';&#10;import { CreateEventFormData } from '@/lib/validators/event';&#10;import { Button } from '@/components/ui/button';&#10;import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';&#10;import { PlusCircle, Ticket, Plus, Edit, Trash2 } from 'lucide-react';&#10;import { TierDialog } from './TierDialog';&#10;import { &#10;  AlertDialog,&#10;  AlertDialogAction,&#10;  AlertDialogCancel,&#10;  AlertDialogContent,&#10;  AlertDialogDescription,&#10;  AlertDialogFooter,&#10;  AlertDialogHeader,&#10;  AlertDialogTitle,&#10;} from '@/components/ui/alert-dialog';&#10;&#10;export function TiersStep() {&#10;  const { control, formState: { errors } } = useFormContext&lt;CreateEventFormData&gt;();&#10;  const initialRenderRef = useRef(true);&#10;  const [dialogOpen, setDialogOpen] = useState(false);&#10;  const [editDialogOpen, setEditDialogOpen] = useState(false);&#10;  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);&#10;  const [editingIndex, setEditingIndex] = useState&lt;number | null&gt;(null);&#10;  const [deletingIndex, setDeletingIndex] = useState&lt;number | null&gt;(null);&#10;&#10;  const { fields, append, update, remove } = useFieldArray({&#10;    control,&#10;    name: &quot;tiers&quot;,&#10;  });&#10;&#10;  // Add default &quot;General Admission&quot; tier only on initial render&#10;  useEffect(() =&gt; {&#10;    if (initialRenderRef.current &amp;&amp; fields.length === 0) {&#10;      append({&#10;        id: `default_tier_${Date.now()}`,&#10;        name: 'General Admission',&#10;        price: 0,&#10;        color: '#3B82F6' // Blue color&#10;      });&#10;    }&#10;    initialRenderRef.current = false;&#10;  }, [append, fields.length]);&#10;&#10;  const handleCreateTier = (tier: { name: string, price: number, color: string }) =&gt; {&#10;    append({&#10;      id: `temp_tier_${Date.now()}`, // Temporary client ID&#10;      name: tier.name,&#10;      price: tier.price,&#10;      color: tier.color&#10;    });&#10;  };&#10;&#10;  const handleEditTier = (tier: { name: string, price: number, color: string }) =&gt; {&#10;    if (editingIndex !== null) {&#10;      update(editingIndex, {&#10;        ...fields[editingIndex],&#10;        name: tier.name,&#10;        price: tier.price,&#10;        color: tier.color&#10;      });&#10;      setEditingIndex(null);&#10;    }&#10;  };&#10;&#10;  const openEditDialog = (index: number) =&gt; {&#10;    setEditingIndex(index);&#10;    setEditDialogOpen(true);&#10;  };&#10;&#10;  const openDeleteDialog = (index: number) =&gt; {&#10;    setDeletingIndex(index);&#10;    setDeleteDialogOpen(true);&#10;  };&#10;&#10;  const handleDeleteTier = () =&gt; {&#10;    if (deletingIndex !== null) {&#10;      remove(deletingIndex);&#10;      setDeletingIndex(null);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;Card className=&quot;border-none shadow-sm&quot;&gt;&#10;      &lt;CardHeader&gt;&#10;        &lt;CardTitle className=&quot;text-2xl font-bold&quot;&gt;Tiers &amp; Pricing&lt;/CardTitle&gt;&#10;        &lt;CardDescription className=&quot;text-base&quot;&gt;&#10;          Create different ticket types for your event. You will assign these to seats in a later step.&#10;        &lt;/CardDescription&gt;&#10;      &lt;/CardHeader&gt;&#10;      &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;        {fields.length === 0 ? (&#10;          &lt;div className=&quot;py-8 text-center&quot;&gt;&#10;            &lt;Ticket className=&quot;mx-auto h-12 w-12 text-muted-foreground mb-4&quot;/&gt;&#10;            &lt;p className=&quot;text-lg text-muted-foreground&quot;&gt;&#10;              No tiers added yet. Click &quot;Add Tier&quot; to create your first ticket tier.&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3&quot;&gt;&#10;            {fields.map((field, index) =&gt; (&#10;              &lt;Card key={field.id} className=&quot;overflow-hidden flex flex-col&quot;&gt;&#10;                &lt;div &#10;                  className=&quot;h-2&quot;&#10;                  style={{ backgroundColor: field.color || '#6b7280' }}&#10;                /&gt;&#10;                &lt;CardContent className=&quot;p-6 flex-1&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-semibold line-clamp-1&quot;&gt;{field.name}&lt;/h3&gt;&#10;                    &lt;div className=&quot;flex space-x-1&quot;&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;sm&quot; &#10;                        className=&quot;h-8 w-8 p-0&quot;&#10;                        onClick={() =&gt; openEditDialog(index)}&#10;                      &gt;&#10;                        &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;span className=&quot;sr-only&quot;&gt;Edit&lt;/span&gt;&#10;                      &lt;/Button&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;sm&quot; &#10;                        className=&quot;h-8 w-8 p-0 text-destructive hover:text-destructive&quot;&#10;                        onClick={() =&gt; openDeleteDialog(index)}&#10;                        disabled={fields.length &lt;= 1} // Prevent deleting the last tier&#10;                      &gt;&#10;                        &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;span className=&quot;sr-only&quot;&gt;Delete&lt;/span&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-sm text-muted-foreground mb-4&quot;&gt;&#10;                    {field.color &amp;&amp; (&#10;                      &lt;div className=&quot;flex items-center gap-2 mb-1&quot;&gt;&#10;                        &lt;div &#10;                          className=&quot;h-3 w-3 rounded-full&quot; &#10;                          style={{ backgroundColor: field.color }} &#10;                        /&gt;&#10;                        &lt;span className=&quot;font-mono text-xs&quot;&gt;{field.color}&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;mt-4&quot;&gt;&#10;                    &lt;span className=&quot;text-2xl font-bold&quot;&gt;${field.price.toFixed(2)}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/CardContent&gt;&#10;              &lt;/Card&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        &lt;div className=&quot;pt-4&quot;&gt;&#10;          &lt;Button&#10;            type=&quot;button&quot;&#10;            variant=&quot;outline&quot;&#10;            onClick={() =&gt; setDialogOpen(true)}&#10;            className=&quot;w-full md:w-auto border-2 border-dashed border-muted-foreground/30 hover:border-primary/50 hover:bg-primary/5 transition-all duration-200&quot;&#10;          &gt;&#10;            &lt;PlusCircle className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;            Add New Tier&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* This will display the root error for the tiers array */}&#10;        {errors.tiers?.root &amp;&amp; (&#10;          &lt;div className=&quot;p-4 bg-destructive/10 border border-destructive/20 rounded-lg&quot;&gt;&#10;            &lt;p className=&quot;text-sm font-medium text-destructive&quot;&gt;&#10;              {errors.tiers.root.message}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/CardContent&gt;&#10;&#10;      {/* Create Tier Dialog */}&#10;      &lt;TierDialog&#10;        open={dialogOpen}&#10;        setOpen={setDialogOpen}&#10;        onSave={handleCreateTier}&#10;        mode=&quot;create&quot;&#10;      /&gt;&#10;&#10;      {/* Edit Tier Dialog */}&#10;      {editingIndex !== null &amp;&amp; (&#10;        &lt;TierDialog&#10;          open={editDialogOpen}&#10;          setOpen={setEditDialogOpen}&#10;          onSave={handleEditTier}&#10;          initialValues={{&#10;            name: fields[editingIndex].name,&#10;            price: fields[editingIndex].price,&#10;            color: fields[editingIndex].color || '#8B5CF6'&#10;          }}&#10;          mode=&quot;edit&quot;&#10;        /&gt;&#10;      )}&#10;&#10;      {/* Delete Confirmation Dialog */}&#10;      &lt;AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}&gt;&#10;        &lt;AlertDialogContent&gt;&#10;          &lt;AlertDialogHeader&gt;&#10;            &lt;AlertDialogTitle&gt;Are you sure?&lt;/AlertDialogTitle&gt;&#10;            &lt;AlertDialogDescription&gt;&#10;              This will permanently delete this ticket tier.&#10;            &lt;/AlertDialogDescription&gt;&#10;          &lt;/AlertDialogHeader&gt;&#10;          &lt;AlertDialogFooter&gt;&#10;            &lt;AlertDialogCancel&gt;Cancel&lt;/AlertDialogCancel&gt;&#10;            &lt;AlertDialogAction &#10;              onClick={handleDeleteTier} &#10;              className=&quot;bg-destructive text-destructive-foreground hover:bg-destructive/90&quot;&#10;            &gt;&#10;              Delete&#10;            &lt;/AlertDialogAction&gt;&#10;          &lt;/AlertDialogFooter&gt;&#10;        &lt;/AlertDialogContent&gt;&#10;      &lt;/AlertDialog&gt;&#10;    &lt;/Card&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/coreDetailsStep.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/coreDetailsStep.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useForm, FormProvider} from 'react-hook-form';&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {useOrganization} from '@/providers/OrganizationProvider';&#10;import {useLimits} from '@/providers/LimitProvider';&#10;import {CategoryResponse} from '@/types/category';&#10;import {getAllCategories} from '@/lib/actions/categoryActions';&#10;import {coreDetailsSchema, CoreDetailsData} from '@/lib/validators/event';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Textarea} from '@/components/ui/textarea';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;import {&#10;    Select,&#10;    SelectContent,&#10;    SelectItem,&#10;    SelectTrigger,&#10;    SelectValue,&#10;    SelectGroup,&#10;    SelectLabel&#10;} from '@/components/ui/select';&#10;import {Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious} from &quot;@/components/ui/carousel&quot;;&#10;import Image from 'next/image';&#10;import {ImageIcon, X, PlusCircle, Upload} from 'lucide-react';&#10;import {toast} from 'sonner';&#10;import Autoplay from 'embla-carousel-autoplay';&#10;&#10;// --- Step 1: Core Details Component ---&#10;export function CoreDetailsStep({onNextAction}: { onNextAction: () =&gt; void }) {&#10;    const {organization} = useOrganization();&#10;    const {myLimits} = useLimits();&#10;    const [categories, setCategories] = useState&lt;CategoryResponse[]&gt;([]);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    const maxPhotos = myLimits?.eventLimits.maxCoverPhotos || 1;&#10;&#10;    const form = useForm&lt;CoreDetailsData&gt;({&#10;        resolver: zodResolver(coreDetailsSchema),&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            categoryId: '', // Ensure categoryId is present&#10;            isOnline: false,&#10;        },&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        getAllCategories().then(setCategories);&#10;    }, [organization]);&#10;&#10;    const handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        if (e.target.files) {&#10;            const files = Array.from(e.target.files);&#10;            if ((coverFiles.length + files.length) &gt; maxPhotos) {&#10;                toast.error(`You can only upload a maximum of ${maxPhotos} photos.`);&#10;                return;&#10;            }&#10;            setCoverFiles(prev =&gt; [...prev, ...files]);&#10;        }&#10;    };&#10;&#10;    const removeImage = (index: number) =&gt; {&#10;        setCoverFiles(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    };&#10;&#10;    function onSubmit(data: CoreDetailsData) {&#10;        console.log(&quot;Step 1 Data:&quot;, data);&#10;        console.log(&quot;Cover Files:&quot;, coverFiles);&#10;        onNextAction();&#10;    }&#10;&#10;    return (&#10;        &lt;FormProvider {...form}&gt;&#10;            &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt;&#10;                {/* Hero Cover Photos Section */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Cover Photos&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;This is the first thing people will see. Upload up&#10;                            to {maxPhotos} images.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                        {coverFiles.length &gt; 0 ? (&#10;                            &lt;Carousel plugins={[Autoplay({delay: 4000, stopOnInteraction: false})]}&gt;&#10;                                &lt;CarouselContent&gt;&#10;                                    {coverFiles.map((file, index) =&gt; (&#10;                                        &lt;CarouselItem key={index} className=&quot;relative&quot;&gt;&#10;                                            &lt;div className=&quot;aspect-[21/9] w-full relative&quot;&gt;&#10;                                                &lt;Image src={URL.createObjectURL(file)} alt={`Cover photo ${index + 1}`}&#10;                                                       fill className=&quot;object-cover rounded-lg&quot;/&gt;&#10;                                                &lt;Button type=&quot;button&quot; variant=&quot;destructive&quot; size=&quot;icon&quot;&#10;                                                        className=&quot;absolute top-4 right-4 h-8 w-8 z-10&quot;&#10;                                                        onClick={() =&gt; removeImage(index)}&gt;&lt;X&#10;                                                    className=&quot;h-4 w-4&quot;/&gt;&lt;/Button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/CarouselItem&gt;&#10;                                    ))}&#10;                                &lt;/CarouselContent&gt;&#10;                                &lt;CarouselPrevious type=&quot;button&quot;&#10;                                                  className=&quot;absolute left-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                                &lt;CarouselNext type=&quot;button&quot;&#10;                                              className=&quot;absolute right-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                            &lt;/Carousel&gt;&#10;                        ) : (&#10;                            &lt;div&#10;                                className=&quot;flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-12 text-center aspect-[21/9] w-full&quot;&gt;&#10;                                &lt;ImageIcon className=&quot;h-16 w-16 text-muted-foreground&quot;/&gt;&#10;                                &lt;p className=&quot;mt-4 text-lg font-medium&quot;&gt;Add cover photos for your event&lt;/p&gt;&#10;                                &lt;Button type=&quot;button&quot; className=&quot;mt-4&quot;&#10;                                        onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;Upload className=&quot;mr-2 h-4 w-4&quot;/&gt;Upload&#10;                                    Images&lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                        &lt;div className=&quot;mt-4 flex justify-center items-center gap-4&quot;&gt;&#10;                            {coverFiles.length &gt; 0 &amp;&amp; (&lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&#10;                                                               onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;PlusCircle&#10;                                className=&quot;mr-2 h-4 w-4&quot;/&gt;Add More&lt;/Button&gt;)}&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{coverFiles.length} of {maxPhotos} photos&#10;                                selected.&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;Input id=&quot;picture&quot; type=&quot;file&quot; multiple accept=&quot;image/*&quot; onChange={handleFileChange}&#10;                               className=&quot;hidden&quot; ref={fileInputRef}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                {/* Event Details Card with Category dropdown */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Event Details&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;Provide the core information about your event.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                        &lt;FormField control={form.control} name=&quot;title&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Event Title&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                placeholder=&quot;e.g., Annual Tech Conference 2025&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;&#10;                        {/* Category Selector as dropdown */}&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;categoryId&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Category&lt;/FormLabel&gt;&#10;                                    &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#10;                                        &lt;FormControl&gt;&#10;                                            &lt;SelectTrigger&gt;&#10;                                                &lt;SelectValue placeholder=&quot;Select a category for your event&quot;/&gt;&#10;                                            &lt;/SelectTrigger&gt;&#10;                                        &lt;/FormControl&gt;&#10;                                        &lt;SelectContent className=&quot;max-h-100&quot;&gt;&#10;                                            {categories.map((parentCat) =&gt; (&#10;                                                &lt;SelectGroup key={parentCat.id}&gt;&#10;                                                    &lt;SelectLabel&gt;{parentCat.name}&lt;/SelectLabel&gt;&#10;                                                    {parentCat.subCategories.map((subCat) =&gt; (&#10;                                                        &lt;SelectItem key={subCat.id} value={subCat.id}&gt;&#10;                                                            {subCat.name}&#10;                                                        &lt;/SelectItem&gt;&#10;                                                    ))}&#10;                                                &lt;/SelectGroup&gt;&#10;                                            ))}&#10;                                        &lt;/SelectContent&gt;&#10;                                    &lt;/Select&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;FormField control={form.control} name=&quot;description&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Short Description&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;A brief summary of your event.&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                        &lt;FormField control={form.control} name=&quot;overview&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Overview&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;Provide more details like schedule, speakers, etc.&quot;&#10;                                className=&quot;min-h-32&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;                &lt;div className=&quot;flex justify-end mt-8&quot;&gt;&#10;                    &lt;Button type=&quot;submit&quot;&gt;Next: Tiers &amp; Pricing&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/form&gt;&#10;        &lt;/FormProvider&gt;&#10;    )&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useForm, FormProvider} from 'react-hook-form';&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {useOrganization} from '@/providers/OrganizationProvider';&#10;import {useLimits} from '@/providers/LimitProvider';&#10;import {CategoryResponse} from '@/types/category';&#10;import {getAllCategories} from '@/lib/actions/categoryActions';&#10;import {coreDetailsSchema, CoreDetailsData} from '@/lib/validators/event';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Textarea} from '@/components/ui/textarea';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;import {&#10;    Select,&#10;    SelectContent,&#10;    SelectItem,&#10;    SelectTrigger,&#10;    SelectValue,&#10;    SelectGroup,&#10;    SelectLabel&#10;} from '@/components/ui/select';&#10;import {Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious} from &quot;@/components/ui/carousel&quot;;&#10;import Image from 'next/image';&#10;import {ImageIcon, X, PlusCircle, Upload} from 'lucide-react';&#10;import {toast} from 'sonner';&#10;import Autoplay from 'embla-carousel-autoplay';&#10;&#10;// Updated props interface to match the required signature&#10;interface CoreDetailsStepProps {&#10;    coverFiles: File[];&#10;    setCoverFilesAction: React.Dispatch&lt;React.SetStateAction&lt;File[]&gt;&gt;;&#10;    onNextAction?: () =&gt; void;&#10;}&#10;&#10;// --- Step 1: Core Details Component ---&#10;export function CoreDetailsStep({ coverFiles, setCoverFilesAction, onNextAction }: CoreDetailsStepProps) {&#10;    const {organization} = useOrganization();&#10;    const {myLimits} = useLimits();&#10;    const [categories, setCategories] = useState&lt;CategoryResponse[]&gt;([]);&#10;    const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    const maxPhotos = myLimits?.eventLimits.maxCoverPhotos || 1;&#10;&#10;    const form = useForm&lt;CoreDetailsData&gt;({&#10;        resolver: zodResolver(coreDetailsSchema),&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            categoryId: '', // Ensure categoryId is present&#10;            isOnline: false,&#10;        },&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        getAllCategories().then(setCategories);&#10;    }, [organization]);&#10;&#10;    const handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        if (e.target.files) {&#10;            const files = Array.from(e.target.files);&#10;            if ((coverFiles.length + files.length) &gt; maxPhotos) {&#10;                toast.error(`You can only upload a maximum of ${maxPhotos} photos.`);&#10;                return;&#10;            }&#10;            setCoverFilesAction(prev =&gt; [...prev, ...files]);&#10;        }&#10;    };&#10;&#10;    const removeImage = (index: number) =&gt; {&#10;        setCoverFilesAction(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    };&#10;&#10;    function onSubmit(data: CoreDetailsData) {&#10;        console.log(&quot;Step 1 Data:&quot;, data);&#10;        console.log(&quot;Cover Files:&quot;, coverFiles);&#10;        if (onNextAction) onNextAction();&#10;    }&#10;&#10;    return (&#10;        &lt;FormProvider {...form}&gt;&#10;            &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt;&#10;                {/* Hero Cover Photos Section */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Cover Photos&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;This is the first thing people will see. Upload up&#10;                            to {maxPhotos} images.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                        {coverFiles.length &gt; 0 ? (&#10;                            &lt;Carousel plugins={[Autoplay({delay: 4000, stopOnInteraction: false})]}&gt;&#10;                                &lt;CarouselContent&gt;&#10;                                    {coverFiles.map((file, index) =&gt; (&#10;                                        &lt;CarouselItem key={index} className=&quot;relative&quot;&gt;&#10;                                            &lt;div className=&quot;aspect-[21/9] w-full relative&quot;&gt;&#10;                                                &lt;Image src={URL.createObjectURL(file)} alt={`Cover photo ${index + 1}`}&#10;                                                       fill className=&quot;object-cover rounded-lg&quot;/&gt;&#10;                                                &lt;Button type=&quot;button&quot; variant=&quot;destructive&quot; size=&quot;icon&quot;&#10;                                                        className=&quot;absolute top-4 right-4 h-8 w-8 z-10&quot;&#10;                                                        onClick={() =&gt; removeImage(index)}&gt;&lt;X&#10;                                                    className=&quot;h-4 w-4&quot;/&gt;&lt;/Button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/CarouselItem&gt;&#10;                                    ))}&#10;                                &lt;/CarouselContent&gt;&#10;                                &lt;CarouselPrevious type=&quot;button&quot;&#10;                                                  className=&quot;absolute left-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                                &lt;CarouselNext type=&quot;button&quot;&#10;                                              className=&quot;absolute right-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                            &lt;/Carousel&gt;&#10;                        ) : (&#10;                            &lt;div&#10;                                className=&quot;flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-12 text-center aspect-[21/9] w-full&quot;&gt;&#10;                                &lt;ImageIcon className=&quot;h-16 w-16 text-muted-foreground&quot;/&gt;&#10;                                &lt;p className=&quot;mt-4 text-lg font-medium&quot;&gt;Add cover photos for your event&lt;/p&gt;&#10;                                &lt;Button type=&quot;button&quot; className=&quot;mt-4&quot;&#10;                                        onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;Upload className=&quot;mr-2 h-4 w-4&quot;/&gt;Upload&#10;                                    Images&lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                        &lt;div className=&quot;mt-4 flex justify-center items-center gap-4&quot;&gt;&#10;                            {coverFiles.length &gt; 0 &amp;&amp; (&lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&#10;                                                               onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;PlusCircle&#10;                                className=&quot;mr-2 h-4 w-4&quot;/&gt;Add More&lt;/Button&gt;)}&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{coverFiles.length} of {maxPhotos} photos&#10;                                selected.&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;Input id=&quot;picture&quot; type=&quot;file&quot; multiple accept=&quot;image/*&quot; onChange={handleFileChange}&#10;                               className=&quot;hidden&quot; ref={fileInputRef}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                {/* Event Details Card with Category dropdown */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Event Details&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;Provide the core information about your event.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                        &lt;FormField control={form.control} name=&quot;title&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Event Title&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                placeholder=&quot;e.g., Annual Tech Conference 2025&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;&#10;                        {/* Category Selector as dropdown */}&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;categoryId&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Category&lt;/FormLabel&gt;&#10;                                    &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#10;                                        &lt;FormControl&gt;&#10;                                            &lt;SelectTrigger&gt;&#10;                                                &lt;SelectValue placeholder=&quot;Select a category for your event&quot;/&gt;&#10;                                            &lt;/SelectTrigger&gt;&#10;                                        &lt;/FormControl&gt;&#10;                                        &lt;SelectContent className=&quot;max-h-100&quot;&gt;&#10;                                            {categories.map((parentCat) =&gt; (&#10;                                                &lt;SelectGroup key={parentCat.id}&gt;&#10;                                                    &lt;SelectLabel&gt;{parentCat.name}&lt;/SelectLabel&gt;&#10;                                                    {parentCat.subCategories.map((subCat) =&gt; (&#10;                                                        &lt;SelectItem key={subCat.id} value={subCat.id}&gt;&#10;                                                            {subCat.name}&#10;                                                        &lt;/SelectItem&gt;&#10;                                                    ))}&#10;                                                &lt;/SelectGroup&gt;&#10;                                            ))}&#10;                                        &lt;/SelectContent&gt;&#10;                                    &lt;/Select&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;FormField control={form.control} name=&quot;description&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Short Description&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;A brief summary of your event.&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                        &lt;FormField control={form.control} name=&quot;overview&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Overview&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;Provide more details like schedule, speakers, etc.&quot;&#10;                                className=&quot;min-h-32&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;                &lt;div className=&quot;flex justify-end mt-8&quot;&gt;&#10;                    &lt;Button type=&quot;submit&quot;&gt;Next: Tiers &amp; Pricing&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/form&gt;&#10;        &lt;/FormProvider&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/review/ReviewSessions.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/review/ReviewSessions.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState} from 'react';&#10;import {format, parseISO} from 'date-fns';&#10;import {Calendar, MapPin, Tag, Users, Clock, Armchair, LinkIcon, Info} from 'lucide-react';&#10;import {&#10;    Accordion,&#10;    AccordionContent,&#10;    AccordionItem,&#10;    AccordionTrigger,&#10;} from &quot;@/components/ui/accordion&quot;;&#10;import {Badge} from '@/components/ui/badge';&#10;import {&#10;    SessionFormData,&#10;    SalesStartRuleType,&#10;    SessionType,&#10;    Block,&#10;    Seat,&#10;    Row,&#10;    Tier&#10;} from '@/lib/validators/event';&#10;import {&#10;    Popover,&#10;    PopoverContent,&#10;    PopoverTrigger&#10;} from '@/components/ui/popover';&#10;import {Button} from '@/components/ui/button';&#10;import {GoogleMap, useJsApiLoader, Marker} from '@react-google-maps/api';&#10;&#10;interface ReviewSessionsProps {&#10;    sessions: SessionFormData[];&#10;    tiers: Tier[];&#10;}&#10;&#10;export const ReviewSessions: React.FC&lt;ReviewSessionsProps&gt; = ({sessions, tiers}) =&gt; {&#10;    if (sessions.length === 0) return null;&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;h2 className=&quot;text-2xl font-semibold&quot;&gt;Schedule&lt;/h2&gt;&#10;            &lt;Accordion type=&quot;single&quot; collapsible className=&quot;w-full&quot;&gt;&#10;                {sessions.map((session, index) =&gt; (&#10;                    &lt;SessionAccordionItem&#10;                        key={`session-${index}`}&#10;                        session={session}&#10;                        index={index}&#10;                        tiers={tiers}&#10;                    /&gt;&#10;                ))}&#10;            &lt;/Accordion&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;interface SessionAccordionItemProps {&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;    index: number;&#10;}&#10;&#10;const SessionAccordionItem: React.FC&lt;SessionAccordionItemProps&gt; = ({session, index, tiers}) =&gt; {&#10;    const startDate = parseISO(session.startTime);&#10;    const endDate = parseISO(session.endTime);&#10;    const isOnline = session.sessionType === SessionType.ONLINE;&#10;    const {layoutData} = session;&#10;&#10;    return (&#10;        &lt;AccordionItem&#10;            value={`item-${index}`}&#10;            className=&quot;border rounded-lg mb-4 overflow-hidden&quot;&#10;        &gt;&#10;            &lt;AccordionTrigger className=&quot;px-4 py-3 hover:no-underline hover:bg-muted/40&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-3 text-left&quot;&gt;&#10;                    &lt;Calendar className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                    &lt;div&gt;&#10;                        &lt;div className=&quot;font-medium&quot;&gt;&#10;                            {format(startDate, &quot;EEEE, MMMM d, yyyy&quot;)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                            {format(startDate, &quot;h:mm a&quot;)} - {format(endDate, &quot;h:mm a&quot;)}&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Badge variant={isOnline ? &quot;secondary&quot; : &quot;default&quot;} className=&quot;ml-4&quot;&gt;&#10;                        {isOnline ? 'Online' : 'Physical'}&#10;                    &lt;/Badge&gt;&#10;                &lt;/div&gt;&#10;            &lt;/AccordionTrigger&gt;&#10;            &lt;AccordionContent className=&quot;px-4 pt-2 pb-4&quot;&gt;&#10;                &lt;div className=&quot;grid grid-cols-1 gap-6&quot;&gt;&#10;                    &lt;SessionDetails session={session}/&gt;&#10;                    {layoutData &amp;&amp; layoutData.layout.blocks.length &gt; 0 &amp;&amp; (&#10;                        &lt;SeatingInformation&#10;                            isOnline={isOnline}&#10;                            session={session}&#10;                            tiers={tiers}&#10;                        /&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/AccordionContent&gt;&#10;        &lt;/AccordionItem&gt;&#10;    );&#10;};&#10;&#10;interface SessionDetailsProps {&#10;    session: SessionFormData;&#10;}&#10;&#10;const SessionDetails: React.FC&lt;SessionDetailsProps&gt; = ({session}) =&gt; {&#10;    const startDate = parseISO(session.startTime);&#10;    const endDate = parseISO(session.endTime);&#10;    const isOnline = session.sessionType === SessionType.ONLINE;&#10;    const {venueDetails} = session;&#10;&#10;    // Calculate event duration&#10;    const getDuration = (): string =&gt; {&#10;        try {&#10;            const durationMs = endDate.getTime() - startDate.getTime();&#10;            const hours = Math.floor(durationMs / (1000 * 60 * 60));&#10;            const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));&#10;&#10;            return hours &gt; 0&#10;                ? `${hours} hour${hours !== 1 ? 's' : ''}${minutes &gt; 0 ? ` ${minutes} min` : ''}`&#10;                : `${minutes} minutes`;&#10;        } catch (e) {&#10;            console.error(&quot;Error calculating duration:&quot;, e);&#10;            return &quot;Duration unavailable&quot;;&#10;        }&#10;    };&#10;&#10;    // Sales rule description&#10;    const getSalesRuleDescription = (): string =&gt; {&#10;        switch (session.salesStartRuleType) {&#10;            case SalesStartRuleType.IMMEDIATE:&#10;                return &quot;On sale immediately&quot;;&#10;            case SalesStartRuleType.FIXED:&#10;                return session.salesStartFixedDatetime&#10;                    ? `Sales start on ${format(parseISO(session.salesStartFixedDatetime), 'MMM d, yyyy h:mm a')}`&#10;                    : &quot;Fixed date not set&quot;;&#10;            case SalesStartRuleType.ROLLING:&#10;                if (session.salesStartHoursBefore === undefined || session.salesStartHoursBefore === null || session.salesStartHoursBefore &lt; 0) {&#10;                    return &quot;Rolling hours not set or invalid&quot;;&#10;                } else if (session.salesStartHoursBefore &lt; 24) {&#10;                    return `Sales start ${session.salesStartHoursBefore} hour(s) before the session`;&#10;                } else {&#10;                    const days = Math.floor(session.salesStartHoursBefore / 24);&#10;                    const hours = session.salesStartHoursBefore % 24;&#10;                    return `Sales start ${days} day(s)${hours &gt; 0 ? ` and ${hours} hour(s)` : ''} before the session`;&#10;                }&#10;            default:&#10;                return &quot;Not set&quot;;&#10;        }&#10;    };&#10;&#10;    // For physical events with coordinates, show a Google Map&#10;    const {isLoaded} = useJsApiLoader({&#10;        id: 'google-map-script',&#10;        googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || '',&#10;    });&#10;&#10;    const mapCenter = venueDetails?.latitude &amp;&amp; venueDetails?.longitude&#10;        ? {lat: venueDetails.latitude, lng: venueDetails.longitude}&#10;        : {lat: 6.9271, lng: 79.8612}; // Default: Colombo, Sri Lanka&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;Clock className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                &lt;span&gt;Duration: {getDuration()}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-start gap-2&quot;&gt;&#10;                {isOnline ? (&#10;                    &lt;&gt;&#10;                        &lt;LinkIcon className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                        &lt;div&gt;&#10;                            &lt;div&gt;Online Event&lt;/div&gt;&#10;                            {venueDetails?.onlineLink ? (&#10;                                &lt;div className=&quot;text-sm text-muted-foreground break-all&quot;&gt;&#10;                                    {venueDetails.onlineLink}&#10;                                &lt;/div&gt;&#10;                            ) : (&#10;                                &lt;div className=&quot;text-sm text-destructive&quot;&gt;&#10;                                    Link not provided&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                ) : (&#10;                    &lt;&gt;&#10;                        &lt;MapPin className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                        &lt;div&gt;&#10;                            {venueDetails?.name ? (&#10;                                &lt;&gt;&#10;                                    &lt;div&gt;{venueDetails.name}&lt;/div&gt;&#10;                                    {venueDetails.address &amp;&amp; (&#10;                                        &lt;div className=&quot;text-sm text-muted-foreground mb-2&quot;&gt;&#10;                                            {venueDetails.address}&#10;                                        &lt;/div&gt;&#10;                                    )}&#10;&#10;                                    {/* Google Map for physical locations */}&#10;                                    {venueDetails.latitude &amp;&amp; venueDetails.longitude &amp;&amp; (&#10;                                        &lt;div className=&quot;h-[200px] w-full rounded-md overflow-hidden border mt-2&quot;&gt;&#10;                                            {isLoaded ? (&#10;                                                &lt;GoogleMap&#10;                                                    mapContainerStyle={{&#10;                                                        width: '100%',&#10;                                                        height: '100%',&#10;                                                    }}&#10;                                                    center={mapCenter}&#10;                                                    zoom={15}&#10;                                                &gt;&#10;                                                    &lt;Marker position={mapCenter}/&gt;&#10;                                                &lt;/GoogleMap&gt;&#10;                                            ) : (&#10;                                                &lt;div&#10;                                                    className=&quot;h-full w-full bg-muted flex items-center justify-center&quot;&gt;&#10;                                                    &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Loading map...&lt;/p&gt;&#10;                                                &lt;/div&gt;&#10;                                            )}&#10;                                        &lt;/div&gt;&#10;                                    )}&#10;                                &lt;/&gt;&#10;                            ) : (&#10;                                &lt;div className=&quot;text-destructive&quot;&gt;&#10;                                    Venue not specified&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;Tag className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                &lt;span&gt;{getSalesRuleDescription()}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;interface SeatingInformationProps {&#10;    isOnline: boolean;&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;}&#10;&#10;const SeatingInformation: React.FC&lt;SeatingInformationProps&gt; = ({isOnline, session, tiers}) =&gt; {&#10;    const {layoutData} = session;&#10;&#10;    // Function to count seats by tier&#10;    const getSeatCountByTier = () =&gt; {&#10;        const tierCounts: Record&lt;string, number&gt; = {};&#10;&#10;        layoutData.layout.blocks.forEach(block =&gt; {&#10;            if (block.rows) {&#10;                // For seated blocks with rows&#10;                block.rows.forEach(row =&gt; {&#10;                    row.seats.forEach(seat =&gt; {&#10;                        if (seat.status !== 'RESERVED') {&#10;                            const tierId = seat.tierId || 'unassigned';&#10;                            tierCounts[tierId] = (tierCounts[tierId] || 0) + 1;&#10;                        }&#10;                    });&#10;                });&#10;            } else if (block.seats) {&#10;                // For blocks with direct seats array&#10;                block.seats.forEach(seat =&gt; {&#10;                    if (seat.status !== 'RESERVED') {&#10;                        const tierId = seat.tierId || 'unassigned';&#10;                        tierCounts[tierId] = (tierCounts[tierId] || 0) + 1;&#10;                    }&#10;                });&#10;            } else if (block.capacity &amp;&amp; block.type === 'standing_capacity') {&#10;                // For standing blocks&#10;                // Check if there's a tier assigned to this block&#10;                // Fix the TypeScript error by explicitly typing the block.seats access&#10;                const blockSeats = block.seats as Seat[] | undefined;&#10;                const tierId = blockSeats?.[0]?.tierId || 'unassigned';&#10;                tierCounts[tierId] = (tierCounts[tierId] || 0) + (block.capacity || 0);&#10;            }&#10;        });&#10;&#10;        return tierCounts;&#10;    };&#10;&#10;    const seatCountByTier = getSeatCountByTier();&#10;    const totalSeats = Object.values(seatCountByTier).reduce((sum, count) =&gt; sum + count, 0);&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;div className=&quot;bg-muted/30 p-4 rounded-lg&quot;&gt;&#10;                &lt;div className=&quot;flex items-start gap-2 mb-2&quot;&gt;&#10;                    {isOnline ? (&#10;                        &lt;Users className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                    ) : (&#10;                        &lt;Armchair className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                    )}&#10;                    &lt;span className=&quot;font-medium&quot;&gt;Seating Information&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-sm ml-6&quot;&gt;&#10;                    &lt;p&gt;Total capacity: {totalSeats}&lt;/p&gt;&#10;                    {Object.entries(seatCountByTier).map(([tierId, count]) =&gt; (&#10;                        &lt;div key={tierId} className=&quot;flex items-center gap-2 mt-1&quot;&gt;&#10;                            {tierId !== 'unassigned' &amp;&amp; (&#10;                                &lt;div&#10;                                    className=&quot;h-3 w-3 rounded-full&quot;&#10;                                    style={{&#10;                                        backgroundColor: getTierColor(tierId, session, tiers)&#10;                                    }}&#10;                                /&gt;&#10;                            )}&#10;                            &lt;span&gt;&#10;                                {getTierName(tierId, session, tiers)}: {count} {count === 1 ? 'seat' : 'seats'}&#10;                            &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {!isOnline &amp;&amp; layoutData &amp;&amp; (&#10;                &lt;SeatingLayout session={session} tiers={tiers}/&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;// Helper to get tier color&#10;const getTierColor = (tierId: string, session: SessionFormData, tiers: Tier[]): string =&gt; {&#10;    if (tierId === 'unassigned') return '#d1d5db'; // gray-300&#10;&#10;    // We need to check if tiers exist in the session&#10;    const tier = tiers.find(t =&gt; t.id === tierId);&#10;    return tier?.color || '#6b7280'; // gray-500 as fallback&#10;};&#10;&#10;// Helper to get tier name&#10;const getTierName = (tierId: string, session: SessionFormData, tiers: Tier[]): string =&gt; {&#10;    if (tierId === 'unassigned') return 'Unassigned';&#10;&#10;    const tier = tiers.find(t =&gt; t.id === tierId);&#10;    return tier?.name || 'Unknown Tier';&#10;};&#10;&#10;interface SeatingLayoutProps {&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;}&#10;&#10;const SeatingLayout: React.FC&lt;SeatingLayoutProps&gt; = ({session, tiers}) =&gt; {&#10;    const [selectedSeat, setSelectedSeat] = useState&lt;{&#10;        seat: Seat;&#10;        rowLabel?: string;&#10;        blockName: string;&#10;        tier?: string;&#10;    } | null&gt;(null);&#10;&#10;    const {layoutData} = session;&#10;&#10;    // Only render for physical events with layout data&#10;    if (!layoutData || session.sessionType !== SessionType.PHYSICAL) return null;&#10;&#10;    const handleSeatClick = (&#10;        seat: Seat,&#10;        blockName: string,&#10;        rowLabel?: string&#10;    ) =&gt; {&#10;        setSelectedSeat({&#10;            seat,&#10;            rowLabel,&#10;            blockName,&#10;            tier: seat.tierId ? getTierName(seat.tierId, session, tiers) : undefined&#10;        });&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;border rounded-lg p-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold mb-4&quot;&gt;Seating Layout&lt;/h3&gt;&#10;            &lt;div className=&quot;relative bg-muted/30 min-h-[300px] p-4 rounded-lg overflow-auto&quot;&gt;&#10;                {layoutData.layout.blocks.map(block =&gt; (&#10;                    &lt;div&#10;                        key={block.id}&#10;                        className=&quot;absolute bg-card border rounded-lg p-3 shadow-sm&quot;&#10;                        style={{&#10;                            left: block.position.x,&#10;                            top: block.position.y,&#10;                            width: block.width ? `${block.width}px` : 'auto',&#10;                            height: block.height ? `${block.height}px` : 'auto'&#10;                        }}&#10;                    &gt;&#10;                        &lt;div className=&quot;text-sm font-medium mb-1&quot;&gt;{block.name}&lt;/div&gt;&#10;&#10;                        {block.type === 'seated_grid' &amp;&amp; block.rows &amp;&amp; (&#10;                            &lt;div&#10;                                className=&quot;grid gap-1&quot;&#10;                                style={{&#10;                                    gridTemplateColumns: `repeat(${block.rows[0]?.seats?.length || 1}, 1fr)`&#10;                                }}&#10;                            &gt;&#10;                                {block.rows.map(row =&gt;&#10;                                    row.seats.map(seat =&gt; (&#10;                                        &lt;Popover key={seat.id}&gt;&#10;                                            &lt;PopoverTrigger asChild&gt;&#10;                                                &lt;Button&#10;                                                    type=&quot;button&quot;&#10;                                                    variant=&quot;ghost&quot;&#10;                                                    className=&quot;h-6 w-6 p-0 rounded-full text-xs font-mono&quot;&#10;                                                    style={{&#10;                                                        backgroundColor: seat.tierId ?&#10;                                                            `${getTierColor(seat.tierId, session, tiers)}80` : // 50% opacity&#10;                                                            undefined,&#10;                                                        opacity: seat.status === 'RESERVED' ? 0.3 : 1&#10;                                                    }}&#10;                                                    onClick={() =&gt; handleSeatClick(seat, block.name, row.label)}&#10;                                                &gt;&#10;                                                    {seat.label}&#10;                                                &lt;/Button&gt;&#10;                                            &lt;/PopoverTrigger&gt;&#10;                                            &lt;PopoverContent side=&quot;top&quot; className=&quot;w-60 p-0&quot;&gt;&#10;                                                &lt;div className=&quot;p-4&quot;&gt;&#10;                                                    &lt;div className=&quot;font-semibold mb-2&quot;&gt;Seat Information&lt;/div&gt;&#10;                                                    &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Block:&lt;/span&gt;&#10;                                                            &lt;span&gt;{block.name}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Row:&lt;/span&gt;&#10;                                                            &lt;span&gt;{row.label}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Seat:&lt;/span&gt;&#10;                                                            &lt;span&gt;{seat.label}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Status:&lt;/span&gt;&#10;                                                            &lt;Badge&#10;                                                                variant={seat.status === 'RESERVED' ? 'destructive' : 'outline'}&gt;&#10;                                                                {seat.status || 'Available'}&#10;                                                            &lt;/Badge&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Tier:&lt;/span&gt;&#10;                                                            &lt;div className=&quot;flex items-center gap-1&quot;&gt;&#10;                                                                {seat.tierId &amp;&amp; (&#10;                                                                    &lt;div&#10;                                                                        className=&quot;h-3 w-3 rounded-full&quot;&#10;                                                                        style={{&#10;                                                                            backgroundColor: getTierColor(seat.tierId, session, tiers)&#10;                                                                        }}&#10;                                                                    /&gt;&#10;                                                                )}&#10;                                                                &lt;span&gt;&#10;                                                                    {seat.tierId ? getTierName(seat.tierId, session, tiers) : 'Unassigned'}&#10;                                                                &lt;/span&gt;&#10;                                                            &lt;/div&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/PopoverContent&gt;&#10;                                        &lt;/Popover&gt;&#10;                                    ))&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {block.type === 'standing_capacity' &amp;&amp; (&#10;                            &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;                                &lt;p className=&quot;text-sm text-center&quot;&gt;&#10;                                    &lt;span className=&quot;block font-medium&quot;&gt;Standing Area&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-muted-foreground&quot;&gt;&#10;                                        Capacity: {block.capacity || 0}&#10;                                    &lt;/span&gt;&#10;                                &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {block.type === 'non_sellable' &amp;&amp; (&#10;                            &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;                                &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                                    Non-sellable area&#10;                                &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState} from 'react';&#10;import {format, parseISO} from 'date-fns';&#10;import {Calendar, MapPin, Tag, Users, Clock, Armchair, LinkIcon, Info} from 'lucide-react';&#10;import {&#10;    Accordion,&#10;    AccordionContent,&#10;    AccordionItem,&#10;    AccordionTrigger,&#10;} from &quot;@/components/ui/accordion&quot;;&#10;import {Badge} from '@/components/ui/badge';&#10;import {&#10;    SessionFormData,&#10;    SalesStartRuleType,&#10;    SessionType,&#10;    Block,&#10;    Seat,&#10;    Row,&#10;    Tier&#10;} from '@/lib/validators/event';&#10;import {&#10;    Popover,&#10;    PopoverContent,&#10;    PopoverTrigger&#10;} from '@/components/ui/popover';&#10;import {Button} from '@/components/ui/button';&#10;import {GoogleMap, useJsApiLoader, Marker} from '@react-google-maps/api';&#10;&#10;interface ReviewSessionsProps {&#10;    sessions: SessionFormData[];&#10;    tiers: Tier[];&#10;}&#10;&#10;export const ReviewSessions: React.FC&lt;ReviewSessionsProps&gt; = ({sessions, tiers}) =&gt; {&#10;    if (sessions.length === 0) return null;&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;h2 className=&quot;text-2xl font-semibold&quot;&gt;Schedule&lt;/h2&gt;&#10;            &lt;Accordion type=&quot;single&quot; collapsible className=&quot;w-full&quot;&gt;&#10;                {sessions.map((session, index) =&gt; (&#10;                    &lt;SessionAccordionItem&#10;                        key={`session-${index}`}&#10;                        session={session}&#10;                        index={index}&#10;                        tiers={tiers}&#10;                    /&gt;&#10;                ))}&#10;            &lt;/Accordion&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;interface SessionAccordionItemProps {&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;    index: number;&#10;}&#10;&#10;const SessionAccordionItem: React.FC&lt;SessionAccordionItemProps&gt; = ({session, index, tiers}) =&gt; {&#10;    const startDate = parseISO(session.startTime);&#10;    const endDate = parseISO(session.endTime);&#10;    const isOnline = session.sessionType === SessionType.ONLINE;&#10;    const {layoutData} = session;&#10;&#10;    return (&#10;        &lt;AccordionItem&#10;            value={`item-${index}`}&#10;            className=&quot;border rounded-lg mb-4 overflow-hidden&quot;&#10;        &gt;&#10;            &lt;AccordionTrigger className=&quot;px-4 py-3 hover:no-underline hover:bg-muted/40&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-3 text-left&quot;&gt;&#10;                    &lt;Calendar className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                    &lt;div&gt;&#10;                        &lt;div className=&quot;font-medium&quot;&gt;&#10;                            {format(startDate, &quot;EEEE, MMMM d, yyyy&quot;)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                            {format(startDate, &quot;h:mm a&quot;)} - {format(endDate, &quot;h:mm a&quot;)}&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Badge variant={isOnline ? &quot;secondary&quot; : &quot;default&quot;} className=&quot;ml-4&quot;&gt;&#10;                        {isOnline ? 'Online' : 'Physical'}&#10;                    &lt;/Badge&gt;&#10;                &lt;/div&gt;&#10;            &lt;/AccordionTrigger&gt;&#10;            &lt;AccordionContent className=&quot;px-4 pt-2 pb-4&quot;&gt;&#10;                &lt;div className=&quot;grid grid-cols-1 gap-6&quot;&gt;&#10;                    &lt;SessionDetails session={session}/&gt;&#10;                    {layoutData &amp;&amp; layoutData.layout.blocks.length &gt; 0 &amp;&amp; (&#10;                        &lt;SeatingInformation&#10;                            isOnline={isOnline}&#10;                            session={session}&#10;                            tiers={tiers}&#10;                        /&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/AccordionContent&gt;&#10;        &lt;/AccordionItem&gt;&#10;    );&#10;};&#10;&#10;interface SessionDetailsProps {&#10;    session: SessionFormData;&#10;}&#10;&#10;const SessionDetails: React.FC&lt;SessionDetailsProps&gt; = ({session}) =&gt; {&#10;    const startDate = parseISO(session.startTime);&#10;    const endDate = parseISO(session.endTime);&#10;    const isOnline = session.sessionType === SessionType.ONLINE;&#10;    const {venueDetails} = session;&#10;&#10;    // Calculate event duration&#10;    const getDuration = (): string =&gt; {&#10;        try {&#10;            const durationMs = endDate.getTime() - startDate.getTime();&#10;            const hours = Math.floor(durationMs / (1000 * 60 * 60));&#10;            const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));&#10;&#10;            return hours &gt; 0&#10;                ? `${hours} hour${hours !== 1 ? 's' : ''}${minutes &gt; 0 ? ` ${minutes} min` : ''}`&#10;                : `${minutes} minutes`;&#10;        } catch (e) {&#10;            console.error(&quot;Error calculating duration:&quot;, e);&#10;            return &quot;Duration unavailable&quot;;&#10;        }&#10;    };&#10;&#10;    // Sales rule description&#10;    const getSalesRuleDescription = (): string =&gt; {&#10;        switch (session.salesStartRuleType) {&#10;            case SalesStartRuleType.IMMEDIATE:&#10;                return &quot;On sale immediately&quot;;&#10;            case SalesStartRuleType.FIXED:&#10;                return session.salesStartFixedDatetime&#10;                    ? `Sales start on ${format(parseISO(session.salesStartFixedDatetime), 'MMM d, yyyy h:mm a')}`&#10;                    : &quot;Fixed date not set&quot;;&#10;            case SalesStartRuleType.ROLLING:&#10;                if (session.salesStartHoursBefore === undefined || session.salesStartHoursBefore === null || session.salesStartHoursBefore &lt; 0) {&#10;                    return &quot;Rolling hours not set or invalid&quot;;&#10;                } else if (session.salesStartHoursBefore &lt; 24) {&#10;                    return `Sales start ${session.salesStartHoursBefore} hour(s) before the session`;&#10;                } else {&#10;                    const days = Math.floor(session.salesStartHoursBefore / 24);&#10;                    const hours = session.salesStartHoursBefore % 24;&#10;                    return `Sales start ${days} day(s)${hours &gt; 0 ? ` and ${hours} hour(s)` : ''} before the session`;&#10;                }&#10;            default:&#10;                return &quot;Not set&quot;;&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;Clock className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                &lt;span&gt;Duration: {getDuration()}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-start gap-2&quot;&gt;&#10;                {isOnline ? (&#10;                    &lt;&gt;&#10;                        &lt;LinkIcon className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                        &lt;div&gt;&#10;                            &lt;div&gt;Online Event&lt;/div&gt;&#10;                            {venueDetails?.onlineLink ? (&#10;                                &lt;div className=&quot;text-sm text-muted-foreground break-all&quot;&gt;&#10;                                    {venueDetails.onlineLink}&#10;                                &lt;/div&gt;&#10;                            ) : (&#10;                                &lt;div className=&quot;text-sm text-destructive&quot;&gt;&#10;                                    Link not provided&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                ) : (&#10;                    &lt;&gt;&#10;                        &lt;MapPin className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                        &lt;div className=&quot;w-full&quot;&gt;&#10;                            {venueDetails?.name ? (&#10;                                &lt;&gt;&#10;                                    &lt;div&gt;{venueDetails.name}&lt;/div&gt;&#10;                                    {venueDetails.address &amp;&amp; (&#10;                                        &lt;div className=&quot;text-sm text-muted-foreground mb-2&quot;&gt;&#10;                                            {venueDetails.address}&#10;                                        &lt;/div&gt;&#10;                                    )}&#10;                                &lt;/&gt;&#10;                            ) : (&#10;                                &lt;div className=&quot;text-destructive&quot;&gt;&#10;                                    Venue not specified&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;Tag className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                &lt;span&gt;{getSalesRuleDescription()}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;interface SeatingInformationProps {&#10;    isOnline: boolean;&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;}&#10;&#10;const SeatingInformation: React.FC&lt;SeatingInformationProps&gt; = ({isOnline, session, tiers}) =&gt; {&#10;    const {layoutData} = session;&#10;    const {venueDetails} = session;&#10;    &#10;    // For physical events with coordinates, prepare Google Map&#10;    const {isLoaded} = useJsApiLoader({&#10;        id: 'google-map-script',&#10;        googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || '',&#10;    });&#10;&#10;    const mapCenter = venueDetails?.latitude &amp;&amp; venueDetails?.longitude&#10;        ? {lat: venueDetails.latitude, lng: venueDetails.longitude}&#10;        : {lat: 6.9271, lng: 79.8612}; // Default: Colombo, Sri Lanka&#10;&#10;    // Function to count seats by tier&#10;    const getSeatCountByTier = () =&gt; {&#10;        const tierCounts: Record&lt;string, number&gt; = {};&#10;&#10;        layoutData.layout.blocks.forEach(block =&gt; {&#10;            if (block.rows) {&#10;                // For seated blocks with rows&#10;                block.rows.forEach(row =&gt; {&#10;                    row.seats.forEach(seat =&gt; {&#10;                        if (seat.status !== 'RESERVED') {&#10;                            const tierId = seat.tierId || 'unassigned';&#10;                            tierCounts[tierId] = (tierCounts[tierId] || 0) + 1;&#10;                        }&#10;                    });&#10;                });&#10;            } else if (block.seats) {&#10;                // For blocks with direct seats array&#10;                block.seats.forEach(seat =&gt; {&#10;                    if (seat.status !== 'RESERVED') {&#10;                        const tierId = seat.tierId || 'unassigned';&#10;                        tierCounts[tierId] = (tierCounts[tierId] || 0) + 1;&#10;                    }&#10;                });&#10;            } else if (block.capacity &amp;&amp; block.type === 'standing_capacity') {&#10;                // For standing blocks&#10;                // Fix the TypeScript error by explicitly typing the block.seats access&#10;                const blockSeats = block.seats as Seat[] | undefined;&#10;                const tierId = blockSeats?.[0]?.tierId || 'unassigned';&#10;                tierCounts[tierId] = (tierCounts[tierId] || 0) + (block.capacity || 0);&#10;            }&#10;        });&#10;&#10;        return tierCounts;&#10;    };&#10;&#10;    const seatCountByTier = getSeatCountByTier();&#10;    const totalSeats = Object.values(seatCountByTier).reduce((sum, count) =&gt; sum + count, 0);&#10;&#10;    // Display for online events&#10;    if (isOnline) {&#10;        return (&#10;            &lt;div className=&quot;bg-muted/30 p-4 rounded-lg&quot;&gt;&#10;                &lt;div className=&quot;flex items-start gap-2 mb-2&quot;&gt;&#10;                    &lt;Users className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                    &lt;span className=&quot;font-medium&quot;&gt;Capacity Information&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-sm ml-6&quot;&gt;&#10;                    &lt;p&gt;Total capacity: {totalSeats}&lt;/p&gt;&#10;                    {Object.entries(seatCountByTier).map(([tierId, count]) =&gt; (&#10;                        &lt;div key={tierId} className=&quot;flex items-center gap-2 mt-1&quot;&gt;&#10;                            {tierId !== 'unassigned' &amp;&amp; (&#10;                                &lt;div&#10;                                    className=&quot;h-3 w-3 rounded-full&quot;&#10;                                    style={{&#10;                                        backgroundColor: getTierColor(tierId, session, tiers)&#10;                                    }}&#10;                                /&gt;&#10;                            )}&#10;                            &lt;span&gt;&#10;                                {getTierName(tierId, session, tiers)}: {count} {count === 1 ? 'seat' : 'seats'}&#10;                            &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    // Display for physical events - side by side layout&#10;    return (&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold&quot;&gt;Venue &amp; Seating Information&lt;/h3&gt;&#10;            &#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                {/* Left side: Google Map */}&#10;                &lt;div className=&quot;h-[300px] rounded-md overflow-hidden border&quot;&gt;&#10;                    {isLoaded ? (&#10;                        &lt;GoogleMap&#10;                            mapContainerStyle={{&#10;                                width: '100%',&#10;                                height: '100%',&#10;                            }}&#10;                            center={mapCenter}&#10;                            zoom={15}&#10;                        &gt;&#10;                            &lt;Marker position={mapCenter}/&gt;&#10;                        &lt;/GoogleMap&gt;&#10;                    ) : (&#10;                        &lt;div className=&quot;h-full w-full bg-muted flex items-center justify-center&quot;&gt;&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Loading map...&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &#10;                {/* Right side: Seating summary */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;bg-muted/30 p-4 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-start gap-2 mb-2&quot;&gt;&#10;                            &lt;Armchair className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Seating Summary&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm ml-6&quot;&gt;&#10;                            &lt;p&gt;Total capacity: {totalSeats}&lt;/p&gt;&#10;                            {Object.entries(seatCountByTier).map(([tierId, count]) =&gt; (&#10;                                &lt;div key={tierId} className=&quot;flex items-center gap-2 mt-1&quot;&gt;&#10;                                    {tierId !== 'unassigned' &amp;&amp; (&#10;                                        &lt;div&#10;                                            className=&quot;h-3 w-3 rounded-full&quot;&#10;                                            style={{&#10;                                                backgroundColor: getTierColor(tierId, session, tiers)&#10;                                            }}&#10;                                        /&gt;&#10;                                    )}&#10;                                    &lt;span&gt;&#10;                                        {getTierName(tierId, session, tiers)}: {count} {count === 1 ? 'seat' : 'seats'}&#10;                                    &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                            ))}&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Seating Layout below the map and summary */}&#10;            {layoutData &amp;&amp; (&#10;                &lt;SeatingLayout session={session} tiers={tiers}/&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;// Helper to get tier color&#10;const getTierColor = (tierId: string, session: SessionFormData, tiers: Tier[]): string =&gt; {&#10;    if (tierId === 'unassigned') return '#d1d5db'; // gray-300&#10;&#10;    // We need to check if tiers exist in the session&#10;    const tier = tiers.find(t =&gt; t.id === tierId);&#10;    return tier?.color || '#6b7280'; // gray-500 as fallback&#10;};&#10;&#10;// Helper to get tier name&#10;const getTierName = (tierId: string, session: SessionFormData, tiers: Tier[]): string =&gt; {&#10;    if (tierId === 'unassigned') return 'Unassigned';&#10;&#10;    const tier = tiers.find(t =&gt; t.id === tierId);&#10;    return tier?.name || 'Unknown Tier';&#10;};&#10;&#10;interface SeatingLayoutProps {&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;}&#10;&#10;const SeatingLayout: React.FC&lt;SeatingLayoutProps&gt; = ({session, tiers}) =&gt; {&#10;    const [selectedSeat, setSelectedSeat] = useState&lt;{&#10;        seat: Seat;&#10;        rowLabel?: string;&#10;        blockName: string;&#10;        tier?: string;&#10;    } | null&gt;(null);&#10;&#10;    const {layoutData} = session;&#10;&#10;    // Only render for physical events with layout data&#10;    if (!layoutData || session.sessionType !== SessionType.PHYSICAL) return null;&#10;&#10;    const handleSeatClick = (&#10;        seat: Seat,&#10;        blockName: string,&#10;        rowLabel?: string&#10;    ) =&gt; {&#10;        setSelectedSeat({&#10;            seat,&#10;            rowLabel,&#10;            blockName,&#10;            tier: seat.tierId ? getTierName(seat.tierId, session, tiers) : undefined&#10;        });&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;border rounded-lg p-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold mb-4&quot;&gt;Seating Layout&lt;/h3&gt;&#10;            &lt;div className=&quot;relative bg-muted/30 min-h-[300px] p-4 rounded-lg overflow-auto&quot;&gt;&#10;                {layoutData.layout.blocks.map(block =&gt; (&#10;                    &lt;div&#10;                        key={block.id}&#10;                        className=&quot;absolute bg-card border rounded-lg p-3 shadow-sm&quot;&#10;                        style={{&#10;                            left: block.position.x,&#10;                            top: block.position.y,&#10;                            width: block.width ? `${block.width}px` : 'auto',&#10;                            height: block.height ? `${block.height}px` : 'auto'&#10;                        }}&#10;                    &gt;&#10;                        &lt;div className=&quot;text-sm font-medium mb-1&quot;&gt;{block.name}&lt;/div&gt;&#10;&#10;                        {block.type === 'seated_grid' &amp;&amp; block.rows &amp;&amp; (&#10;                            &lt;div&#10;                                className=&quot;grid gap-1&quot;&#10;                                style={{&#10;                                    gridTemplateColumns: `repeat(${block.rows[0]?.seats?.length || 1}, 1fr)`&#10;                                }}&#10;                            &gt;&#10;                                {block.rows.map(row =&gt;&#10;                                    row.seats.map(seat =&gt; (&#10;                                        &lt;Popover key={seat.id}&gt;&#10;                                            &lt;PopoverTrigger asChild&gt;&#10;                                                &lt;Button&#10;                                                    type=&quot;button&quot;&#10;                                                    variant=&quot;ghost&quot;&#10;                                                    className=&quot;h-6 w-6 p-0 rounded-full text-xs font-mono&quot;&#10;                                                    style={{&#10;                                                        backgroundColor: seat.tierId ?&#10;                                                            `${getTierColor(seat.tierId, session, tiers)}80` : // 50% opacity&#10;                                                            undefined,&#10;                                                        opacity: seat.status === 'RESERVED' ? 0.3 : 1&#10;                                                    }}&#10;                                                    onClick={() =&gt; handleSeatClick(seat, block.name, row.label)}&#10;                                                &gt;&#10;                                                    {seat.label}&#10;                                                &lt;/Button&gt;&#10;                                            &lt;/PopoverTrigger&gt;&#10;                                            &lt;PopoverContent side=&quot;top&quot; className=&quot;w-60 p-0&quot;&gt;&#10;                                                &lt;div className=&quot;p-4&quot;&gt;&#10;                                                    &lt;div className=&quot;font-semibold mb-2&quot;&gt;Seat Information&lt;/div&gt;&#10;                                                    &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Block:&lt;/span&gt;&#10;                                                            &lt;span&gt;{block.name}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Row:&lt;/span&gt;&#10;                                                            &lt;span&gt;{row.label}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Seat:&lt;/span&gt;&#10;                                                            &lt;span&gt;{seat.label}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Status:&lt;/span&gt;&#10;                                                            &lt;Badge&#10;                                                                variant={seat.status === 'RESERVED' ? 'destructive' : 'outline'}&gt;&#10;                                                                {seat.status || 'Available'}&#10;                                                            &lt;/Badge&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Tier:&lt;/span&gt;&#10;                                                            &lt;div className=&quot;flex items-center gap-1&quot;&gt;&#10;                                                                {seat.tierId &amp;&amp; (&#10;                                                                    &lt;div&#10;                                                                        className=&quot;h-3 w-3 rounded-full&quot;&#10;                                                                        style={{&#10;                                                                            backgroundColor: getTierColor(seat.tierId, session, tiers)&#10;                                                                        }}&#10;                                                                    /&gt;&#10;                                                                )}&#10;                                                                &lt;span&gt;&#10;                                                                    {seat.tierId ? getTierName(seat.tierId, session, tiers) : 'Unassigned'}&#10;                                                                &lt;/span&gt;&#10;                                                            &lt;/div&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/PopoverContent&gt;&#10;                                        &lt;/Popover&gt;&#10;                                    ))&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {block.type === 'standing_capacity' &amp;&amp; (&#10;                            &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;                                &lt;p className=&quot;text-sm text-center&quot;&gt;&#10;                                    &lt;span className=&quot;block font-medium&quot;&gt;Standing Area&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-muted-foreground&quot;&gt;&#10;                                        Capacity: {block.capacity || 0}&#10;                                    &lt;/span&gt;&#10;                                &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {block.type === 'non_sellable' &amp;&amp; (&#10;                            &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;                                &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                                    Non-sellable area&#10;                                &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {CoreDetailsStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/CoreDetailsStep&quot;;&#10;import {Progress} from &quot;@/components/ui/progress&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {FormProvider, useForm} from &quot;react-hook-form&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {TiersStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/TierStep&quot;;&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {CreateEventFormData, createEventSchema, stepValidationFields} from '@/lib/validators/event';&#10;import {SchedulingStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/SchedulingStep&quot;;&#10;import {SeatingStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/SeatingStep&quot;;&#10;import {useOrganization} from &quot;@/providers/OrganizationProvider&quot;;&#10;import {ReviewStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/ReviewStep&quot;;&#10;import {&#10;    AlertDialog,&#10;    AlertDialogAction, AlertDialogCancel,&#10;    AlertDialogContent,&#10;    AlertDialogDescription,&#10;    AlertDialogFooter,&#10;    AlertDialogHeader,&#10;    AlertDialogTitle, AlertDialogTrigger,&#10;} from &quot;@/components/ui/alert-dialog&quot;;&#10;import { createEvent } from &quot;@/lib/actions/eventActions&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;&#10;&#10;export default function CreateEventPage() {&#10;    const [step, setStep] = useState(1);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const [inConfigMode, setInConfigMode] = useState(false);&#10;    const [showApprovalDialog, setShowApprovalDialog] = useState(false);&#10;    const [isSubmitting, setIsSubmitting] = useState(false);&#10;    const router = useRouter();&#10;&#10;    const {&#10;        organization: activeOrganization,&#10;    } = useOrganization();&#10;    const totalSteps = 5;&#10;&#10;    const methods = useForm&lt;CreateEventFormData&gt;({&#10;        resolver: zodResolver(createEventSchema),&#10;        mode: 'onChange', // Enable real-time validation&#10;        defaultValues: {&#10;            title: 'An Example Event',&#10;            description: 'This is a sample event description.',&#10;            overview: 'An overview of the event goes here.',&#10;            organizationId: activeOrganization?.id || '', // This might be undefined initially&#10;            categoryId: '',&#10;            tiers: [],&#10;            sessions: [],&#10;        },&#10;    });&#10;&#10;    // Update organizationId when activeOrganization becomes available&#10;    useEffect(() =&gt; {&#10;        if (activeOrganization?.id) {&#10;            methods.setValue('organizationId', activeOrganization.id);&#10;        }&#10;    }, [activeOrganization, methods]);&#10;&#10;    const onNext = async () =&gt; {&#10;        const fieldsToValidate = stepValidationFields[step as keyof typeof stepValidationFields];&#10;        const isValid = await methods.trigger(fieldsToValidate);&#10;        console.log(methods.watch());&#10;&#10;        if (isValid) {&#10;            setStep(s =&gt; Math.min(totalSteps, s + 1));&#10;        } else {&#10;            // react-hook-form will automatically show errors next to the invalid fields.&#10;            // A toast is good for a general notification.&#10;            console.log(&quot;Validation errors for step&quot;, step, methods.formState.errors);&#10;            console.error(&quot;Validation failed for step&quot;, step);&#10;            toast.error(&quot;Please fix the errors before proceeding.&quot;);&#10;        }&#10;    };&#10;&#10;    const onPrev = () =&gt; setStep(s =&gt; Math.max(1, s - 1));&#10;&#10;    const onSubmit = async (data: CreateEventFormData) =&gt; {&#10;        setIsSubmitting(true);&#10;        const loadingToast = toast.loading(&quot;Submitting your event...&quot;);&#10;&#10;        try {&#10;            console.log(&quot;Submitting event data:&quot;, data);&#10;            console.log(&quot;Cover files:&quot;, coverFiles);&#10;&#10;            // Call the API to create the event&#10;            const response = await createEvent(data, coverFiles);&#10;&#10;            toast.dismiss(loadingToast);&#10;            toast.success(&quot;Event submitted successfully!&quot;);&#10;&#10;            console.log(&quot;Event created:&quot;, response);&#10;&#10;            // Navigate to the events page after a short delay&#10;            setTimeout(() =&gt; {&#10;                if (activeOrganization?.id) {&#10;                    router.push(`/manage/organization/${activeOrganization.id}/event`);&#10;                }&#10;            }, 1500);&#10;&#10;        } catch (error) {&#10;            toast.dismiss(loadingToast);&#10;            console.error(&quot;Error creating event:&quot;, error);&#10;            toast.error(error instanceof Error ? error.message : &quot;Failed to create event. Please try again.&quot;);&#10;        } finally {&#10;            setIsSubmitting(false);&#10;            setShowApprovalDialog(false);&#10;        }&#10;    };&#10;&#10;&#10;    const renderStep = () =&gt; {&#10;        switch (step) {&#10;            case 1:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;            case 2:&#10;                return &lt;TiersStep/&gt;;&#10;            // Add cases for other steps here&#10;            case 3:&#10;                return &lt;SchedulingStep/&gt;&#10;            case 4:&#10;                return &lt;SeatingStep onConfigModeChange={setInConfigMode}/&gt;;&#10;            case 5:&#10;                return &lt;ReviewStep coverFiles={coverFiles}/&gt;; // ✅ Render the new step&#10;            default:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;        }&#10;    };&#10;&#10;    // Helper function to check if current step has errors&#10;    const hasStepErrors = () =&gt; {&#10;        const fieldsToCheck = stepValidationFields[step as keyof typeof stepValidationFields];&#10;        if (!fieldsToCheck) return false;&#10;&#10;        return fieldsToCheck.some(field =&gt; methods.formState.errors[field]);&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-8 max-w-5xl mx-auto p-4 md:p-8&quot;&gt;&#10;            &lt;div className=&quot;mb-8&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;h1 className=&quot;text-2xl font-bold&quot;&gt;Create New Event&lt;/h1&gt;&#10;                        &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Step {step} of {totalSteps}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    {hasStepErrors() &amp;&amp; (&#10;                        &lt;div className=&quot;text-sm text-destructive&quot;&gt;&#10;                            Please fix validation errors&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;Progress value={(step / totalSteps) * 100} className=&quot;mt-2&quot;/&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;FormProvider {...methods}&gt;&#10;                &lt;form onSubmit={methods.handleSubmit(onSubmit)}&gt;&#10;                    {renderStep()}&#10;&#10;                    {/* Hide the Next/Previous buttons when in configuration mode */}&#10;                    {!inConfigMode &amp;&amp; (&#10;                        &lt;div className=&quot;flex justify-between mt-8&quot;&gt;&#10;                            &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; onClick={onPrev} disabled={step === 1}&gt;&#10;                                Previous&#10;                            &lt;/Button&gt;&#10;                            {step &lt; totalSteps ? (&#10;                                &lt;Button&#10;                                    type=&quot;button&quot;&#10;                                    onClick={onNext}&#10;                                    disabled={isSubmitting}&#10;                                &gt;&#10;                                    {isSubmitting ? 'Validating...' : 'Next'}&#10;                                &lt;/Button&gt;&#10;                            ) : (&#10;                                &lt;AlertDialog open={showApprovalDialog} onOpenChange={setShowApprovalDialog}&gt;&#10;                                    &lt;AlertDialogTrigger asChild&gt;&#10;                                        &lt;Button type=&quot;button&quot; disabled={isSubmitting}&gt;&#10;                                            Submit Event&#10;                                        &lt;/Button&gt;&#10;                                    &lt;/AlertDialogTrigger&gt;&#10;                                    &lt;AlertDialogContent&gt;&#10;                                        &lt;AlertDialogHeader&gt;&#10;                                            &lt;AlertDialogTitle&gt;Event Submission&lt;/AlertDialogTitle&gt;&#10;                                            &lt;AlertDialogDescription&gt;&#10;                                                Thank you for submitting your event. Our admin team will review your request shortly and get back to you.&#10;                                                You&amp;#39;ll receive a notification once the review is complete.&#10;                                                &lt;br/&gt;&#10;                                                &lt;br/&gt;&#10;                                                &lt;strong&gt;Event Title:&lt;/strong&gt; {methods.watch('title')}&#10;                                                &lt;br/&gt;&#10;                                                &lt;strong&gt;Organization:&lt;/strong&gt; {activeOrganization?.name || 'N/A'}&#10;                                            &lt;/AlertDialogDescription&gt;&#10;                                        &lt;/AlertDialogHeader&gt;&#10;                                        &lt;AlertDialogFooter&gt;&#10;                                            &lt;AlertDialogAction&#10;                                                onClick={() =&gt; onSubmit(methods.getValues())}&#10;                                                disabled={isSubmitting}&#10;                                            &gt;&#10;                                                {isSubmitting ? 'Submitting...' : 'Confirm'}&#10;                                            &lt;/AlertDialogAction&gt;&#10;                                            &lt;AlertDialogCancel&gt;&#10;                                                Cancel&#10;                                            &lt;/AlertDialogCancel&gt;&#10;                                        &lt;/AlertDialogFooter&gt;&#10;                                    &lt;/AlertDialogContent&gt;&#10;                                &lt;/AlertDialog&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/form&gt;&#10;            &lt;/FormProvider&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {CoreDetailsStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/CoreDetailsStep&quot;;&#10;import {Progress} from &quot;@/components/ui/progress&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {FormProvider, useForm} from &quot;react-hook-form&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {TiersStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/TierStep&quot;;&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {CreateEventFormData, createEventSchema, stepValidationFields} from '@/lib/validators/event';&#10;import {SchedulingStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/SchedulingStep&quot;;&#10;import {SeatingStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/SeatingStep&quot;;&#10;import {useOrganization} from &quot;@/providers/OrganizationProvider&quot;;&#10;import {ReviewStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/ReviewStep&quot;;&#10;import {&#10;    AlertDialog,&#10;    AlertDialogAction, AlertDialogCancel,&#10;    AlertDialogContent,&#10;    AlertDialogDescription,&#10;    AlertDialogFooter,&#10;    AlertDialogHeader,&#10;    AlertDialogTitle, AlertDialogTrigger,&#10;} from &quot;@/components/ui/alert-dialog&quot;;&#10;import { createEvent } from &quot;@/lib/actions/eventActions&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;&#10;&#10;export default function CreateEventPage() {&#10;    const [step, setStep] = useState(1);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const [inConfigMode, setInConfigMode] = useState(false);&#10;    const [showApprovalDialog, setShowApprovalDialog] = useState(false);&#10;    const [isSubmitting, setIsSubmitting] = useState(false);&#10;    const router = useRouter();&#10;&#10;    const {&#10;        organization: activeOrganization,&#10;    } = useOrganization();&#10;    const totalSteps = 5;&#10;&#10;    const methods = useForm&lt;CreateEventFormData&gt;({&#10;        resolver: zodResolver(createEventSchema),&#10;        mode: 'onChange', // Enable real-time validation&#10;        defaultValues: {&#10;            title: 'An Example Event',&#10;            description: 'This is a sample event description.',&#10;            overview: 'An overview of the event goes here.',&#10;            organizationId: activeOrganization?.id || '', // This might be undefined initially&#10;            categoryId: '',&#10;            tiers: [],&#10;            sessions: [],&#10;        },&#10;    });&#10;&#10;    // Update organizationId when activeOrganization becomes available&#10;    useEffect(() =&gt; {&#10;        if (activeOrganization?.id) {&#10;            methods.setValue('organizationId', activeOrganization.id);&#10;        }&#10;    }, [activeOrganization, methods]);&#10;&#10;    const onNext = async () =&gt; {&#10;        const fieldsToValidate = stepValidationFields[step as keyof typeof stepValidationFields];&#10;        const isValid = await methods.trigger(fieldsToValidate);&#10;        console.log(methods.watch());&#10;&#10;        if (isValid) {&#10;            setStep(s =&gt; Math.min(totalSteps, s + 1));&#10;        } else {&#10;            // react-hook-form will automatically show errors next to the invalid fields.&#10;            // A toast is good for a general notification.&#10;            console.log(&quot;Validation errors for step&quot;, step, methods.formState.errors);&#10;            console.error(&quot;Validation failed for step&quot;, step);&#10;            toast.error(&quot;Please fix the errors before proceeding.&quot;);&#10;        }&#10;    };&#10;&#10;    const onPrev = () =&gt; setStep(s =&gt; Math.max(1, s - 1));&#10;&#10;    const onSubmit = async (data: CreateEventFormData) =&gt; {&#10;        setIsSubmitting(true);&#10;        const loadingToast = toast.loading(&quot;Submitting your event...&quot;);&#10;&#10;        try {&#10;            console.log(&quot;Submitting event data:&quot;, data);&#10;            console.log(&quot;Cover files:&quot;, coverFiles);&#10;&#10;            // Call the API to create the event&#10;            const response = await createEvent(data, coverFiles);&#10;&#10;            toast.dismiss(loadingToast);&#10;            toast.success(&quot;Event submitted successfully!&quot;);&#10;&#10;            console.log(&quot;Event created:&quot;, response);&#10;&#10;            // Navigate to the events page after a short delay&#10;            setTimeout(() =&gt; {&#10;                if (activeOrganization?.id) {&#10;                    router.push(`/manage/organization/${activeOrganization.id}/event`);&#10;                }&#10;            }, 1500);&#10;&#10;        } catch (error) {&#10;            toast.dismiss(loadingToast);&#10;            console.error(&quot;Error creating event:&quot;, error);&#10;            toast.error(error instanceof Error ? error.message : &quot;Failed to create event. Please try again.&quot;);&#10;        } finally {&#10;            setIsSubmitting(false);&#10;            setShowApprovalDialog(false);&#10;        }&#10;    };&#10;&#10;&#10;    const renderStep = () =&gt; {&#10;        switch (step) {&#10;            case 1:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;            case 2:&#10;                return &lt;TiersStep/&gt;;&#10;            // Add cases for other steps here&#10;            case 3:&#10;                return &lt;SchedulingStep/&gt;&#10;            case 4:&#10;                return &lt;SeatingStep onConfigModeChange={setInConfigMode}/&gt;;&#10;            case 5:&#10;                return &lt;ReviewStep coverFiles={coverFiles}/&gt;; // ✅ Render the new step&#10;            default:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;        }&#10;    };&#10;&#10;    // Helper function to check if current step has errors&#10;    const hasStepErrors = () =&gt; {&#10;        const fieldsToCheck = stepValidationFields[step as keyof typeof stepValidationFields];&#10;        if (!fieldsToCheck) return false;&#10;&#10;        return fieldsToCheck.some(field =&gt; methods.formState.errors[field]);&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;w-full flex justify-center p-4 md:p-8&quot;&gt;&#10;            &lt;div className=&quot;w-full max-w-5xl space-y-8&quot;&gt;&#10;                &lt;div className=&quot;mb-8&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                        &lt;div&gt;&#10;                            &lt;h1 className=&quot;text-2xl font-bold&quot;&gt;Create New Event&lt;/h1&gt;&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Step {step} of {totalSteps}&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        {hasStepErrors() &amp;&amp; (&#10;                            &lt;div className=&quot;text-sm text-destructive&quot;&gt;&#10;                                Please fix validation errors&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                    &lt;Progress value={(step / totalSteps) * 100} className=&quot;mt-2&quot;/&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;FormProvider {...methods}&gt;&#10;                    &lt;form onSubmit={methods.handleSubmit(onSubmit)}&gt;&#10;                        {renderStep()}&#10;&#10;                        {/* Hide the Next/Previous buttons when in configuration mode */}&#10;                        {!inConfigMode &amp;&amp; (&#10;                            &lt;div className=&quot;flex justify-between mt-8&quot;&gt;&#10;                                &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; onClick={onPrev} disabled={step === 1}&gt;&#10;                                    Previous&#10;                                &lt;/Button&gt;&#10;                                {step &lt; totalSteps ? (&#10;                                    &lt;Button&#10;                                        type=&quot;button&quot;&#10;                                        onClick={onNext}&#10;                                        disabled={isSubmitting}&#10;                                    &gt;&#10;                                        {isSubmitting ? 'Validating...' : 'Next'}&#10;                                    &lt;/Button&gt;&#10;                                ) : (&#10;                                    &lt;AlertDialog open={showApprovalDialog} onOpenChange={setShowApprovalDialog}&gt;&#10;                                        &lt;AlertDialogTrigger asChild&gt;&#10;                                            &lt;Button type=&quot;button&quot; disabled={isSubmitting}&gt;&#10;                                                Submit Event&#10;                                            &lt;/Button&gt;&#10;                                        &lt;/AlertDialogTrigger&gt;&#10;                                        &lt;AlertDialogContent&gt;&#10;                                            &lt;AlertDialogHeader&gt;&#10;                                                &lt;AlertDialogTitle&gt;Event Submission&lt;/AlertDialogTitle&gt;&#10;                                                &lt;AlertDialogDescription&gt;&#10;                                                    Thank you for submitting your event. Our admin team will review your request shortly and get back to you.&#10;                                                    You&amp;#39;ll receive a notification once the review is complete.&#10;                                                    &lt;br/&gt;&#10;                                                    &lt;br/&gt;&#10;                                                    &lt;strong&gt;Event Title:&lt;/strong&gt; {methods.watch('title')}&#10;                                                    &lt;br/&gt;&#10;                                                    &lt;strong&gt;Organization:&lt;/strong&gt; {activeOrganization?.name || 'N/A'}&#10;                                                &lt;/AlertDialogDescription&gt;&#10;                                            &lt;/AlertDialogHeader&gt;&#10;                                            &lt;AlertDialogFooter&gt;&#10;                                                &lt;AlertDialogAction&#10;                                                    onClick={() =&gt; onSubmit(methods.getValues())}&#10;                                                    disabled={isSubmitting}&#10;                                                &gt;&#10;                                                    {isSubmitting ? 'Submitting...' : 'Confirm'}&#10;                                                &lt;/AlertDialogAction&gt;&#10;                                                &lt;AlertDialogCancel&gt;&#10;                                                    Cancel&#10;                                                &lt;/AlertDialogCancel&gt;&#10;                                            &lt;/AlertDialogFooter&gt;&#10;                                        &lt;/AlertDialogContent&gt;&#10;                                    &lt;/AlertDialog&gt;&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/form&gt;&#10;                &lt;/FormProvider&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx.new">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx.new" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useEffect, useState} from 'react';&#10;import {CoreDetailsStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/CoreDetailsStep&quot;;&#10;import {Progress} from &quot;@/components/ui/progress&quot;;&#10;import {CreateEventRequest} from &quot;@/types/event&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {FormProvider, useForm} from &quot;react-hook-form&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {TiersStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/TierStep&quot;;&#10;import {zodResolver} from &quot;@hookform/resolvers/zod&quot;;&#10;import {coreDetailsSchema, tiersSchema} from &quot;@/lib/validators/event&quot;;&#10;import {WizardSidebar} from &quot;../_components/WizardSideBar&quot;;&#10;import {useSidebar} from &quot;@/components/ui/sidebar&quot;;&#10;&#10;// --- Main Wizard Parent Component ---&#10;export default function CreateEventPage() {&#10;    const [step, setStep] = useState(1);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const totalSteps = 5;&#10;    const {setOpen} = useSidebar();&#10;    &#10;    const steps = [&#10;        {number: 1, title: &quot;Core Details&quot;, description: &quot;Name, category, and location&quot;},&#10;        {number: 2, title: &quot;Tiers &amp; Pricing&quot;, description: &quot;Set your ticket prices&quot;},&#10;        {number: 3, title: &quot;Scheduling&quot;, description: &quot;Add dates and times&quot;},&#10;        {number: 4, title: &quot;Seating&quot;, description: &quot;Configure seating maps&quot;},&#10;        {number: 5, title: &quot;Review &amp; Publish&quot;, description: &quot;Final check before submission&quot;},&#10;    ];&#10;&#10;    // Collapse the main sidebar when component mounts&#10;    useEffect(() =&gt; {&#10;        setOpen(false);&#10;    }, [setOpen]);&#10;&#10;    // ✅ The single form instance for the entire wizard is created here.&#10;    const methods = useForm&lt;CreateEventRequest&gt;({&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            organizationId: '', // Should be set from context/params&#10;            categoryId: '',&#10;            isOnline: false,&#10;            tiers: [],&#10;            sessions: [],&#10;        },&#10;        mode: 'onSubmit', // Only validate when explicitly triggered&#10;    });&#10;&#10;    // Update the validation schema based on the current step&#10;    useEffect(() =&gt; {&#10;        if (step === 1) {&#10;            methods.clearErrors();&#10;        } else if (step === 2) {&#10;            methods.clearErrors();&#10;        }&#10;    }, [step, methods]);&#10;&#10;    const validateCoreDetails = async () =&gt; {&#10;        try {&#10;            // Check for cover photos&#10;            if (coverFiles.length === 0) {&#10;                toast.error(&quot;Please upload at least one cover photo.&quot;);&#10;                return false;&#10;            }&#10;            &#10;            // Get form values for core details&#10;            const values = methods.getValues();&#10;            const coreData = {&#10;                title: values.title,&#10;                description: values.description || &quot;&quot;,&#10;                overview: values.overview || &quot;&quot;,&#10;                categoryId: values.categoryId || &quot;&quot;,&#10;                isOnline: values.isOnline || false,&#10;                venueId: values.venueId,&#10;                onlineLink: values.onlineLink,&#10;                locationDescription: values.locationDescription,&#10;            };&#10;            &#10;            // Validate with Zod schema&#10;            const result = coreDetailsSchema.safeParse(coreData);&#10;            &#10;            if (!result.success) {&#10;                // Show validation errors&#10;                result.error.errors.forEach(err =&gt; {&#10;                    toast.error(`${err.path.join('.')}: ${err.message}`);&#10;                });&#10;                &#10;                // Also set form errors for field highlighting&#10;                result.error.errors.forEach(err =&gt; {&#10;                    const path = err.path.join('.') as keyof CreateEventRequest;&#10;                    methods.setError(path, { &#10;                        type: 'manual', &#10;                        message: err.message &#10;                    });&#10;                });&#10;                &#10;                return false;&#10;            }&#10;            &#10;            return true;&#10;        } catch (error: any) {&#10;            console.error(&quot;Validation error:&quot;, error);&#10;            toast.error(&quot;Please check all required fields&quot;);&#10;            return false;&#10;        }&#10;    };&#10;&#10;    const validateTiers = async () =&gt; {&#10;        try {&#10;            // Get tiers data&#10;            const values = methods.getValues();&#10;            const tiersData = { tiers: values.tiers || [] };&#10;            &#10;            // Validate with Zod schema&#10;            const result = tiersSchema.safeParse(tiersData);&#10;            &#10;            if (!result.success) {&#10;                // Show validation errors&#10;                result.error.errors.forEach(err =&gt; {&#10;                    toast.error(`${err.message}`);&#10;                });&#10;                return false;&#10;            }&#10;            &#10;            return true;&#10;        } catch (error: any) {&#10;            console.error(&quot;Tier validation error:&quot;, error);&#10;            toast.error(&quot;Please add at least one tier with valid information&quot;);&#10;            return false;&#10;        }&#10;    };&#10;&#10;    const onNext = async () =&gt; {&#10;        let isValid = false;&#10;        &#10;        if (step === 1) {&#10;            isValid = await validateCoreDetails();&#10;        } else if (step === 2) {&#10;            isValid = await validateTiers();&#10;        } else {&#10;            // For future steps that don't have validation yet&#10;            isValid = true;&#10;        }&#10;&#10;        if (isValid) {&#10;            setStep(s =&gt; Math.min(totalSteps, s + 1));&#10;        }&#10;    };&#10;&#10;    const onPrev = () =&gt; setStep(s =&gt; Math.max(1, s - 1));&#10;&#10;    const onSubmit = async (data: CreateEventRequest) =&gt; {&#10;        // Perform final validation before submission&#10;        let isValid = true;&#10;        &#10;        // Validate the current step first&#10;        if (step === 1) {&#10;            isValid = await validateCoreDetails();&#10;        } else if (step === 2) {&#10;            isValid = await validateTiers();&#10;        }&#10;        &#10;        if (isValid) {&#10;            console.log(&quot;Final Assembled Form Data:&quot;, data);&#10;            console.log(&quot;Final Cover Files:&quot;, coverFiles);&#10;            // Here you would call your createEvent API action&#10;            toast.success(&quot;Event submitted for approval!&quot;);&#10;        }&#10;    };&#10;&#10;    const renderStep = () =&gt; {&#10;        switch (step) {&#10;            case 1:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;            case 2:&#10;                return &lt;TiersStep/&gt;;&#10;            // Add cases for other steps here&#10;            default:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;flex min-h-screen bg-muted/40&quot;&gt;&#10;            &lt;WizardSidebar currentStep={step} steps={steps}/&gt;&#10;            &lt;main className=&quot;flex-1 p-4 md:p-8 overflow-y-auto ml-72&quot;&gt;&#10;                &lt;div className=&quot;max-w-4xl mx-auto&quot;&gt;&#10;                    &lt;div className=&quot;mb-8&quot;&gt;&#10;                        &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Step {step} of {totalSteps}&lt;/p&gt;&#10;                        &lt;Progress value={(step / totalSteps) * 100} className=&quot;mt-2&quot;/&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* ✅ The FormProvider broadcasts the form state to all children */}&#10;                    &lt;FormProvider {...methods}&gt;&#10;                        &lt;form onSubmit={methods.handleSubmit(onSubmit)}&gt;&#10;                            {renderStep()}&#10;&#10;                            &lt;div className=&quot;flex justify-between mt-8&quot;&gt;&#10;                                &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; onClick={onPrev} disabled={step === 1}&gt;&#10;                                    Previous&#10;                                &lt;/Button&gt;&#10;                                {step &lt; totalSteps ? (&#10;                                    &lt;Button type=&quot;button&quot; onClick={onNext}&gt;&#10;                                        Next&#10;                                    &lt;/Button&gt;&#10;                                ) : (&#10;                                    &lt;Button type=&quot;submit&quot;&gt;&#10;                                        Submit for Approval&#10;                                    &lt;/Button&gt;&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        &lt;/form&gt;&#10;                    &lt;/FormProvider&gt;&#10;                &lt;/div&gt;&#10;            &lt;/main&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/providers/LimitProvider.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/providers/LimitProvider.ts" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, {createContext, useContext, useState, useEffect, ReactNode, useMemo} from 'react';&#10;import {useAuth} from '@/providers/AuthProvider';&#10;import {getAppConfiguration} from '@/lib/actions/configActions';&#10;import {AppConfig, TierLimitDetails, TierName} from '@/types/config';&#10;&#10;// Define the shape of the context&#10;interface LimitContextType {&#10;    config: AppConfig | null;&#10;    isLoading: boolean;&#10;    error: string | null;&#10;    currentUserTier: TierName;&#10;    currentUserTierLimits: TierLimitDetails | null;&#10;    getLimitsForTier: (tier: TierName) =&gt; TierLimitDetails | null;&#10;}&#10;&#10;const LimitContext = createContext&lt;LimitContextType | undefined&gt;(undefined);&#10;&#10;export const LimitProvider = ({children}: { children: ReactNode }) =&gt; {&#10;    const {keycloak} = useAuth();&#10;    const [config, setConfig] = useState&lt;AppConfig | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    // Fetch the entire configuration on initial application load&#10;    useEffect(() =&gt; {&#10;        const fetchConfig = async () =&gt; {&#10;            try {&#10;                const appConfig = await getAppConfiguration();&#10;                setConfig(appConfig);&#10;            } catch (err) {&#10;                setError('Failed to load application configuration. Some features may be unavailable.');&#10;                console.error(err);&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;        fetchConfig();&#10;    }, []);&#10;&#10;    // A memoized helper to get the current user's highest tier from their JWT&#10;    const currentUserTier = useMemo((): TierName =&gt; {&#10;        if (!keycloak?.tokenParsed?.user_groups || !Array.isArray(keycloak.tokenParsed.user_groups)) return 'FREE';&#10;&#10;        const userGroups: string[] = keycloak.tokenParsed.user_groups;&#10;        let highestTier: TierName = 'FREE';&#10;        let maxLevel = 0;&#10;&#10;        const tierLevels: Record&lt;TierName, number&gt; = {FREE: 0, PRO: 1, ENTERPRISE: 2};&#10;&#10;        userGroups.forEach(group =&gt; {&#10;            if (group.startsWith('/Tiers/')) {&#10;                const tierName = group.substring('/Tiers/'.length).toUpperCase() as TierName;&#10;                if (tierLevels[tierName] !== undefined &amp;&amp; tierLevels[tierName] &gt; maxLevel) {&#10;                    maxLevel = tierLevels[tierName];&#10;                    highestTier = tierName;&#10;                }&#10;            }&#10;        });&#10;        return highestTier;&#10;    }, [keycloak]);&#10;&#10;    // A memoized value for the current user's specific limits, derived from the full config&#10;    const currentUserTierLimits = useMemo(() =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[currentUserTier] || config.tierLimits.FREE;&#10;    }, [config, currentUserTier]);&#10;&#10;    // A function to get limits for any specified tier (useful for upgrade pages)&#10;    const getLimitsForTier = (tier: TierName): TierLimitDetails | null =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[tier] || null;&#10;    };&#10;&#10;    const value = {config, isLoading, error, currentUserTier, currentUserTierLimits, getLimitsForTier};&#10;&#10;    return (&#10;        &lt;LimitContext.Provider value={value}&gt;&#10;            {children}&#10;        &lt;/LimitContext.Provider&gt;&#10;    );&#10;};&#10;&#10;// The custom hook to easily access the limits from any component&#10;export const useLimits = (): LimitContextType =&gt; {&#10;    const context = useContext(LimitContext);&#10;    if (context === undefined) {&#10;        throw new Error('useLimits must be used within a LimitProvider');&#10;    }&#10;    return context;&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, {createContext, useContext, useState, useEffect, ReactNode, useMemo} from 'react';&#10;import {useAuth} from '@/providers/AuthProvider';&#10;import {getAppConfiguration} from '@/lib/actions/configActions';&#10;import {AppConfig, TierLimitDetails, TierName} from '@/types/config';&#10;&#10;// Define the shape of the context&#10;interface LimitContextType {&#10;    config: AppConfig | null;&#10;    isLoading: boolean;&#10;    error: string | null;&#10;    currentUserTier: TierName;&#10;    currentUserTierLimits: TierLimitDetails | null;&#10;    getLimitsForTier: (tier: TierName) =&gt; TierLimitDetails | null;&#10;}&#10;&#10;const LimitContext = createContext&lt;LimitContextType | undefined&gt;(undefined);&#10;&#10;export const LimitProvider = ({children}: { children: ReactNode }) =&gt; {&#10;    const {keycloak} = useAuth();&#10;    const [config, setConfig] = useState&lt;AppConfig | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    // Fetch the entire configuration on initial application load&#10;    useEffect(() =&gt; {&#10;        const fetchConfig = async () =&gt; {&#10;            try {&#10;                const appConfig = await getAppConfiguration();&#10;                setConfig(appConfig);&#10;            } catch (err) {&#10;                setError('Failed to load application configuration. Some features may be unavailable.');&#10;                console.error(err);&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;        fetchConfig();&#10;    }, []);&#10;&#10;    // A memoized helper to get the current user's highest tier from their JWT&#10;    const currentUserTier = useMemo((): TierName =&gt; {&#10;        if (!keycloak?.tokenParsed?.user_groups || !Array.isArray(keycloak.tokenParsed.user_groups)) return 'FREE';&#10;&#10;        const userGroups: string[] = keycloak.tokenParsed.user_groups;&#10;        let highestTier: TierName = 'FREE';&#10;        let maxLevel = 0;&#10;&#10;        const tierLevels: Record&lt;TierName, number&gt; = {FREE: 0, PRO: 1, ENTERPRISE: 2};&#10;&#10;        userGroups.forEach(group =&gt; {&#10;            if (group.startsWith('/Tiers/')) {&#10;                const tierName = group.substring('/Tiers/'.length).toUpperCase() as TierName;&#10;                if (tierLevels[tierName] !== undefined &amp;&amp; tierLevels[tierName] &gt; maxLevel) {&#10;                    maxLevel = tierLevels[tierName];&#10;                    highestTier = tierName;&#10;                }&#10;            }&#10;        });&#10;        return highestTier;&#10;    }, [keycloak]);&#10;&#10;    // A memoized value for the current user's specific limits, derived from the full config&#10;    const currentUserTierLimits = useMemo(() =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[currentUserTier] || config.tierLimits.FREE;&#10;    }, [config, currentUserTier]);&#10;&#10;    // A function to get limits for any specified tier (useful for upgrade pages)&#10;    const getLimitsForTier = (tier: TierName): TierLimitDetails | null =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[tier] || null;&#10;    };&#10;&#10;    const value = {config, isLoading, error, currentUserTier, currentUserTierLimits, getLimitsForTier};&#10;&#10;    return React.createElement(&#10;        LimitContext.Provider,&#10;        { value },&#10;        children&#10;    );&#10;};&#10;&#10;// The custom hook to easily access the limits from any component&#10;export const useLimits = (): LimitContextType =&gt; {&#10;    const context = useContext(LimitContext);&#10;    if (context === undefined) {&#10;        throw new Error('useLimits must be used within a LimitProvider');&#10;    }&#10;    return context;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>