<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/seating/_components/DraggableBlock.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/seating/_components/DraggableBlock.tsx" />
              <option name="originalContent" value="import {useDraggable} from &quot;@dnd-kit/core&quot;;&#10;import {GripVertical, Settings} from &quot;lucide-react&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {CSS} from '@dnd-kit/utilities';&#10;import {getRowIndex, getRowLabel} from &quot;@/app/manage/organization/[organization_id]/seating/create/_lib/_utils&quot;;&#10;import {LayoutBlock} from &quot;@/types/seating-layout&quot;;&#10;&#10;&#10;export function DraggableBlock({ block, onSelect }: { block: LayoutBlock; onSelect: (block: LayoutBlock) =&gt; void; }) {&#10;    const { attributes, listeners, setNodeRef, transform } = useDraggable({&#10;        id: block.id,&#10;    });&#10;&#10;    const style = {&#10;        transform: CSS.Translate.toString(transform),&#10;        left: block.position.x,&#10;        top: block.position.y,&#10;    };&#10;&#10;    const renderSeats = () =&gt; {&#10;        // This type guard ensures that for 'seated_grid', rows and columns are numbers.&#10;        if (block.type !== 'seated_grid' || !block.rows || !block.columns) {&#10;            return null;&#10;        }&#10;&#10;        // ✅ By destructuring here, TypeScript correctly infers the narrowed types.&#10;        const { rows, columns, startRowLabel, startColumnLabel } = block;&#10;&#10;        const startRowIndex = getRowIndex(startRowLabel || 'A');&#10;        const startCol = startColumnLabel || 1;&#10;&#10;        return (&#10;            &lt;div className=&quot;grid gap-2 mt-2 p-2 bg-muted/50 rounded-md&quot; style={{ gridTemplateColumns: `repeat(${columns}, minmax(0, 1fr))` }}&gt;&#10;                {Array.from({ length: rows }).map((_, rowIndex) =&gt; (&#10;                    Array.from({ length: columns }).map((_, colIndex) =&gt; (&#10;                        &lt;div key={`${rowIndex}-${colIndex}`} className=&quot;w-3.5 h-3.5 flex items-center justify-center bg-muted-foreground/50 rounded-full text-xs text-muted-foreground border&quot; title={`${getRowLabel(startRowIndex + rowIndex)}${startCol + colIndex}`}&gt;&#10;                            {colIndex === 0 &amp;&amp; &lt;span className=&quot;absolute -left-5 text-xs&quot;&gt;{getRowLabel(startRowIndex + rowIndex)}&lt;/span&gt;}&#10;                            {rowIndex === 0 &amp;&amp; &lt;span className=&quot;absolute -top-5 text-xs&quot;&gt;{startCol + colIndex}&lt;/span&gt;}&#10;                        &lt;/div&gt;&#10;                    ))&#10;                ))}&#10;            &lt;/div&gt;&#10;        );&#10;    };&#10;&#10;    return (&#10;        &lt;div&#10;            ref={setNodeRef}&#10;            style={style}&#10;            className=&quot;absolute p-3 bg-card border rounded-lg shadow-md cursor-grab active:cursor-grabbing&quot;&#10;        &gt;&#10;            &lt;div className=&quot;flex items-start gap-2&quot;&gt;&#10;                &lt;GripVertical {...listeners} {...attributes} className=&quot;text-muted-foreground mt-1&quot; /&gt;&#10;                &lt;div className=&quot;flex flex-col text-center&quot;&gt;&#10;                    &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#10;                    &lt;span className=&quot;text-xs text-muted-foreground&quot;&gt;&#10;                        {block.type === 'seated_grid' ? `${block.rows}x${block.columns}` : null}&#10;                    &lt;/span&gt;&#10;                    {renderSeats()}&#10;                &lt;/div&gt;&#10;                &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; className=&quot;h-6 w-6&quot; onClick={() =&gt; onSelect(block)}&gt;&#10;                    &lt;Settings className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="import {useDraggable, DragEndEvent} from &quot;@dnd-kit/core&quot;;&#13;&#10;import {GripVertical, Settings} from &quot;lucide-react&quot;;&#13;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#13;&#10;import {CSS} from '@dnd-kit/utilities';&#13;&#10;import {getRowIndex, getRowLabel} from &quot;@/app/manage/organization/[organization_id]/seating/create/_lib/_utils&quot;;&#13;&#10;import {LayoutBlock} from &quot;@/types/seating-layout&quot;;&#13;&#10;&#13;&#10;&#13;&#10;export function DraggableBlock({ block, onSelect }: { block: LayoutBlock; onSelect: (block: LayoutBlock) =&gt; void; }) {&#13;&#10;    const { attributes, listeners, setNodeRef, transform } = useDraggable({&#13;&#10;        id: block.id,&#13;&#10;    });&#13;&#10;&#13;&#10;    const style = {&#13;&#10;        transform: CSS.Translate.toString(transform),&#13;&#10;        left: block.position.x,&#13;&#10;        top: block.position.y,&#13;&#10;    };&#13;&#10;&#13;&#10;    const renderSeats = () =&gt; {&#13;&#10;        // This type guard ensures that for 'seated_grid', rows and columns are numbers.&#13;&#10;        if (block.type !== 'seated_grid' || !block.rows || !block.columns) {&#13;&#10;            return null;&#13;&#10;        }&#13;&#10;&#13;&#10;        // ✅ By destructuring here, TypeScript correctly infers the narrowed types.&#13;&#10;        const { rows, columns, startRowLabel, startColumnLabel } = block;&#13;&#10;&#13;&#10;        const startRowIndex = getRowIndex(startRowLabel || 'A');&#13;&#10;        const startCol = startColumnLabel || 1;&#13;&#10;&#13;&#10;        return (&#13;&#10;            &lt;div className=&quot;grid gap-2 mt-2 p-2 bg-muted/50 rounded-md&quot; style={{ gridTemplateColumns: `repeat(${columns}, minmax(0, 1fr))` }}&gt;&#13;&#10;                {Array.from({ length: rows }).map((_, rowIndex) =&gt; (&#13;&#10;                    Array.from({ length: columns }).map((_, colIndex) =&gt; (&#13;&#10;                        &lt;div key={`${rowIndex}-${colIndex}`} className=&quot;w-3.5 h-3.5 flex items-center justify-center bg-muted-foreground/50 rounded-full text-xs text-muted-foreground border&quot; title={`${getRowLabel(startRowIndex + rowIndex)}${startCol + colIndex}`}&gt;&#13;&#10;                            {colIndex === 0 &amp;&amp; &lt;span className=&quot;absolute -left-5 text-xs&quot;&gt;{getRowLabel(startRowIndex + rowIndex)}&lt;/span&gt;}&#13;&#10;                            {rowIndex === 0 &amp;&amp; &lt;span className=&quot;absolute -top-5 text-xs&quot;&gt;{startCol + colIndex}&lt;/span&gt;}&#13;&#10;                        &lt;/div&gt;&#13;&#10;                    ))&#13;&#10;                ))}&#13;&#10;            &lt;/div&gt;&#13;&#10;        );&#13;&#10;    };&#13;&#10;&#13;&#10;    return (&#13;&#10;        &lt;div&#13;&#10;            ref={setNodeRef}&#13;&#10;            style={style}&#13;&#10;            className=&quot;absolute p-3 bg-card border rounded-lg shadow-md cursor-grab active:cursor-grabbing&quot;&#13;&#10;        &gt;&#13;&#10;            &lt;div className=&quot;flex items-start gap-2&quot;&gt;&#13;&#10;                &lt;GripVertical {...listeners} {...attributes} className=&quot;text-muted-foreground mt-1&quot; /&gt;&#13;&#10;                &lt;div className=&quot;flex flex-col text-center&quot;&gt;&#13;&#10;                    &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#13;&#10;                    &lt;span className=&quot;text-xs text-muted-foreground&quot;&gt;&#13;&#10;                        {block.type === 'seated_grid' ? `${block.rows}x${block.columns}` : null}&#13;&#10;                    &lt;/span&gt;&#13;&#10;                    {renderSeats()}&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; className=&quot;h-6 w-6&quot; onClick={() =&gt; onSelect(block)}&gt;&#13;&#10;                    &lt;Settings className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;                &lt;/Button&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;    );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/seating/_components/LayoutEditor.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/seating/_components/LayoutEditor.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import { useState, useEffect } from 'react';&#10;import {DndContext, useDroppable} from '@dnd-kit/core';&#10;import { restrictToParentElement } from '@dnd-kit/modifiers';&#10;import 'react-resizable/css/styles.css';&#10;&#10;import { LayoutBlock, BlockType, LayoutData } from '@/types/seating-layout';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { Label } from '@/components/ui/label';&#10;import { Plus, Save, ZoomIn, ZoomOut } from 'lucide-react';&#10;&#10;import { DraggableBlock } from './DraggableBlock';&#10;import { ResizableDraggableBlock } from './ResizableDraggableBlock';&#10;import { SettingsPanel } from './SettingsPanel';&#10;&#10;interface LayoutEditorProps {&#10;    initialData?: LayoutData;&#10;    onSave: (layoutData: LayoutData) =&gt; Promise&lt;any&gt;;&#10;    isLoading?: boolean;&#10;}&#10;&#10;export function LayoutEditor({ initialData, onSave, isLoading = false }: LayoutEditorProps) {&#10;    const [blocks, setBlocks] = useState&lt;LayoutBlock[]&gt;([]);&#10;    const [selectedBlock, setSelectedBlock] = useState&lt;LayoutBlock | null&gt;(null);&#10;    const [zoomLevel, setZoomLevel] = useState(1);&#10;    const [layoutName, setLayoutName] = useState('Untitled Layout');&#10;    const { setNodeRef } = useDroppable({ id: 'canvas' });&#10;&#10;    useEffect(() =&gt; {&#10;        if (initialData) {&#10;            setLayoutName(initialData.name);&#10;            setBlocks(initialData.layout.blocks);&#10;        }&#10;    }, [initialData]);&#10;&#10;    const minZoom = 0.5;&#10;    const maxZoom = 2;&#10;&#10;    const addNewBlock = (type: BlockType) =&gt; {&#10;        const newBlock: LayoutBlock = {&#10;            id: `temp_${Date.now()}`, // Temporary ID&#10;            name: `New ${type.replace('_', ' ')}`,&#10;            type,&#10;            position: { x: 50, y: 50 },&#10;            rows: type === 'seated_grid' ? 5 : undefined,&#10;            columns: type === 'seated_grid' ? 10 : undefined,&#10;            startRowLabel: type === 'seated_grid' ? 'A' : undefined,&#10;            startColumnLabel: type === 'seated_grid' ? 1 : undefined,&#10;            capacity: type === 'standing_capacity' ? 100 : undefined,&#10;            width: type === 'standing_capacity' || type === 'non_sellable' ? 200 : undefined,&#10;            height: type === 'standing_capacity' || type === 'non_sellable' ? 100 : undefined,&#10;        };&#10;        setBlocks(prev =&gt; [...prev, newBlock]);&#10;    };&#10;&#10;    const handleDragEnd = (event: any) =&gt; {&#10;        const { active, delta } = event;&#10;        setBlocks(prevBlocks =&gt;&#10;            prevBlocks.map(block =&gt;&#10;                block.id === active.id&#10;                    ? { ...block, position: { x: block.position.x + delta.x / zoomLevel, y: block.position.y + delta.y / zoomLevel } }&#10;                    : block&#10;            )&#10;        );&#10;    };&#10;&#10;    const handleResize = (blockId: string, size: { width: number; height: number }) =&gt; {&#10;        setBlocks(prevBlocks =&gt;&#10;            prevBlocks.map(block =&gt;&#10;                block.id === blockId ? { ...block, width: size.width, height: size.height } : block&#10;            )&#10;        );&#10;    };&#10;&#10;    const handleUpdateBlock = (updatedBlock: LayoutBlock) =&gt; {&#10;        setBlocks(prev =&gt; prev.map(b =&gt; b.id === updatedBlock.id ? updatedBlock : b));&#10;    };&#10;&#10;    const handleDeleteBlock = (blockId: string) =&gt; {&#10;        setBlocks(prev =&gt; prev.filter(b =&gt; b.id !== blockId));&#10;        setSelectedBlock(null);&#10;    };&#10;&#10;    const handleZoomIn = () =&gt; setZoomLevel(prev =&gt; Math.min(prev + 0.1, maxZoom));&#10;    const handleZoomOut = () =&gt; setZoomLevel(prev =&gt; Math.max(prev - 0.1, minZoom));&#10;&#10;    const handleSaveLayout = () =&gt; {&#10;        if (blocks.length === 0) {&#10;            // You might want to use a toast here as well&#10;            console.log(&quot;Cannot save an empty layout.&quot;);&#10;            return;&#10;        }&#10;&#10;        const minX = Math.min(...blocks.map(b =&gt; b.position.x));&#10;        const minY = Math.min(...blocks.map(b =&gt; b.position.y));&#10;&#10;        const normalizedBlocks = blocks.map(block =&gt; ({&#10;            ...block,&#10;            position: {&#10;                x: block.position.x - minX,&#10;                y: block.position.y - minY,&#10;            },&#10;        }));&#10;&#10;        const layoutData: LayoutData = {&#10;            name: layoutName,&#10;            layout: {&#10;                blocks: normalizedBlocks,&#10;            },&#10;        };&#10;&#10;        onSave(layoutData);&#10;    };&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;style&gt;{`&#10;                .react-resizable-handle {&#10;                    background: hsl(var(--primary));&#10;                    width: 10px;&#10;                    height: 10px;&#10;                    position: absolute;&#10;                    bottom: 0;&#10;                    right: 0;&#10;                    padding: 0;&#10;                    border-radius: 99px;&#10;                    border: 2px solid hsl(var(--background));&#10;                }&#10;            `}&lt;/style&gt;&#10;            &lt;DndContext onDragEnd={handleDragEnd} modifiers={[restrictToParentElement]}&gt;&#10;                &lt;div className=&quot;flex h-full bg-muted/40&quot;&gt;&#10;                    {/* Toolbox */}&#10;                    &lt;aside className=&quot;w-64 border-r bg-background p-4 flex flex-col&quot;&gt;&#10;                        &lt;div className=&quot;flex-grow space-y-4&quot;&gt;&#10;                            &lt;div className=&quot;space-y-2&quot;&gt;&#10;                                &lt;Label htmlFor=&quot;layout-name&quot;&gt;Layout Name&lt;/Label&gt;&#10;                                &lt;Input&#10;                                    id=&quot;layout-name&quot;&#10;                                    value={layoutName}&#10;                                    onChange={(e) =&gt; setLayoutName(e.target.value)}&#10;                                    placeholder=&quot;e.g., Main Auditorium&quot;&#10;                                /&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;h2 className=&quot;text-lg font-semibold pt-4 border-t&quot;&gt;Toolbox&lt;/h2&gt;&#10;                            &lt;Button className=&quot;w-full justify-start&quot; variant=&quot;ghost&quot; onClick={() =&gt; addNewBlock('seated_grid')}&gt;&#10;                                &lt;Plus className=&quot;mr-2 h-4 w-4&quot; /&gt; Seated Block&#10;                            &lt;/Button&gt;&#10;                            &lt;Button className=&quot;w-full justify-start&quot; variant=&quot;ghost&quot; onClick={() =&gt; addNewBlock('standing_capacity')}&gt;&#10;                                &lt;Plus className=&quot;mr-2 h-4 w-4&quot; /&gt; Capacity Block&#10;                            &lt;/Button&gt;&#10;                            &lt;Button className=&quot;w-full justify-start&quot; variant=&quot;ghost&quot; onClick={() =&gt; addNewBlock('non_sellable')}&gt;&#10;                                &lt;Plus className=&quot;mr-2 h-4 w-4&quot; /&gt; Non-Sellable&#10;                            &lt;/Button&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;mt-auto&quot;&gt;&#10;                            &lt;Button className=&quot;w-full&quot; onClick={handleSaveLayout} disabled={isLoading}&gt;&#10;                                &lt;Save className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                                {isLoading ? 'Saving...' : 'Save Layout'}&#10;                            &lt;/Button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/aside&gt;&#10;&#10;                    {/* Canvas Wrapper */}&#10;                    &lt;div className=&quot;flex-1 relative flex items-center justify-center p-8&quot;&gt;&#10;                        &lt;div className=&quot;w-full h-full max-w-5xl max-h-[80vh] relative&quot;&gt;&#10;                            &lt;div className=&quot;w-full h-full bg-background border rounded-lg shadow-lg overflow-auto relative&quot;&gt;&#10;                                &lt;main&#10;                                    ref={setNodeRef}&#10;                                    className=&quot;relative&quot;&#10;                                    style={{&#10;                                        width: `${100 / minZoom}%`,&#10;                                        height: `${100 / minZoom}%`,&#10;                                        transform: `scale(${zoomLevel})`,&#10;                                        transformOrigin: 'top left',&#10;                                    }}&#10;                                &gt;&#10;                                    {blocks.map(block =&gt; {&#10;                                        if (block.type === 'standing_capacity' || block.type === 'non_sellable') {&#10;                                            return &lt;ResizableDraggableBlock key={block.id} block={block} onSelect={setSelectedBlock} onResize={handleResize} /&gt;&#10;                                        }&#10;                                        return &lt;DraggableBlock key={block.id} block={block} onSelect={setSelectedBlock} /&gt;&#10;                                    })}&#10;                                &lt;/main&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;div className=&quot;absolute bottom-4 right-4 flex items-center gap-2 bg-background p-2 rounded-lg border shadow-md&quot;&gt;&#10;                                &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; onClick={handleZoomOut}&gt;&#10;                                    &lt;ZoomOut className=&quot;h-4 w-4&quot; /&gt;&#10;                                &lt;/Button&gt;&#10;                                &lt;span className=&quot;text-sm font-medium w-12 text-center&quot;&gt;&#10;                                    {Math.round(zoomLevel * 100)}%&#10;                                &lt;/span&gt;&#10;                                &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; onClick={handleZoomIn}&gt;&#10;                                    &lt;ZoomIn className=&quot;h-4 w-4&quot; /&gt;&#10;                                &lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Settings Panel */}&#10;                    &lt;SettingsPanel&#10;                        selectedBlock={selectedBlock}&#10;                        onUpdate={handleUpdateBlock}&#10;                        onDelete={handleDeleteBlock}&#10;                        onClose={() =&gt; setSelectedBlock(null)}&#10;                    /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/DndContext&gt;&#10;        &lt;/&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import { useState, useEffect } from 'react';&#10;import {DndContext, useDroppable} from '@dnd-kit/core';&#10;import { restrictToParentElement } from '@dnd-kit/modifiers';&#10;import 'react-resizable/css/styles.css';&#10;&#10;import { LayoutBlock, BlockType, LayoutData } from '@/types/seating-layout';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { Label } from '@/components/ui/label';&#10;import { Plus, Save, ZoomIn, ZoomOut } from 'lucide-react';&#10;&#10;import { DraggableBlock } from './DraggableBlock';&#10;import { ResizableDraggableBlock } from './ResizableDraggableBlock';&#10;import { SettingsPanel } from './SettingsPanel';&#10;&#10;interface LayoutEditorProps {&#10;    initialData?: LayoutData;&#10;    onSave: (layoutData: LayoutData) =&gt; Promise&lt;any&gt;;&#10;    isLoading?: boolean;&#10;}&#10;&#10;export function LayoutEditor({ initialData, onSave, isLoading = false }: LayoutEditorProps) {&#10;    const [blocks, setBlocks] = useState&lt;LayoutBlock[]&gt;([]);&#10;    const [selectedBlock, setSelectedBlock] = useState&lt;LayoutBlock | null&gt;(null);&#10;    const [zoomLevel, setZoomLevel] = useState(1);&#10;    const [layoutName, setLayoutName] = useState('Untitled Layout');&#10;    const { setNodeRef } = useDroppable({ id: 'canvas' });&#10;&#10;    useEffect(() =&gt; {&#10;        if (initialData) {&#10;            setLayoutName(initialData.name);&#10;            setBlocks(initialData.layout.blocks);&#10;        }&#10;    }, [initialData]);&#10;&#10;    const minZoom = 0.5;&#10;    const maxZoom = 2;&#10;&#10;    const addNewBlock = (type: BlockType) =&gt; {&#10;        const newBlock: LayoutBlock = {&#10;            id: `temp_${Date.now()}`, // Temporary ID&#10;            name: `New ${type.replace('_', ' ')}`,&#10;            type,&#10;            position: { x: 50, y: 50 },&#10;            rows: type === 'seated_grid' ? 5 : undefined,&#10;            columns: type === 'seated_grid' ? 10 : undefined,&#10;            startRowLabel: type === 'seated_grid' ? 'A' : undefined,&#10;            startColumnLabel: type === 'seated_grid' ? 1 : undefined,&#10;            capacity: type === 'standing_capacity' ? 100 : undefined,&#10;            width: type === 'standing_capacity' || type === 'non_sellable' ? 200 : undefined,&#10;            height: type === 'standing_capacity' || type === 'non_sellable' ? 100 : undefined,&#10;        };&#10;        setBlocks(prev =&gt; [...prev, newBlock]);&#10;    };&#10;&#10;    const handleDragEnd = (event: any) =&gt; {&#10;        const { active, delta } = event;&#10;        setBlocks(prevBlocks =&gt;&#10;            prevBlocks.map(block =&gt;&#10;                block.id === active.id&#10;                    ? { ...block, position: { x: block.position.x + delta.x / zoomLevel, y: block.position.y + delta.y / zoomLevel } }&#10;                    : block&#10;            )&#10;        );&#10;    };&#10;&#10;    const handleResize = (blockId: string, size: { width: number; height: number }) =&gt; {&#10;        setBlocks(prevBlocks =&gt;&#10;            prevBlocks.map(block =&gt;&#10;                block.id === blockId ? { ...block, width: size.width, height: size.height } : block&#10;            )&#10;        );&#10;    };&#10;&#10;    const handleUpdateBlock = (updatedBlock: LayoutBlock) =&gt; {&#10;        setBlocks(prev =&gt; prev.map(b =&gt; b.id === updatedBlock.id ? updatedBlock : b));&#10;    };&#10;&#10;    const handleDeleteBlock = (blockId: string) =&gt; {&#10;        setBlocks(prev =&gt; prev.filter(b =&gt; b.id !== blockId));&#10;        setSelectedBlock(null);&#10;    };&#10;&#10;    const handleZoomIn = () =&gt; setZoomLevel(prev =&gt; Math.min(prev + 0.1, maxZoom));&#10;    const handleZoomOut = () =&gt; setZoomLevel(prev =&gt; Math.max(prev - 0.1, minZoom));&#10;&#10;    const handleSaveLayout = () =&gt; {&#10;        if (blocks.length === 0) {&#10;            // You might want to use a toast here as well&#10;            console.log(&quot;Cannot save an empty layout.&quot;);&#10;            return;&#10;        }&#10;&#10;        // No need to normalize coordinates, backend will handle it&#10;        const layoutData: LayoutData = {&#10;            name: layoutName,&#10;            layout: {&#10;                blocks: blocks,&#10;            },&#10;        };&#10;&#10;        onSave(layoutData);&#10;    };&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;style&gt;{`&#10;                .react-resizable-handle {&#10;                    background: hsl(var(--primary));&#10;                    width: 10px;&#10;                    height: 10px;&#10;                    position: absolute;&#10;                    bottom: 0;&#10;                    right: 0;&#10;                    padding: 0;&#10;                    border-radius: 99px;&#10;                    border: 2px solid hsl(var(--background));&#10;                }&#10;            `}&lt;/style&gt;&#10;            &lt;DndContext onDragEnd={handleDragEnd} modifiers={[restrictToParentElement]}&gt;&#10;                &lt;div className=&quot;flex h-full bg-muted/40&quot;&gt;&#10;                    {/* Toolbox */}&#10;                    &lt;aside className=&quot;w-64 border-r bg-background p-4 flex flex-col&quot;&gt;&#10;                        &lt;div className=&quot;flex-grow space-y-4&quot;&gt;&#10;                            &lt;div className=&quot;space-y-2&quot;&gt;&#10;                                &lt;Label htmlFor=&quot;layout-name&quot;&gt;Layout Name&lt;/Label&gt;&#10;                                &lt;Input&#10;                                    id=&quot;layout-name&quot;&#10;                                    value={layoutName}&#10;                                    onChange={(e) =&gt; setLayoutName(e.target.value)}&#10;                                    placeholder=&quot;e.g., Main Auditorium&quot;&#10;                                /&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;h2 className=&quot;text-lg font-semibold pt-4 border-t&quot;&gt;Toolbox&lt;/h2&gt;&#10;                            &lt;Button className=&quot;w-full justify-start&quot; variant=&quot;ghost&quot; onClick={() =&gt; addNewBlock('seated_grid')}&gt;&#10;                                &lt;Plus className=&quot;mr-2 h-4 w-4&quot; /&gt; Seated Block&#10;                            &lt;/Button&gt;&#10;                            &lt;Button className=&quot;w-full justify-start&quot; variant=&quot;ghost&quot; onClick={() =&gt; addNewBlock('standing_capacity')}&gt;&#10;                                &lt;Plus className=&quot;mr-2 h-4 w-4&quot; /&gt; Capacity Block&#10;                            &lt;/Button&gt;&#10;                            &lt;Button className=&quot;w-full justify-start&quot; variant=&quot;ghost&quot; onClick={() =&gt; addNewBlock('non_sellable')}&gt;&#10;                                &lt;Plus className=&quot;mr-2 h-4 w-4&quot; /&gt; Non-Sellable&#10;                            &lt;/Button&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;mt-auto&quot;&gt;&#10;                            &lt;Button className=&quot;w-full&quot; onClick={handleSaveLayout} disabled={isLoading}&gt;&#10;                                &lt;Save className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                                {isLoading ? 'Saving...' : 'Save Layout'}&#10;                            &lt;/Button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/aside&gt;&#10;&#10;                    {/* Canvas Wrapper */}&#10;                    &lt;div className=&quot;flex-1 relative flex items-center justify-center p-8&quot;&gt;&#10;                        &lt;div className=&quot;w-full h-full max-w-5xl max-h-[80vh] relative&quot;&gt;&#10;                            &lt;div className=&quot;w-full h-full bg-background border rounded-lg shadow-lg overflow-auto relative&quot;&gt;&#10;                                &lt;main&#10;                                    ref={setNodeRef}&#10;                                    className=&quot;relative&quot;&#10;                                    style={{&#10;                                        width: `${100 / minZoom}%`,&#10;                                        height: `${100 / minZoom}%`,&#10;                                        transform: `scale(${zoomLevel})`,&#10;                                        transformOrigin: 'top left',&#10;                                    }}&#10;                                &gt;&#10;                                    {blocks.map(block =&gt; {&#10;                                        if (block.type === 'standing_capacity' || block.type === 'non_sellable') {&#10;                                            return &lt;ResizableDraggableBlock key={block.id} block={block} onSelect={setSelectedBlock} onResize={handleResize} /&gt;&#10;                                        }&#10;                                        return &lt;DraggableBlock key={block.id} block={block} onSelect={setSelectedBlock} /&gt;&#10;                                    })}&#10;                                &lt;/main&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;div className=&quot;absolute bottom-4 right-4 flex items-center gap-2 bg-background p-2 rounded-lg border shadow-md&quot;&gt;&#10;                                &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; onClick={handleZoomOut}&gt;&#10;                                    &lt;ZoomOut className=&quot;h-4 w-4&quot; /&gt;&#10;                                &lt;/Button&gt;&#10;                                &lt;span className=&quot;text-sm font-medium w-12 text-center&quot;&gt;&#10;                                    {Math.round(zoomLevel * 100)}%&#10;                                &lt;/span&gt;&#10;                                &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; onClick={handleZoomIn}&gt;&#10;                                    &lt;ZoomIn className=&quot;h-4 w-4&quot; /&gt;&#10;                                &lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Settings Panel */}&#10;                    &lt;SettingsPanel&#10;                        selectedBlock={selectedBlock}&#10;                        onUpdate={handleUpdateBlock}&#10;                        onDelete={handleDeleteBlock}&#10;                        onClose={() =&gt; setSelectedBlock(null)}&#10;                    /&gt;&#10;                &lt;/div&gt;&#10;            &lt;/DndContext&gt;&#10;        &lt;/&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/seating/_components/LayoutPreviewCard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/seating/_components/LayoutPreviewCard.tsx" />
              <option name="originalContent" value="import {LayoutBlock, SeatingLayoutTemplateResponse } from &quot;@/types/seating-layout&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;; // Changed from next/router to next/navigation&#10;import {useEffect, useState } from &quot;react&quot;;&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from &quot;@/components/ui/card&quot;;&#10;import {DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger} from &quot;@/components/ui/dropdown-menu&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {formatDistanceToNow} from &quot;date-fns&quot;;&#10;import {Edit, MoreVertical, Trash2} from &quot;lucide-react&quot;;&#10;&#10;interface LayoutPreviewCardProps {&#10;    layout: SeatingLayoutTemplateResponse;&#10;    onDelete: (id: string, name: string) =&gt; void;&#10;}&#10;&#10;export function LayoutPreviewCard({ layout, onDelete }: LayoutPreviewCardProps) {&#10;    const router = useRouter();&#10;    const [viewBox, setViewBox] = useState('0 0 100 100');&#10;    const [blocks, setBlocks] = useState&lt;LayoutBlock[]&gt;([]);&#10;&#10;    useEffect(() =&gt; {&#10;        const allBlocks = layout.layoutData.layout.blocks;&#10;        if (allBlocks.length === 0) return;&#10;&#10;        // Calculate bounding box of all blocks to center and scale the preview&#10;        let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;&#10;&#10;        allBlocks.forEach(block =&gt; {&#10;            minX = Math.min(minX, block.position.x);&#10;            minY = Math.min(minY, block.position.y);&#10;            maxX = Math.max(maxX, block.position.x + (block.width || 100));&#10;            maxY = Math.max(maxY, block.position.y + (block.height || 50));&#10;        });&#10;&#10;        const width = maxX - minX;&#10;        const height = maxY - minY;&#10;&#10;        setViewBox(`${minX} ${minY} ${width} ${height}`);&#10;        setBlocks(allBlocks);&#10;    }, [layout]);&#10;&#10;    return (&#10;        &lt;Card className=&quot;flex flex-col&quot;&gt;&#10;            &lt;CardHeader className=&quot;flex-row items-start justify-between&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;CardTitle&gt;{layout.name}&lt;/CardTitle&gt;&#10;                    &lt;CardDescription&gt;&#10;                        Updated {formatDistanceToNow(new Date(layout.updatedAt), { addSuffix: true })}&#10;                    &lt;/CardDescription&gt;&#10;                &lt;/div&gt;&#10;                &lt;DropdownMenu&gt;&#10;                    &lt;DropdownMenuTrigger asChild&gt;&#10;                        &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; className=&quot;h-8 w-8&quot;&gt;&#10;                            &lt;MoreVertical className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                    &lt;/DropdownMenuTrigger&gt;&#10;                    &lt;DropdownMenuContent align=&quot;end&quot;&gt;&#10;                        &lt;DropdownMenuItem onClick={() =&gt; router.push(`/manage/organization/${layout.organizationId}/seating/${layout.id}`)}&gt;&#10;                            &lt;Edit className=&quot;mr-2 h-4 w-4&quot; /&gt; Edit&#10;                        &lt;/DropdownMenuItem&gt;&#10;                        &lt;DropdownMenuItem&#10;                            className=&quot;text-destructive&quot;&#10;                            onSelect={() =&gt; onDelete(layout.id, layout.name)}&#10;                        &gt;&#10;                            &lt;Trash2 className=&quot;mr-2 h-4 w-4&quot; /&gt; Delete&#10;                        &lt;/DropdownMenuItem&gt;&#10;                    &lt;/DropdownMenuContent&gt;&#10;                &lt;/DropdownMenu&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;flex-grow flex items-center justify-center bg-muted/50 aspect-video&quot;&gt;&#10;                &lt;svg viewBox={viewBox} className=&quot;w-full h-full&quot;&gt;&#10;                    {blocks.map(block =&gt; (&#10;                        &lt;rect&#10;                            key={block.id}&#10;                            x={block.position.x}&#10;                            y={block.position.y}&#10;                            width={block.width || 100}&#10;                            height={block.height || 50}&#10;                            className=&quot;fill-primary/20 stroke-primary&quot;&#10;                            strokeWidth=&quot;2&quot;&#10;                        /&gt;&#10;                    ))}&#10;                &lt;/svg&gt;&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="import {LayoutBlock, SeatingLayoutTemplateResponse } from &quot;@/types/seating-layout&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;; // Changed from next/router to next/navigation&#10;import {useEffect, useState } from &quot;react&quot;;&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from &quot;@/components/ui/card&quot;;&#10;import {DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger} from &quot;@/components/ui/dropdown-menu&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {formatDistanceToNow} from &quot;date-fns&quot;;&#10;import {Edit, MoreVertical, Trash2} from &quot;lucide-react&quot;;&#10;&#10;interface LayoutPreviewCardProps {&#10;    layout: SeatingLayoutTemplateResponse;&#10;    onDelete: (id: string, name: string) =&gt; void;&#10;}&#10;&#10;export function LayoutPreviewCard({ layout, onDelete }: LayoutPreviewCardProps) {&#10;    const router = useRouter();&#10;    const [viewBox, setViewBox] = useState('0 0 100 100');&#10;    const [blocks, setBlocks] = useState&lt;LayoutBlock[]&gt;([]);&#10;&#10;    useEffect(() =&gt; {&#10;        const allBlocks = layout.layoutData.layout.blocks;&#10;        if (allBlocks.length === 0) return;&#10;&#10;        // Calculate bounding box of all blocks to center and scale the preview&#10;        let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;&#10;&#10;        allBlocks.forEach(block =&gt; {&#10;            minX = Math.min(minX, block.position.x);&#10;            minY = Math.min(minY, block.position.y);&#10;            maxX = Math.max(maxX, block.position.x + (block.width || 100));&#10;            maxY = Math.max(maxY, block.position.y + (block.height || 50));&#10;        });&#10;&#10;        const width = maxX - minX;&#10;        const height = maxY - minY;&#10;&#10;        setViewBox(`${minX} ${minY} ${width} ${height}`);&#10;        setBlocks(allBlocks);&#10;    }, [layout]);&#10;&#10;    return (&#10;        &lt;Card className=&quot;flex flex-col&quot;&gt;&#10;            &lt;CardHeader className=&quot;flex-row items-start justify-between&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;CardTitle&gt;{layout.name}&lt;/CardTitle&gt;&#10;                    &lt;CardDescription&gt;&#10;                        Updated {formatDistanceToNow(new Date(layout.updatedAt), { addSuffix: true })}&#10;                    &lt;/CardDescription&gt;&#10;                &lt;/div&gt;&#10;                &lt;DropdownMenu&gt;&#10;                    &lt;DropdownMenuTrigger asChild&gt;&#10;                        &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; className=&quot;h-8 w-8&quot;&gt;&#10;                            &lt;MoreVertical className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                    &lt;/DropdownMenuTrigger&gt;&#10;                    &lt;DropdownMenuContent align=&quot;end&quot;&gt;&#10;                        &lt;DropdownMenuItem onClick={() =&gt; router.push(`/manage/organization/${layout.organizationId}/seating/${layout.id}`)}&gt;&#10;                            &lt;Edit className=&quot;mr-2 h-4 w-4&quot; /&gt; Edit&#10;                        &lt;/DropdownMenuItem&gt;&#10;                        &lt;DropdownMenuItem&#10;                            className=&quot;text-destructive&quot;&#10;                            onSelect={() =&gt; onDelete(layout.id, layout.name)}&#10;                        &gt;&#10;                            &lt;Trash2 className=&quot;mr-2 h-4 w-4&quot; /&gt; Delete&#10;                        &lt;/DropdownMenuItem&gt;&#10;                    &lt;/DropdownMenuContent&gt;&#10;                &lt;/DropdownMenu&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;flex-grow flex items-center justify-center bg-muted/50 aspect-video&quot;&gt;&#10;                &lt;svg viewBox={viewBox} className=&quot;w-full h-full&quot;&gt;&#10;                    {blocks.map(block =&gt; (&#10;                        &lt;rect&#10;                            key={block.id}&#10;                            x={block.position.x}&#10;                            y={block.position.y}&#10;                            width={block.width || 100}&#10;                            height={block.height || 50}&#10;                            className=&quot;fill-primary/20 stroke-primary&quot;&#10;                            strokeWidth=&quot;2&quot;&#10;                        /&gt;&#10;                    ))}&#10;                &lt;/svg&gt;&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/seating/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/seating/page.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import {deleteSeatingLayoutTemplate, getSeatingLayoutTemplatesByOrg} from '@/lib/actions/seatingLayoutTemplateActions';&#10;import {PaginatedResponse, SeatingLayoutTemplateResponse} from '@/types/seating-layout';&#10;import {useParams} from 'next/navigation';&#10;&#10;import React, {useCallback, useEffect, useState} from 'react';&#10;import {toast} from 'sonner';&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import {PlusCircle} from 'lucide-react';&#10;import {Skeleton} from '@/components/ui/skeleton';&#10;import {&#10;    Pagination,&#10;    PaginationContent,&#10;    PaginationItem,&#10;    PaginationNext,&#10;    PaginationPrevious&#10;} from &quot;@/components/ui/pagination&quot;;&#10;import LayoutPreviewCard from &quot;@/app/manage/organization/[organization_id]/seating/_components/LayoutPreviewCard&quot;;&#10;&#10;export default function SeatingLayoutsPage() {&#10;    const params = useParams();&#10;    const organizationId = params.organization_id as string;&#10;&#10;    const [data, setData] = useState&lt;PaginatedResponse&lt;SeatingLayoutTemplateResponse&gt; | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [page, setPage] = useState(0);&#10;    const pageSize = 6;&#10;&#10;    const fetchLayouts = useCallback(async () =&gt; {&#10;        setIsLoading(true);&#10;        try {&#10;            const response = await getSeatingLayoutTemplatesByOrg(organizationId, page, pageSize);&#10;            setData(response);&#10;        } catch (error) {&#10;            console.error(&quot;Failed to fetch seating layouts:&quot;, error);&#10;            toast.error(&quot;Failed to fetch seating layouts.&quot;);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        fetchLayouts().then();&#10;    }, [fetchLayouts]), [organizationId, page]);&#10;&#10;    const handleDelete = (id: string, name: string) =&gt; {&#10;        toast.promise(deleteSeatingLayoutTemplate(id), {&#10;            loading: `Deleting &quot;${name}&quot;...`,&#10;            success: async () =&gt; {&#10;                // Refetch data after successful deletion&#10;                await fetchLayouts();&#10;                return `Layout &quot;${name}&quot; deleted successfully.`;&#10;            },&#10;            error: (err) =&gt; err.message || 'Failed to delete layout.',&#10;        });&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;p-4 md:p-8&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-2xl font-bold tracking-tight&quot;&gt;Seating Layouts&lt;/h1&gt;&#10;                    &lt;p className=&quot;text-muted-foreground&quot;&gt;&#10;                        Manage reusable seating templates for your events.&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;Button asChild&gt;&#10;                    &lt;Link href={`/manage/organization/${organizationId}/seating/create`}&gt;&#10;                        &lt;PlusCircle className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;                        Create New Layout&#10;                    &lt;/Link&gt;&#10;                &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;&#10;            {isLoading &amp;&amp; (&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                    {Array.from({length: pageSize}).map((_, i) =&gt; (&#10;                        &lt;Skeleton key={i} className=&quot;h-64 w-full&quot;/&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {!isLoading &amp;&amp; data &amp;&amp; data.content.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                    {data.content.map(layout =&gt; (&#10;                        &lt;LayoutPreviewCard key={layout.id} layout={layout} onDelete={handleDelete}/&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {!isLoading &amp;&amp; (!data || data.empty) &amp;&amp; (&#10;                &lt;div&#10;                    className=&quot;flex flex-col items-center justify-center text-center border-2 border-dashed rounded-lg p-12 h-64&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold&quot;&gt;No Layouts Found&lt;/h3&gt;&#10;                    &lt;p className=&quot;text-muted-foreground mt-2 mb-4&quot;&gt;Get started by creating your first seating&#10;                        layout.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {data &amp;&amp; data.totalPages &gt; 1 &amp;&amp; (&#10;                &lt;Pagination className=&quot;mt-8&quot;&gt;&#10;                    &lt;PaginationContent&gt;&#10;                        &lt;PaginationItem&gt;&#10;                            &lt;PaginationPrevious onClick={() =&gt; setPage(p =&gt; p - 1)} aria-disabled={data.first}/&gt;&#10;                        &lt;/PaginationItem&gt;&#10;                        &lt;PaginationItem&gt;&#10;                            &lt;span className=&quot;p-2 text-sm&quot;&gt;Page {data.number + 1} of {data.totalPages}&lt;/span&gt;&#10;                        &lt;/PaginationItem&gt;&#10;                        &lt;PaginationItem&gt;&#10;                            &lt;PaginationNext onClick={() =&gt; setPage(p =&gt; p + 1)} aria-disabled={data.last}/&gt;&#10;                        &lt;/PaginationItem&gt;&#10;                    &lt;/PaginationContent&gt;&#10;                &lt;/Pagination&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client'&#10;&#10;import {deleteSeatingLayoutTemplate, getSeatingLayoutTemplatesByOrg} from '@/lib/actions/seatingLayoutTemplateActions';&#10;import {PaginatedResponse, SeatingLayoutTemplateResponse} from '@/types/seating-layout';&#10;import {useParams} from 'next/navigation';&#10;&#10;import React, {useCallback, useEffect, useState} from 'react';&#10;import {toast} from 'sonner';&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import {PlusCircle} from 'lucide-react';&#10;import {Skeleton} from '@/components/ui/skeleton';&#10;import {&#10;    Pagination,&#10;    PaginationContent,&#10;    PaginationItem,&#10;    PaginationNext,&#10;    PaginationPrevious&#10;} from &quot;@/components/ui/pagination&quot;;&#10;import LayoutPreviewCard from &quot;@/app/manage/organization/[organization_id]/seating/_components/LayoutPreviewCard&quot;;&#10;&#10;export default function SeatingLayoutsPage() {&#10;    const params = useParams();&#10;    const organizationId = params.organization_id as string;&#10;&#10;    const [data, setData] = useState&lt;PaginatedResponse&lt;SeatingLayoutTemplateResponse&gt; | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [page, setPage] = useState(0);&#10;    const pageSize = 6;&#10;&#10;    const fetchLayouts = useCallback(async () =&gt; {&#10;        setIsLoading(true);&#10;        try {&#10;            const response = await getSeatingLayoutTemplatesByOrg(organizationId, page, pageSize);&#10;            setData(response);&#10;        } catch (error) {&#10;            console.error(&quot;Failed to fetch seating layouts:&quot;, error);&#10;            toast.error(&quot;Failed to fetch seating layouts.&quot;);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    }, [organizationId, page, pageSize]);&#10;&#10;    useEffect(() =&gt; {&#10;        fetchLayouts();&#10;    }, [fetchLayouts]);&#10;&#10;    const handleDelete = (id: string, name: string) =&gt; {&#10;        toast.promise(deleteSeatingLayoutTemplate(id), {&#10;            loading: `Deleting &quot;${name}&quot;...`,&#10;            success: async () =&gt; {&#10;                // Refetch data after successful deletion&#10;                await fetchLayouts();&#10;                return `Layout &quot;${name}&quot; deleted successfully.`;&#10;            },&#10;            error: (err) =&gt; err.message || 'Failed to delete layout.',&#10;        });&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;p-4 md:p-8&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;h1 className=&quot;text-2xl font-bold tracking-tight&quot;&gt;Seating Layouts&lt;/h1&gt;&#10;                    &lt;p className=&quot;text-muted-foreground&quot;&gt;&#10;                        Manage reusable seating templates for your events.&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;Button asChild&gt;&#10;                    &lt;Link href={`/manage/organization/${organizationId}/seating/create`}&gt;&#10;                        &lt;PlusCircle className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;                        Create New Layout&#10;                    &lt;/Link&gt;&#10;                &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;&#10;            {isLoading &amp;&amp; (&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                    {Array.from({length: pageSize}).map((_, i) =&gt; (&#10;                        &lt;Skeleton key={i} className=&quot;h-64 w-full&quot;/&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {!isLoading &amp;&amp; data &amp;&amp; data.content.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                    {data.content.map(layout =&gt; (&#10;                        &lt;LayoutPreviewCard key={layout.id} layout={layout} onDelete={handleDelete}/&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {!isLoading &amp;&amp; (!data || data.empty) &amp;&amp; (&#10;                &lt;div&#10;                    className=&quot;flex flex-col items-center justify-center text-center border-2 border-dashed rounded-lg p-12 h-64&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold&quot;&gt;No Layouts Found&lt;/h3&gt;&#10;                    &lt;p className=&quot;text-muted-foreground mt-2 mb-4&quot;&gt;Get started by creating your first seating&#10;                        layout.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            {data &amp;&amp; data.totalPages &gt; 1 &amp;&amp; (&#10;                &lt;Pagination className=&quot;mt-8&quot;&gt;&#10;                    &lt;PaginationContent&gt;&#10;                        &lt;PaginationItem&gt;&#10;                            &lt;PaginationPrevious onClick={() =&gt; setPage(p =&gt; p - 1)} aria-disabled={data.first}/&gt;&#10;                        &lt;/PaginationItem&gt;&#10;                        &lt;PaginationItem&gt;&#10;                            &lt;span className=&quot;p-2 text-sm&quot;&gt;Page {data.number + 1} of {data.totalPages}&lt;/span&gt;&#10;                        &lt;/PaginationItem&gt;&#10;                        &lt;PaginationItem&gt;&#10;                            &lt;PaginationNext onClick={() =&gt; setPage(p =&gt; p + 1)} aria-disabled={data.last}/&gt;&#10;                        &lt;/PaginationItem&gt;&#10;                    &lt;/PaginationContent&gt;&#10;                &lt;/Pagination&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>