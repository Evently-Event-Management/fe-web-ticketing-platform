<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/next.config.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/next.config.ts" />
              <option name="originalContent" value="import type {NextConfig} from &quot;next&quot;;&#10;&#10;const nextConfig: NextConfig = {&#10;    /* config options here */&#10;    images: {&#10;        remotePatterns: [&#10;            {&#10;                protocol: 'https',&#10;                hostname: 'images.unsplash.com',&#10;            },&#10;            {&#10;                protocol: 'http',&#10;                hostname: 'localhost',&#10;                port: '4566',&#10;                pathname: '/event-seating-uploads/**',&#10;            },&#10;            {&#10;                protocol: 'http',&#10;                hostname: 'event-seating-localstack'&#10;            }&#10;        ],&#10;    },&#10;    crossOrigin: 'use-credentials'&#10;};&#10;&#10;export default nextConfig;&#10;" />
              <option name="updatedContent" value="import type {NextConfig} from &quot;next&quot;;&#10;&#10;const nextConfig: NextConfig = {&#10;    /* config options here */&#10;    images: {&#10;        remotePatterns: [&#10;            {&#10;                protocol: 'https',&#10;                hostname: 'images.unsplash.com',&#10;            },&#10;            {&#10;                protocol: 'http',&#10;                hostname: 'localhost',&#10;                port: '4566',&#10;                pathname: '/event-seating-uploads/**',&#10;            },&#10;            {&#10;                protocol: 'http',&#10;                hostname: 'event-seating-localstack'&#10;            },&#10;            {&#10;                protocol: 'https',&#10;                hostname: 'ticketly-storage.s3.amazonaws.com',&#10;                pathname: '/organization-logos/**',&#10;            }&#10;        ],&#10;    },&#10;    crossOrigin: 'use-credentials'&#10;};&#10;&#10;export default nextConfig;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/[eventId]/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/[eventId]/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import * as React from &quot;react&quot;;&#10;import {useState, useEffect} from &quot;react&quot;;&#10;import {useParams} from &quot;next/navigation&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {getMyEventById} from &quot;@/lib/actions/eventActions&quot;;&#10;import {EventDetailDTO} from &quot;@/lib/validators/event&quot;;&#10;import {Skeleton} from &quot;@/components/ui/skeleton&quot;;&#10;import {EventStatusTracker} from &quot;../_components/EventStatusTracker&quot;;&#10;import {EventPreview} from &quot;@/app/manage/_components/review/EventPreview&quot;;&#10;import {Separator} from &quot;@/components/ui/separator&quot;;&#10;import {getMyOrganizationById} from &quot;@/lib/actions/organizationActions&quot;;&#10;import {OrganizationResponse} from &quot;@/types/oraganizations&quot;;&#10;&#10;export default function EventDetailsPage() {&#10;    const params = useParams();&#10;    const eventId = params.eventId as string;&#10;&#10;    const [event, setEvent] = useState&lt;EventDetailDTO | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [organization, setOrganization] = useState&lt;OrganizationResponse | null&gt;(null);&#10;&#10;    // Load event data&#10;    useEffect(() =&gt; {&#10;        console.log(&quot;Fetching event data for ID:&quot;, eventId);&#10;        if (eventId) {&#10;            setIsLoading(true);&#10;            getMyEventById(eventId)&#10;                .then((eventData) =&gt; {&#10;                    setEvent(eventData);&#10;                    // After we have event data, fetch organization details&#10;                    if (eventData &amp;&amp; eventData.organizationId) {&#10;                        return getMyOrganizationById(eventData.organizationId);&#10;                    }&#10;                    return null;&#10;                })&#10;                .then((orgData) =&gt; {&#10;                    if (orgData) {&#10;                        setOrganization(orgData);&#10;                    }&#10;                })&#10;                .catch((error) =&gt; {&#10;                    console.error(&quot;Error fetching data:&quot;, error);&#10;                    toast.error(error.message || &quot;Failed to load event details.&quot;);&#10;                })&#10;                .finally(() =&gt; {&#10;                    setIsLoading(false);&#10;                });&#10;        }&#10;    }, [eventId]); // Only depend on eventId, not the event state itself&#10;&#10;    if (isLoading) {&#10;        return (&#10;            &lt;div className=&quot;p-4 md:p-8 max-w-4xl mx-auto space-y-8&quot;&gt;&#10;                &lt;Skeleton className=&quot;h-24 w-full&quot;/&gt;&#10;                &lt;Skeleton className=&quot;h-48 w-full&quot;/&gt;&#10;                &lt;Skeleton className=&quot;h-32 w-full&quot;/&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    if (!organization || !event) {&#10;        return (&#10;            &lt;&gt;&#10;                &lt;div className=&quot;p-4 md:p-8 max-w-4xl mx-auto space-y-8&quot;&gt;&#10;                    &lt;h1 className=&quot;text-2xl font-semibold&quot;&gt;Event Not Found&lt;/h1&gt;&#10;                &lt;/div&gt;&#10;            &lt;/&gt;&#10;        );&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-8 max-w-5xl mx-auto p-4 md:p-8&quot;&gt;&#10;            &lt;EventStatusTracker status={event.status} rejectionReason={event.rejectionReason}/&gt;&#10;            &lt;Separator className=&quot;my-6&quot;/&gt;&#10;            &lt;EventPreview event={event} organization={organization}/&gt;&#10;&#10;            {/* Sales Summary Section */}&#10;            {/*&lt;Card className=&quot;p-6&quot;&gt;*/}&#10;            {/*    &lt;h2 className=&quot;text-xl font-semibold mb-4&quot;&gt;Sales Summary&lt;/h2&gt;*/}&#10;            {/*    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;*/}&#10;            {/*        &lt;div className=&quot;bg-muted p-4 rounded-lg text-center&quot;&gt;*/}&#10;            {/*            &lt;p className=&quot;text-muted-foreground text-sm&quot;&gt;Total Sales&lt;/p&gt;*/}&#10;            {/*            &lt;p className=&quot;text-2xl font-bold&quot;&gt;$0&lt;/p&gt;*/}&#10;            {/*        &lt;/div&gt;*/}&#10;            {/*        &lt;div className=&quot;bg-muted p-4 rounded-lg text-center&quot;&gt;*/}&#10;            {/*            &lt;p className=&quot;text-muted-foreground text-sm&quot;&gt;Tickets Sold&lt;/p&gt;*/}&#10;            {/*            &lt;p className=&quot;text-2xl font-bold&quot;&gt;0&lt;/p&gt;*/}&#10;            {/*        &lt;/div&gt;*/}&#10;            {/*        &lt;div className=&quot;bg-muted p-4 rounded-lg text-center&quot;&gt;*/}&#10;            {/*            &lt;p className=&quot;text-muted-foreground text-sm&quot;&gt;Remaining&lt;/p&gt;*/}&#10;            {/*            &lt;p className=&quot;text-2xl font-bold&quot;&gt;0&lt;/p&gt;*/}&#10;            {/*        &lt;/div&gt;*/}&#10;            {/*    &lt;/div&gt;*/}&#10;            {/*&lt;/Card&gt;*/}&#10;&#10;            {/* Sessions Schedule Section */}&#10;&#10;            {/* Analytics Section */}&#10;            {/*&lt;Card className=&quot;p-6&quot;&gt;*/}&#10;            {/*    &lt;h2 className=&quot;text-xl font-semibold mb-4&quot;&gt;Event Performance&lt;/h2&gt;*/}&#10;            {/*    &lt;div className=&quot;text-center p-12 bg-muted rounded-lg&quot;&gt;*/}&#10;            {/*        &lt;p className=&quot;text-muted-foreground&quot;&gt;Analytics features will be available once the event is*/}&#10;            {/*            published.&lt;/p&gt;*/}&#10;            {/*    &lt;/div&gt;*/}&#10;            {/*&lt;/Card&gt;*/}&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import * as React from &quot;react&quot;;&#10;import {useState, useEffect} from &quot;react&quot;;&#10;import {useParams} from &quot;next/navigation&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {getMyEventById} from &quot;@/lib/actions/eventActions&quot;;&#10;import {EventDetailDTO} from &quot;@/lib/validators/event&quot;;&#10;import {Skeleton} from &quot;@/components/ui/skeleton&quot;;&#10;import {EventStatusTracker} from &quot;../_components/EventStatusTracker&quot;;&#10;import {EventPreview} from &quot;@/app/manage/_components/review/EventPreview&quot;;&#10;import {Separator} from &quot;@/components/ui/separator&quot;;&#10;import {getMyOrganizationById} from &quot;@/lib/actions/organizationActions&quot;;&#10;import {OrganizationResponse} from &quot;@/types/oraganizations&quot;;&#10;import {Card} from &quot;@/components/ui/card&quot;;&#10;&#10;export default function EventDetailsPage() {&#10;    const params = useParams();&#10;    const eventId = params.eventId as string;&#10;&#10;    const [event, setEvent] = useState&lt;EventDetailDTO | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [organization, setOrganization] = useState&lt;OrganizationResponse | null&gt;(null);&#10;&#10;    // Load event data&#10;    useEffect(() =&gt; {&#10;        console.log(&quot;Fetching event data for ID:&quot;, eventId);&#10;        if (eventId) {&#10;            setIsLoading(true);&#10;            getMyEventById(eventId)&#10;                .then((eventData) =&gt; {&#10;                    setEvent(eventData);&#10;                    // After we have event data, fetch organization details&#10;                    if (eventData &amp;&amp; eventData.organizationId) {&#10;                        return getMyOrganizationById(eventData.organizationId);&#10;                    }&#10;                    return null;&#10;                })&#10;                .then((orgData) =&gt; {&#10;                    if (orgData) {&#10;                        setOrganization(orgData);&#10;                    }&#10;                })&#10;                .catch((error) =&gt; {&#10;                    console.error(&quot;Error fetching data:&quot;, error);&#10;                    toast.error(error.message || &quot;Failed to load event details.&quot;);&#10;                })&#10;                .finally(() =&gt; {&#10;                    setIsLoading(false);&#10;                });&#10;        }&#10;    }, [eventId]); // Only depend on eventId, not the event state itself&#10;&#10;    if (isLoading) {&#10;        return (&#10;            &lt;div className=&quot;p-4 md:p-8 grid grid-cols-1 lg:grid-cols-3 gap-8 w-full&quot;&gt;&#10;                &lt;div className=&quot;lg:col-span-2 space-y-8&quot;&gt;&#10;                    &lt;Skeleton className=&quot;h-64 w-full&quot;/&gt;&#10;                    &lt;Skeleton className=&quot;h-48 w-full&quot;/&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;lg:col-span-1 space-y-8&quot;&gt;&#10;                    &lt;Skeleton className=&quot;h-48 w-full&quot;/&gt;&#10;                    &lt;Skeleton className=&quot;h-64 w-full&quot;/&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    if (!organization || !event) {&#10;        return (&#10;            &lt;div className=&quot;p-8 text-center w-full&quot;&gt;Event Not Found&lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;p-4 md:p-8 grid grid-cols-1 lg:grid-cols-3 gap-8 items-start w-full&quot;&gt;&#10;            {/* Main Content - The Event Preview */}&#10;            &lt;div className=&quot;lg:col-span-2&quot;&gt;&#10;                &lt;EventStatusTracker status={event.status} rejectionReason={event.rejectionReason}/&gt;&#10;                &lt;Separator className=&quot;my-6&quot;/&gt;&#10;                &lt;EventPreview&#10;                    event={event}&#10;                    organization={organization}&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Sidebar - Fixed on scroll */}&#10;            &lt;div className=&quot;lg:col-span-1 space-y-6 lg:sticky lg:top-24 lg:self-start max-h-[calc(100vh-120px)] overflow-y-auto&quot;&gt;&#10;                &lt;Card className=&quot;p-6&quot;&gt;&#10;                    &lt;h2 className=&quot;text-xl font-semibold mb-4&quot;&gt;Sales Summary&lt;/h2&gt;&#10;                    &lt;div className=&quot;grid grid-cols-1 gap-4&quot;&gt;&#10;                        &lt;div className=&quot;bg-muted p-4 rounded-lg text-center&quot;&gt;&#10;                            &lt;p className=&quot;text-muted-foreground text-sm&quot;&gt;Total Sales&lt;/p&gt;&#10;                            &lt;p className=&quot;text-2xl font-bold&quot;&gt;$0&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;bg-muted p-4 rounded-lg text-center&quot;&gt;&#10;                            &lt;p className=&quot;text-muted-foreground text-sm&quot;&gt;Tickets Sold&lt;/p&gt;&#10;                            &lt;p className=&quot;text-2xl font-bold&quot;&gt;0&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;bg-muted p-4 rounded-lg text-center&quot;&gt;&#10;                            &lt;p className=&quot;text-muted-foreground text-sm&quot;&gt;Remaining&lt;/p&gt;&#10;                            &lt;p className=&quot;text-2xl font-bold&quot;&gt;0&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/Card&gt;&#10;                &lt;Card className=&quot;p-6&quot;&gt;&#10;                    &lt;h2 className=&quot;text-xl font-semibold mb-4&quot;&gt;Event Performance&lt;/h2&gt;&#10;                    &lt;div className=&quot;text-center p-4 bg-muted rounded-lg&quot;&gt;&#10;                        &lt;p className=&quot;text-muted-foreground&quot;&gt;Analytics features will be available once the event is published.&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/Card&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/InteractiveBlocks.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/InteractiveBlocks.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useDraggable} from '@dnd-kit/core';&#10;import {Block, Tier} from '@/lib/validators/event';&#10;import {cn} from '@/lib/utils';&#10;import {Button} from '@/components/ui/button';&#10;&#10;// --- Interactive Draggable Block for Seated Grids ---&#10;interface DraggableBlockProps {&#10;    block: Block;&#10;    tiers: Tier[];&#10;    onSeatClick: (blockId: string, rowId: string, seatId: string) =&gt; void;&#10;    onApplyToAllSeats?: (blockId: string) =&gt; void;  // New prop for handling apply to all&#10;}&#10;&#10;export function InteractiveDraggableBlock({block, tiers, onSeatClick, onApplyToAllSeats}: DraggableBlockProps) {&#10;    const {setNodeRef} = useDraggable({&#10;        id: block.id,&#10;        disabled: true, // Dragging is disabled in assignment mode&#10;    });&#10;&#10;    const style = {&#10;        // No transform needed as blocks are static in this editor&#10;        left: block.position.x,&#10;        top: block.position.y,&#10;    };&#10;&#10;    const getTierColor = (tierId?: string) =&gt; {&#10;        if (tierId === 'RESERVED') return 'hsla(var(--muted-foreground), 0.5)'; // Added opacity&#10;        if (!tierId) return undefined;&#10;        const tier = tiers.find(t =&gt; t.id === tierId);&#10;        // Add opacity to the color&#10;        if (tier?.color) {&#10;            // Handle HSL color format&#10;            if (tier.color.startsWith('hsl')) {&#10;                return tier.color.replace('hsl', 'hsla').replace(')', ', 0.5)');&#10;            }&#10;            // Handle hex or other formats by adding opacity suffix&#10;            return `${tier.color}80`; // 80 is equivalent to 50% opacity in hex&#10;        }&#10;        return 'hsla(var(--primary), 0.5)'; // Added opacity&#10;    };&#10;&#10;    return (&#10;        &lt;div ref={setNodeRef} style={style} className=&quot;absolute p-3 bg-card border rounded-lg&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col text-center relative&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between w-full mb-2&quot;&gt;&#10;                    &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#10;                    {onApplyToAllSeats &amp;&amp; (&#10;                        &lt;Button&#10;                            size=&quot;sm&quot;&#10;                            variant=&quot;outline&quot;&#10;                            type={'button'}&#10;                            className=&quot;text-xs py-0 h-6&quot;&#10;                            onClick={(e) =&gt; {&#10;                                e.stopPropagation();&#10;                                onApplyToAllSeats(block.id);&#10;                            }}&#10;                        &gt;&#10;                            Apply to All&#10;                        &lt;/Button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;grid gap-1.5&quot;&#10;                     style={{gridTemplateColumns: `repeat(${block.rows?.[0]?.seats?.length || 1}, 1fr)`}}&gt;&#10;                    {block.rows?.map(row =&gt;&#10;                        row.seats.map(seat =&gt; (&#10;                            &lt;button&#10;                                key={seat.id}&#10;                                type=&quot;button&quot;&#10;                                onClick={() =&gt; onSeatClick(block.id, row.id, seat.id)}&#10;                                className={cn(&#10;                                    &quot;h-6 w-6 rounded-full border text-xs font-mono transition-all hover:scale-110 flex items-center justify-center&quot;,&#10;                                    seat.status === 'RESERVED' &amp;&amp; &quot;bg-muted-foreground/50 text-primary-foreground line-through border-destructive border-2&quot;&#10;                                )}&#10;                                style={{backgroundColor: seat.tierId &amp;&amp; seat.status !== 'RESERVED' ? getTierColor(seat.tierId) : undefined}}&#10;                            &gt;&#10;                                {seat.label}&#10;                            &lt;/button&gt;&#10;                        ))&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;// --- Interactive Resizable Block for Standing Capacity ---&#10;interface ResizableBlockProps {&#10;    block: Block;&#10;    tiers: Tier[];&#10;    onClick: (blockId: string) =&gt; void;&#10;}&#10;&#10;export function InteractiveResizableBlock({block, tiers, onClick}: ResizableBlockProps) {&#10;    const {setNodeRef} = useDraggable({&#10;        id: block.id,&#10;        disabled: true,&#10;    });&#10;&#10;    const style = {&#10;        left: block.position.x,&#10;        top: block.position.y,&#10;        width: block.width,&#10;        height: block.height,&#10;    };&#10;&#10;    // Determine the background color based on the tier of the seats inside the block&#10;    // with 50% opacity&#10;    const getBlockTierColor = () =&gt; {&#10;        const firstTieredSeat = block.seats?.find(s =&gt; s.tierId);&#10;        if (!firstTieredSeat || !firstTieredSeat.tierId) return undefined;&#10;        const tier = tiers.find(t =&gt; t.id === firstTieredSeat.tierId);&#10;&#10;        // Add opacity to the color&#10;        if (tier?.color) {&#10;            // Handle HSL color format&#10;            if (tier.color.startsWith('hsl')) {&#10;                return tier.color.replace('hsl', 'hsla').replace(')', ', 0.5)');&#10;            }&#10;            // Handle hex or other formats by adding opacity suffix&#10;            return `${tier.color}80`; // 80 is equivalent to 50% opacity in hex&#10;        }&#10;        return undefined;&#10;    };&#10;&#10;    return (&#10;        &lt;div ref={setNodeRef} style={style} className=&quot;absolute&quot;&gt;&#10;            &lt;div&#10;                onClick={() =&gt; onClick(block.id)}&#10;                className=&quot;p-2 bg-card border rounded-lg shadow-md box-border flex flex-col relative cursor-pointer h-full w-full&quot;&#10;                style={{backgroundColor: getBlockTierColor()}}&#10;            &gt;&#10;                &lt;div className=&quot;flex items-center gap-2 flex-grow&quot;&gt;&#10;                    &lt;div className=&quot;flex flex-col text-center flex-grow&quot;&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#10;                        &lt;span className=&quot;text-xs text-muted-foreground&quot;&gt;{block.capacity} capacity&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useDraggable} from '@dnd-kit/core';&#10;import {Block, Tier} from '@/lib/validators/event';&#10;import {cn} from '@/lib/utils';&#10;import {Button} from '@/components/ui/button';&#10;&#10;// --- Interactive Draggable Block for Seated Grids ---&#10;interface DraggableBlockProps {&#10;    block: Block;&#10;    tiers: Tier[];&#10;    onSeatClick: (blockId: string, rowId: string, seatId: string) =&gt; void;&#10;    onApplyToAllSeats?: (blockId: string) =&gt; void;  // New prop for handling apply to all&#10;}&#10;&#10;export function InteractiveDraggableBlock({block, tiers, onSeatClick, onApplyToAllSeats}: DraggableBlockProps) {&#10;    const {setNodeRef} = useDraggable({&#10;        id: block.id,&#10;        disabled: true, // Dragging is disabled in assignment mode&#10;    });&#10;&#10;    const style = {&#10;        // No transform needed as blocks are static in this editor&#10;        left: block.position.x,&#10;        top: block.position.y,&#10;    };&#10;&#10;    const getTierColor = (tierId?: string) =&gt; {&#10;        if (tierId === 'RESERVED') return 'hsla(var(--muted-foreground), 0.5)'; // Added opacity&#10;        if (!tierId) return undefined;&#10;        const tier = tiers.find(t =&gt; t.id === tierId);&#10;        // Add opacity to the color&#10;        if (tier?.color) {&#10;            // Handle HSL color format&#10;            if (tier.color.startsWith('hsl')) {&#10;                return tier.color.replace('hsl', 'hsla').replace(')', ', 0.5)');&#10;            }&#10;            // Handle hex or other formats by adding opacity suffix&#10;            return `${tier.color}80`; // 80 is equivalent to 50% opacity in hex&#10;        }&#10;        return 'hsla(var(--primary), 0.5)'; // Added opacity&#10;    };&#10;&#10;    return (&#10;        &lt;div ref={setNodeRef} style={style} className=&quot;absolute p-3 bg-card border rounded-lg&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col text-center relative&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between w-full mb-2&quot;&gt;&#10;                    &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#10;                    {onApplyToAllSeats &amp;&amp; (&#10;                        &lt;Button&#10;                            size=&quot;sm&quot;&#10;                            variant=&quot;outline&quot;&#10;                            type={'button'}&#10;                            className=&quot;text-xs py-0 h-6&quot;&#10;                            onClick={(e) =&gt; {&#10;                                e.stopPropagation();&#10;                                onApplyToAllSeats(block.id);&#10;                            }}&#10;                        &gt;&#10;                            Apply to All&#10;                        &lt;/Button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;grid gap-1.5&quot;&#10;                     style={{gridTemplateColumns: `repeat(${block.rows?.[0]?.seats?.length || 1}, 1fr)`}}&gt;&#10;                    {block.rows?.map(row =&gt;&#10;                        row.seats.map(seat =&gt; (&#10;                            &lt;button&#10;                                key={seat.id}&#10;                                type=&quot;button&quot;&#10;                                onClick={() =&gt; onSeatClick(block.id, row.id, seat.id)}&#10;                                className={cn(&#10;                                    &quot;h-6 w-6 rounded-full border text-xs font-mono transition-all hover:scale-110 flex items-center justify-center&quot;,&#10;                                    seat.status === 'RESERVED' &amp;&amp; &quot;bg-muted-foreground/50 text-primary-foreground line-through border-destructive border-2&quot;&#10;                                )}&#10;                                style={{backgroundColor: seat.tierId &amp;&amp; seat.status !== 'RESERVED' ? getTierColor(seat.tierId) : undefined}}&#10;                            &gt;&#10;                                {seat.label}&#10;                            &lt;/button&gt;&#10;                        ))&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;// --- Interactive Resizable Block for Standing Capacity ---&#10;interface ResizableBlockProps {&#10;    block: Block;&#10;    tiers: Tier[];&#10;    onClick: (blockId: string) =&gt; void;&#10;}&#10;&#10;export function InteractiveResizableBlock({block, tiers, onClick}: ResizableBlockProps) {&#10;    const {setNodeRef} = useDraggable({&#10;        id: block.id,&#10;        disabled: true,&#10;    });&#10;&#10;    // Fix the TypeScript error by ensuring width and height are valid CSS values&#10;    const style: React.CSSProperties = {&#10;        left: block.position.x,&#10;        top: block.position.y,&#10;        width: block.width ?? undefined,&#10;        height: block.height ?? undefined,&#10;    };&#10;&#10;    // Determine the background color based on the tier of the seats inside the block&#10;    // with 50% opacity&#10;    const getBlockTierColor = () =&gt; {&#10;        const firstTieredSeat = block.seats?.find(s =&gt; s.tierId);&#10;        if (!firstTieredSeat || !firstTieredSeat.tierId) return undefined;&#10;        const tier = tiers.find(t =&gt; t.id === firstTieredSeat.tierId);&#10;&#10;        // Add opacity to the color&#10;        if (tier?.color) {&#10;            // Handle HSL color format&#10;            if (tier.color.startsWith('hsl')) {&#10;                return tier.color.replace('hsl', 'hsla').replace(')', ', 0.5)');&#10;            }&#10;            // Handle hex or other formats by adding opacity suffix&#10;            return `${tier.color}80`; // 80 is equivalent to 50% opacity in hex&#10;        }&#10;        return undefined;&#10;    };&#10;&#10;    return (&#10;        &lt;div ref={setNodeRef} style={style} className=&quot;absolute&quot;&gt;&#10;            &lt;div&#10;                onClick={() =&gt; onClick(block.id)}&#10;                className=&quot;p-2 bg-card border rounded-lg shadow-md box-border flex flex-col relative cursor-pointer h-full w-full&quot;&#10;                style={{backgroundColor: getBlockTierColor()}}&#10;            &gt;&#10;                &lt;div className=&quot;flex items-center gap-2 flex-grow&quot;&gt;&#10;                    &lt;div className=&quot;flex flex-col text-center flex-grow&quot;&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#10;                        &lt;span className=&quot;text-xs text-muted-foreground&quot;&gt;{block.capacity} capacity&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/SeratingStep.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/SeratingStep.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {useFieldArray, useFormContext} from 'react-hook-form';&#10;import {CreateEventFormData} from '@/lib/validators/event';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {&#10;    SessionListItemSeating&#10;} from &quot;@/app/manage/organization/[organization_id]/event/_components/SessionListItemSeating&quot;;&#10;import {OnlineConfigView} from &quot;@/app/manage/organization/[organization_id]/event/_components/OnlineConfigView&quot;;&#10;import {PhysicalConfigView} from &quot;@/app/manage/organization/[organization_id]/event/_components/PhysicalConfigView&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {Checkbox} from &quot;@/components/ui/checkbox&quot;;&#10;import {Label} from &quot;@/components/ui/label&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {ArrowLeft} from &quot;lucide-react&quot;;&#10;&#10;interface SeatingStepProps {&#10;    onConfigModeChange?: (isInConfigMode: boolean) =&gt; void;&#10;}&#10;&#10;// --- Main Seating Step Component ---&#10;export function SeatingStep({ onConfigModeChange }: SeatingStepProps) {&#10;    const { control, formState: { errors }, watch, getValues, setValue } = useFormContext&lt;CreateEventFormData&gt;();&#10;    const [configuringIndex, setConfiguringIndex] = useState&lt;number | null&gt;(null);&#10;    const [applyToAll, setApplyToAll] = useState(false);&#10;&#10;    const { fields } = useFieldArray({&#10;        control,&#10;        name: &quot;sessions&quot;,&#10;    });&#10;&#10;    // Get the session being configured&#10;    const currentSession = configuringIndex !== null ? watch(`sessions.${configuringIndex}`) : null;&#10;&#10;    // Notify parent component when configuration mode changes&#10;    useEffect(() =&gt; {&#10;        if (onConfigModeChange) {&#10;            onConfigModeChange(configuringIndex !== null);&#10;        }&#10;    }, [configuringIndex, onConfigModeChange]);&#10;&#10;    const handleSave = (layoutData: any) =&gt; {&#10;        if (configuringIndex === null) return;&#10;&#10;        setValue(`sessions.${configuringIndex}.layoutData`, layoutData);&#10;&#10;        if (applyToAll) {&#10;            const allSessions = getValues('sessions');&#10;            allSessions.forEach((s, i) =&gt; {&#10;                // Apply only to sessions of the same type (online/physical)&#10;                if (s.isOnline === currentSession?.isOnline) {&#10;                    setValue(`sessions.${i}.layoutData`, layoutData);&#10;                }&#10;            });&#10;            toast.success(`Seating applied to all ${currentSession?.isOnline ? 'online' : 'physical'} sessions.`);&#10;        } else {&#10;            toast.success(`Seating configured for Session ${configuringIndex + 1}.`);&#10;        }&#10;&#10;        setConfiguringIndex(null);&#10;    };&#10;&#10;    // If we're configuring a session, show the full-page configuration view&#10;    if (configuringIndex !== null &amp;&amp; currentSession) {&#10;        return (&#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;Button&#10;                        variant=&quot;ghost&quot;&#10;                        onClick={() =&gt; setConfiguringIndex(null)}&#10;                        className=&quot;flex items-center gap-1&quot;&#10;                    &gt;&#10;                        &lt;ArrowLeft className=&quot;h-4 w-4&quot; /&gt;&#10;                        Back to Sessions&#10;                    &lt;/Button&gt;&#10;                    &lt;h2 className=&quot;text-xl font-semibold&quot;&gt;&#10;                        Configure Seating for Session {configuringIndex + 1}&#10;                    &lt;/h2&gt;&#10;                    &lt;div&gt;&lt;/div&gt; {/* Empty div for flexbox spacing */}&#10;                &lt;/div&gt;&#10;&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;&#10;                            {currentSession.isOnline&#10;                                ? &quot;Online Capacity Configuration&quot;&#10;                                : &quot;Physical Seating Configuration&quot;}&#10;                        &lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;&#10;                            {currentSession.isOnline&#10;                                ? &quot;Set the capacity and ticket tier for your online event.&quot;&#10;                                : &quot;Choose a layout template or create a new one, then assign your tiers.&quot;}&#10;                        &lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                        {currentSession.isOnline ? (&#10;                            &lt;OnlineConfigView onSave={handleSave} /&gt;&#10;                        ) : (&#10;                            &lt;PhysicalConfigView onSave={handleSave} /&gt;&#10;                        )}&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                &lt;div className=&quot;flex items-center justify-between border-t pt-4 mt-8&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;Checkbox&#10;                            id=&quot;apply-to-all-seating&quot;&#10;                            checked={applyToAll}&#10;                            onCheckedChange={(checked) =&gt; setApplyToAll(checked === true)}&#10;                        /&gt;&#10;                        &lt;Label htmlFor=&quot;apply-to-all-seating&quot;&gt;&#10;                            Apply to all {currentSession.isOnline ? 'online' : 'physical'} sessions&#10;                        &lt;/Label&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    // Otherwise show the session list&#10;    return (&#10;        &lt;Card&gt;&#10;            &lt;CardHeader&gt;&#10;                &lt;CardTitle&gt;Seating &amp; Tier Assignment&lt;/CardTitle&gt;&#10;                &lt;CardDescription&gt;&#10;                    Configure the seating layout and assign ticket tiers for each session.&#10;                &lt;/CardDescription&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;                {fields.map((field, index) =&gt; (&#10;                    &lt;SessionListItemSeating&#10;                        key={field.id}&#10;                        field={field}&#10;                        index={index}&#10;                        onConfigure={() =&gt; setConfiguringIndex(index)}&#10;                    /&gt;&#10;                ))}&#10;&#10;                {errors.sessions?.root &amp;&amp; (&#10;                    &lt;p className=&quot;text-sm font-medium text-destructive&quot;&gt;{errors.sessions.root.message}&lt;/p&gt;&#10;                )}&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {useFieldArray, useFormContext} from 'react-hook-form';&#10;import {CreateEventFormData} from '@/lib/validators/event';&#10;import {SessionListItemSeating} from &quot;@/app/manage/organization/[organization_id]/event/_components/SessionListItemSeating&quot;;&#10;import {OnlineConfigView} from &quot;@/app/manage/organization/[organization_id]/event/_components/OnlineConfigView&quot;;&#10;import {PhysicalConfigView} from &quot;@/app/manage/organization/[organization_id]/event/_components/PhysicalConfigView&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {Checkbox} from &quot;@/components/ui/checkbox&quot;;&#10;import {Label} from &quot;@/components/ui/label&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {ArrowLeft} from &quot;lucide-react&quot;;&#10;&#10;interface SeatingStepProps {&#10;    onConfigModeChange?: (isInConfigMode: boolean) =&gt; void;&#10;}&#10;&#10;// --- Main Seating Step Component ---&#10;export function SeatingStep({ onConfigModeChange }: SeatingStepProps) {&#10;    const { control, formState: { errors }, watch, getValues, setValue } = useFormContext&lt;CreateEventFormData&gt;();&#10;    const [configuringIndex, setConfiguringIndex] = useState&lt;number | null&gt;(null);&#10;    const [applyToAll, setApplyToAll] = useState(false);&#10;&#10;    const { fields } = useFieldArray({&#10;        control,&#10;        name: &quot;sessions&quot;,&#10;    });&#10;&#10;    // Get the session being configured&#10;    const currentSession = configuringIndex !== null ? watch(`sessions.${configuringIndex}`) : null;&#10;&#10;    // Notify parent component when configuration mode changes&#10;    useEffect(() =&gt; {&#10;        if (onConfigModeChange) {&#10;            onConfigModeChange(configuringIndex !== null);&#10;        }&#10;    }, [configuringIndex, onConfigModeChange]);&#10;&#10;    const handleSave = (layoutData: any) =&gt; {&#10;        if (configuringIndex === null) return;&#10;&#10;        setValue(`sessions.${configuringIndex}.layoutData`, layoutData);&#10;&#10;        if (applyToAll) {&#10;            const allSessions = getValues('sessions');&#10;            allSessions.forEach((s, i) =&gt; {&#10;                // Apply only to sessions of the same type (online/physical)&#10;                if (s.isOnline === currentSession?.isOnline) {&#10;                    setValue(`sessions.${i}.layoutData`, layoutData);&#10;                }&#10;            });&#10;            toast.success(`Seating applied to all ${currentSession?.isOnline ? 'online' : 'physical'} sessions.`);&#10;        } else {&#10;            toast.success(`Seating configured for Session ${configuringIndex + 1}.`);&#10;        }&#10;&#10;        setConfiguringIndex(null);&#10;    };&#10;&#10;    // If we're configuring a session, show the full-page configuration view&#10;    if (configuringIndex !== null &amp;&amp; currentSession) {&#10;        return (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;Button&#10;                        variant=&quot;ghost&quot;&#10;                        onClick={() =&gt; setConfiguringIndex(null)}&#10;                        className=&quot;flex items-center gap-1&quot;&#10;                    &gt;&#10;                        &lt;ArrowLeft className=&quot;h-4 w-4&quot; /&gt;&#10;                        Back to Sessions&#10;                    &lt;/Button&gt;&#10;                    &lt;h2 className=&quot;text-xl font-semibold&quot;&gt;&#10;                        Configure Seating for Session {configuringIndex + 1}&#10;                    &lt;/h2&gt;&#10;                    &lt;div&gt;&lt;/div&gt; {/* Empty div for flexbox spacing */}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-medium&quot;&gt;&#10;                        {currentSession.isOnline&#10;                            ? &quot;Online Capacity Configuration&quot;&#10;                            : &quot;Physical Seating Configuration&quot;}&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-muted-foreground text-sm&quot;&gt;&#10;                        {currentSession.isOnline&#10;                            ? &quot;Set the capacity and ticket tier for your online event.&quot;&#10;                            : &quot;Choose a layout template or create a new one, then assign your tiers.&quot;}&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div className=&quot;border rounded-md p-6 bg-card&quot;&gt;&#10;                    {currentSession.isOnline ? (&#10;                        &lt;OnlineConfigView onSave={handleSave} /&gt;&#10;                    ) : (&#10;                        &lt;PhysicalConfigView onSave={handleSave} /&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex items-center border-t pt-4 mt-8&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;Checkbox&#10;                            id=&quot;apply-to-all-seating&quot;&#10;                            checked={applyToAll}&#10;                            onCheckedChange={(checked) =&gt; setApplyToAll(checked === true)}&#10;                        /&gt;&#10;                        &lt;Label htmlFor=&quot;apply-to-all-seating&quot;&gt;&#10;                            Apply to all {currentSession.isOnline ? 'online' : 'physical'} sessions&#10;                        &lt;/Label&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    // Otherwise show the session list&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;div&gt;&#10;                &lt;h2 className=&quot;text-xl font-semibold mb-1&quot;&gt;Seating &amp; Tier Assignment&lt;/h2&gt;&#10;                &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                    Configure the seating layout and assign ticket tiers for each session.&#10;                &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;                {fields.map((field, index) =&gt; (&#10;                    &lt;SessionListItemSeating&#10;                        key={field.id}&#10;                        field={field}&#10;                        index={index}&#10;                        onConfigure={() =&gt; setConfiguringIndex(index)}&#10;                    /&gt;&#10;                ))}&#10;&#10;                {errors.sessions?.root &amp;&amp; (&#10;                    &lt;p className=&quot;text-sm font-medium text-destructive&quot;&gt;{errors.sessions.root.message}&lt;/p&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/coreDetailsStep.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/coreDetailsStep.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useForm, FormProvider} from 'react-hook-form';&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {useOrganization} from '@/providers/OrganizationProvider';&#10;import {useLimits} from '@/providers/LimitProvider';&#10;import {CategoryResponse} from '@/types/category';&#10;import {getAllCategories} from '@/lib/actions/categoryActions';&#10;import {coreDetailsSchema, CoreDetailsData} from '@/lib/validators/event';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Textarea} from '@/components/ui/textarea';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;import {&#10;    Select,&#10;    SelectContent,&#10;    SelectItem,&#10;    SelectTrigger,&#10;    SelectValue,&#10;    SelectGroup,&#10;    SelectLabel&#10;} from '@/components/ui/select';&#10;import {Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious} from &quot;@/components/ui/carousel&quot;;&#10;import Image from 'next/image';&#10;import {ImageIcon, X, PlusCircle, Upload} from 'lucide-react';&#10;import {toast} from 'sonner';&#10;import Autoplay from 'embla-carousel-autoplay';&#10;&#10;// --- Step 1: Core Details Component ---&#10;export function CoreDetailsStep({onNextAction}: { onNextAction: () =&gt; void }) {&#10;    const {organization} = useOrganization();&#10;    const {myLimits} = useLimits();&#10;    const [categories, setCategories] = useState&lt;CategoryResponse[]&gt;([]);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    const maxPhotos = myLimits?.eventLimits.maxCoverPhotos || 1;&#10;&#10;    const form = useForm&lt;CoreDetailsData&gt;({&#10;        resolver: zodResolver(coreDetailsSchema),&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            categoryId: '', // Ensure categoryId is present&#10;            isOnline: false,&#10;        },&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        getAllCategories().then(setCategories);&#10;    }, [organization]);&#10;&#10;    const handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        if (e.target.files) {&#10;            const files = Array.from(e.target.files);&#10;            if ((coverFiles.length + files.length) &gt; maxPhotos) {&#10;                toast.error(`You can only upload a maximum of ${maxPhotos} photos.`);&#10;                return;&#10;            }&#10;            setCoverFiles(prev =&gt; [...prev, ...files]);&#10;        }&#10;    };&#10;&#10;    const removeImage = (index: number) =&gt; {&#10;        setCoverFiles(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    };&#10;&#10;    function onSubmit(data: CoreDetailsData) {&#10;        console.log(&quot;Step 1 Data:&quot;, data);&#10;        console.log(&quot;Cover Files:&quot;, coverFiles);&#10;        onNextAction();&#10;    }&#10;&#10;    return (&#10;        &lt;FormProvider {...form}&gt;&#10;            &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt;&#10;                {/* Hero Cover Photos Section */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Cover Photos&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;This is the first thing people will see. Upload up&#10;                            to {maxPhotos} images.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                        {coverFiles.length &gt; 0 ? (&#10;                            &lt;Carousel plugins={[Autoplay({delay: 4000, stopOnInteraction: false})]}&gt;&#10;                                &lt;CarouselContent&gt;&#10;                                    {coverFiles.map((file, index) =&gt; (&#10;                                        &lt;CarouselItem key={index} className=&quot;relative&quot;&gt;&#10;                                            &lt;div className=&quot;aspect-[21/9] w-full relative&quot;&gt;&#10;                                                &lt;Image src={URL.createObjectURL(file)} alt={`Cover photo ${index + 1}`}&#10;                                                       fill className=&quot;object-cover rounded-lg&quot;/&gt;&#10;                                                &lt;Button type=&quot;button&quot; variant=&quot;destructive&quot; size=&quot;icon&quot;&#10;                                                        className=&quot;absolute top-4 right-4 h-8 w-8 z-10&quot;&#10;                                                        onClick={() =&gt; removeImage(index)}&gt;&lt;X&#10;                                                    className=&quot;h-4 w-4&quot;/&gt;&lt;/Button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/CarouselItem&gt;&#10;                                    ))}&#10;                                &lt;/CarouselContent&gt;&#10;                                &lt;CarouselPrevious type=&quot;button&quot;&#10;                                                  className=&quot;absolute left-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                                &lt;CarouselNext type=&quot;button&quot;&#10;                                              className=&quot;absolute right-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                            &lt;/Carousel&gt;&#10;                        ) : (&#10;                            &lt;div&#10;                                className=&quot;flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-12 text-center aspect-[21/9] w-full&quot;&gt;&#10;                                &lt;ImageIcon className=&quot;h-16 w-16 text-muted-foreground&quot;/&gt;&#10;                                &lt;p className=&quot;mt-4 text-lg font-medium&quot;&gt;Add cover photos for your event&lt;/p&gt;&#10;                                &lt;Button type=&quot;button&quot; className=&quot;mt-4&quot;&#10;                                        onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;Upload className=&quot;mr-2 h-4 w-4&quot;/&gt;Upload&#10;                                    Images&lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                        &lt;div className=&quot;mt-4 flex justify-center items-center gap-4&quot;&gt;&#10;                            {coverFiles.length &gt; 0 &amp;&amp; (&lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&#10;                                                               onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;PlusCircle&#10;                                className=&quot;mr-2 h-4 w-4&quot;/&gt;Add More&lt;/Button&gt;)}&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{coverFiles.length} of {maxPhotos} photos&#10;                                selected.&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;Input id=&quot;picture&quot; type=&quot;file&quot; multiple accept=&quot;image/*&quot; onChange={handleFileChange}&#10;                               className=&quot;hidden&quot; ref={fileInputRef}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                {/* Event Details Card with Category dropdown */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Event Details&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;Provide the core information about your event.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                        &lt;FormField control={form.control} name=&quot;title&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Event Title&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                placeholder=&quot;e.g., Annual Tech Conference 2025&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;&#10;                        {/* Category Selector as dropdown */}&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;categoryId&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Category&lt;/FormLabel&gt;&#10;                                    &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#10;                                        &lt;FormControl&gt;&#10;                                            &lt;SelectTrigger&gt;&#10;                                                &lt;SelectValue placeholder=&quot;Select a category for your event&quot;/&gt;&#10;                                            &lt;/SelectTrigger&gt;&#10;                                        &lt;/FormControl&gt;&#10;                                        &lt;SelectContent className=&quot;max-h-100&quot;&gt;&#10;                                            {categories.map((parentCat) =&gt; (&#10;                                                &lt;SelectGroup key={parentCat.id}&gt;&#10;                                                    &lt;SelectLabel&gt;{parentCat.name}&lt;/SelectLabel&gt;&#10;                                                    {parentCat.subCategories.map((subCat) =&gt; (&#10;                                                        &lt;SelectItem key={subCat.id} value={subCat.id}&gt;&#10;                                                            {subCat.name}&#10;                                                        &lt;/SelectItem&gt;&#10;                                                    ))}&#10;                                                &lt;/SelectGroup&gt;&#10;                                            ))}&#10;                                        &lt;/SelectContent&gt;&#10;                                    &lt;/Select&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;FormField control={form.control} name=&quot;description&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Short Description&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;A brief summary of your event.&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                        &lt;FormField control={form.control} name=&quot;overview&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Overview&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;Provide more details like schedule, speakers, etc.&quot;&#10;                                className=&quot;min-h-32&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;                &lt;div className=&quot;flex justify-end mt-8&quot;&gt;&#10;                    &lt;Button type=&quot;submit&quot;&gt;Next: Tiers &amp; Pricing&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/form&gt;&#10;        &lt;/FormProvider&gt;&#10;    )&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useForm, FormProvider} from 'react-hook-form';&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {useOrganization} from '@/providers/OrganizationProvider';&#10;import {useLimits} from '@/providers/LimitProvider';&#10;import {CategoryResponse} from '@/types/category';&#10;import {getAllCategories} from '@/lib/actions/categoryActions';&#10;import {coreDetailsSchema, CoreDetailsData} from '@/lib/validators/event';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Textarea} from '@/components/ui/textarea';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;import {&#10;    Select,&#10;    SelectContent,&#10;    SelectItem,&#10;    SelectTrigger,&#10;    SelectValue,&#10;    SelectGroup,&#10;    SelectLabel&#10;} from '@/components/ui/select';&#10;import {Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious} from &quot;@/components/ui/carousel&quot;;&#10;import Image from 'next/image';&#10;import {ImageIcon, X, PlusCircle, Upload} from 'lucide-react';&#10;import {toast} from 'sonner';&#10;import Autoplay from 'embla-carousel-autoplay';&#10;&#10;// Updated props interface to match the required signature&#10;interface CoreDetailsStepProps {&#10;    coverFiles: File[];&#10;    setCoverFilesAction: React.Dispatch&lt;React.SetStateAction&lt;File[]&gt;&gt;;&#10;    onNextAction?: () =&gt; void;&#10;}&#10;&#10;// --- Step 1: Core Details Component ---&#10;export function CoreDetailsStep({ coverFiles, setCoverFilesAction, onNextAction }: CoreDetailsStepProps) {&#10;    const {organization} = useOrganization();&#10;    const {myLimits} = useLimits();&#10;    const [categories, setCategories] = useState&lt;CategoryResponse[]&gt;([]);&#10;    const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    const maxPhotos = myLimits?.eventLimits.maxCoverPhotos || 1;&#10;&#10;    const form = useForm&lt;CoreDetailsData&gt;({&#10;        resolver: zodResolver(coreDetailsSchema),&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            categoryId: '', // Ensure categoryId is present&#10;            isOnline: false,&#10;        },&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        getAllCategories().then(setCategories);&#10;    }, [organization]);&#10;&#10;    const handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        if (e.target.files) {&#10;            const files = Array.from(e.target.files);&#10;            if ((coverFiles.length + files.length) &gt; maxPhotos) {&#10;                toast.error(`You can only upload a maximum of ${maxPhotos} photos.`);&#10;                return;&#10;            }&#10;            setCoverFilesAction(prev =&gt; [...prev, ...files]);&#10;        }&#10;    };&#10;&#10;    const removeImage = (index: number) =&gt; {&#10;        setCoverFilesAction(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    };&#10;&#10;    function onSubmit(data: CoreDetailsData) {&#10;        console.log(&quot;Step 1 Data:&quot;, data);&#10;        console.log(&quot;Cover Files:&quot;, coverFiles);&#10;        if (onNextAction) onNextAction();&#10;    }&#10;&#10;    return (&#10;        &lt;FormProvider {...form}&gt;&#10;            &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt;&#10;                {/* Hero Cover Photos Section */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Cover Photos&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;This is the first thing people will see. Upload up&#10;                            to {maxPhotos} images.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                        {coverFiles.length &gt; 0 ? (&#10;                            &lt;Carousel plugins={[Autoplay({delay: 4000, stopOnInteraction: false})]}&gt;&#10;                                &lt;CarouselContent&gt;&#10;                                    {coverFiles.map((file, index) =&gt; (&#10;                                        &lt;CarouselItem key={index} className=&quot;relative&quot;&gt;&#10;                                            &lt;div className=&quot;aspect-[21/9] w-full relative&quot;&gt;&#10;                                                &lt;Image src={URL.createObjectURL(file)} alt={`Cover photo ${index + 1}`}&#10;                                                       fill className=&quot;object-cover rounded-lg&quot;/&gt;&#10;                                                &lt;Button type=&quot;button&quot; variant=&quot;destructive&quot; size=&quot;icon&quot;&#10;                                                        className=&quot;absolute top-4 right-4 h-8 w-8 z-10&quot;&#10;                                                        onClick={() =&gt; removeImage(index)}&gt;&lt;X&#10;                                                    className=&quot;h-4 w-4&quot;/&gt;&lt;/Button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/CarouselItem&gt;&#10;                                    ))}&#10;                                &lt;/CarouselContent&gt;&#10;                                &lt;CarouselPrevious type=&quot;button&quot;&#10;                                                  className=&quot;absolute left-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                                &lt;CarouselNext type=&quot;button&quot;&#10;                                              className=&quot;absolute right-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                            &lt;/Carousel&gt;&#10;                        ) : (&#10;                            &lt;div&#10;                                className=&quot;flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-12 text-center aspect-[21/9] w-full&quot;&gt;&#10;                                &lt;ImageIcon className=&quot;h-16 w-16 text-muted-foreground&quot;/&gt;&#10;                                &lt;p className=&quot;mt-4 text-lg font-medium&quot;&gt;Add cover photos for your event&lt;/p&gt;&#10;                                &lt;Button type=&quot;button&quot; className=&quot;mt-4&quot;&#10;                                        onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;Upload className=&quot;mr-2 h-4 w-4&quot;/&gt;Upload&#10;                                    Images&lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                        &lt;div className=&quot;mt-4 flex justify-center items-center gap-4&quot;&gt;&#10;                            {coverFiles.length &gt; 0 &amp;&amp; (&lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&#10;                                                               onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;PlusCircle&#10;                                className=&quot;mr-2 h-4 w-4&quot;/&gt;Add More&lt;/Button&gt;)}&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{coverFiles.length} of {maxPhotos} photos&#10;                                selected.&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;Input id=&quot;picture&quot; type=&quot;file&quot; multiple accept=&quot;image/*&quot; onChange={handleFileChange}&#10;                               className=&quot;hidden&quot; ref={fileInputRef}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                {/* Event Details Card with Category dropdown */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Event Details&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;Provide the core information about your event.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                        &lt;FormField control={form.control} name=&quot;title&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Event Title&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                placeholder=&quot;e.g., Annual Tech Conference 2025&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;&#10;                        {/* Category Selector as dropdown */}&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;categoryId&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Category&lt;/FormLabel&gt;&#10;                                    &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#10;                                        &lt;FormControl&gt;&#10;                                            &lt;SelectTrigger&gt;&#10;                                                &lt;SelectValue placeholder=&quot;Select a category for your event&quot;/&gt;&#10;                                            &lt;/SelectTrigger&gt;&#10;                                        &lt;/FormControl&gt;&#10;                                        &lt;SelectContent className=&quot;max-h-100&quot;&gt;&#10;                                            {categories.map((parentCat) =&gt; (&#10;                                                &lt;SelectGroup key={parentCat.id}&gt;&#10;                                                    &lt;SelectLabel&gt;{parentCat.name}&lt;/SelectLabel&gt;&#10;                                                    {parentCat.subCategories.map((subCat) =&gt; (&#10;                                                        &lt;SelectItem key={subCat.id} value={subCat.id}&gt;&#10;                                                            {subCat.name}&#10;                                                        &lt;/SelectItem&gt;&#10;                                                    ))}&#10;                                                &lt;/SelectGroup&gt;&#10;                                            ))}&#10;                                        &lt;/SelectContent&gt;&#10;                                    &lt;/Select&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;FormField control={form.control} name=&quot;description&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Short Description&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;A brief summary of your event.&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                        &lt;FormField control={form.control} name=&quot;overview&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Overview&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;Provide more details like schedule, speakers, etc.&quot;&#10;                                className=&quot;min-h-32&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;                &lt;div className=&quot;flex justify-end mt-8&quot;&gt;&#10;                    &lt;Button type=&quot;submit&quot;&gt;Next: Tiers &amp; Pricing&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/form&gt;&#10;        &lt;/FormProvider&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/review/ReviewSessions.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/review/ReviewSessions.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {format, parseISO} from 'date-fns';&#10;import {Calendar, MapPin, Tag, Users, Clock, Armchair, LinkIcon} from 'lucide-react';&#10;import {&#10;    Accordion,&#10;    AccordionContent,&#10;    AccordionItem,&#10;    AccordionTrigger,&#10;} from &quot;@/components/ui/accordion&quot;;&#10;import {Badge} from '@/components/ui/badge';&#10;import {&#10;    SessionFormData,&#10;    SalesStartRuleType,&#10;    SessionType,&#10;    Seat,&#10;    Tier&#10;} from '@/lib/validators/event';&#10;import {&#10;    Popover,&#10;    PopoverContent,&#10;    PopoverTrigger&#10;} from '@/components/ui/popover';&#10;import {Button} from '@/components/ui/button';&#10;import {GoogleMap, useJsApiLoader, Marker} from '@react-google-maps/api';&#10;&#10;interface ReviewSessionsProps {&#10;    sessions: SessionFormData[];&#10;    tiers: Tier[];&#10;}&#10;&#10;export const ReviewSessions: React.FC&lt;ReviewSessionsProps&gt; = ({sessions, tiers}) =&gt; {&#10;    if (sessions.length === 0) return null;&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;h2 className=&quot;text-2xl font-semibold&quot;&gt;Schedule&lt;/h2&gt;&#10;            &lt;Accordion type=&quot;single&quot; collapsible className=&quot;w-full&quot;&gt;&#10;                {sessions.map((session, index) =&gt; (&#10;                    &lt;SessionAccordionItem&#10;                        key={`session-${index}`}&#10;                        session={session}&#10;                        index={index}&#10;                        tiers={tiers}&#10;                    /&gt;&#10;                ))}&#10;            &lt;/Accordion&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;interface SessionAccordionItemProps {&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;    index: number;&#10;}&#10;&#10;const SessionAccordionItem: React.FC&lt;SessionAccordionItemProps&gt; = ({session, index, tiers}) =&gt; {&#10;    const startDate = parseISO(session.startTime);&#10;    const endDate = parseISO(session.endTime);&#10;    const isOnline = session.sessionType === SessionType.ONLINE;&#10;    const {layoutData} = session;&#10;&#10;    return (&#10;        &lt;AccordionItem&#10;            value={`item-${index}`}&#10;            className=&quot;border rounded-lg mb-4 overflow-hidden&quot;&#10;        &gt;&#10;            &lt;AccordionTrigger className=&quot;px-4 py-3 hover:no-underline hover:bg-muted/40&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-3 text-left&quot;&gt;&#10;                    &lt;Calendar className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                    &lt;div&gt;&#10;                        &lt;div className=&quot;font-medium&quot;&gt;&#10;                            {format(startDate, &quot;EEEE, MMMM d, yyyy&quot;)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                            {format(startDate, &quot;h:mm a&quot;)} - {format(endDate, &quot;h:mm a&quot;)}&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Badge variant={isOnline ? &quot;secondary&quot; : &quot;default&quot;} className=&quot;ml-4&quot;&gt;&#10;                        {isOnline ? 'Online' : 'Physical'}&#10;                    &lt;/Badge&gt;&#10;                &lt;/div&gt;&#10;            &lt;/AccordionTrigger&gt;&#10;            &lt;AccordionContent className=&quot;px-4 pt-2 pb-4&quot;&gt;&#10;                &lt;div className=&quot;grid grid-cols-1 gap-6&quot;&gt;&#10;                    &lt;SessionDetails session={session}/&gt;&#10;                    {layoutData &amp;&amp; layoutData.layout.blocks.length &gt; 0 &amp;&amp; (&#10;                        &lt;SeatingInformation&#10;                            isOnline={isOnline}&#10;                            session={session}&#10;                            tiers={tiers}&#10;                        /&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/AccordionContent&gt;&#10;        &lt;/AccordionItem&gt;&#10;    );&#10;};&#10;&#10;interface SessionDetailsProps {&#10;    session: SessionFormData;&#10;}&#10;&#10;const SessionDetails: React.FC&lt;SessionDetailsProps&gt; = ({session}) =&gt; {&#10;    const startDate = parseISO(session.startTime);&#10;    const endDate = parseISO(session.endTime);&#10;    const isOnline = session.sessionType === SessionType.ONLINE;&#10;    const {venueDetails} = session;&#10;&#10;    // Calculate event duration&#10;    const getDuration = (): string =&gt; {&#10;        try {&#10;            const durationMs = endDate.getTime() - startDate.getTime();&#10;            const hours = Math.floor(durationMs / (1000 * 60 * 60));&#10;            const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));&#10;&#10;            return hours &gt; 0&#10;                ? `${hours} hour${hours !== 1 ? 's' : ''}${minutes &gt; 0 ? ` ${minutes} min` : ''}`&#10;                : `${minutes} minutes`;&#10;        } catch (e) {&#10;            console.error(&quot;Error calculating duration:&quot;, e);&#10;            return &quot;Duration unavailable&quot;;&#10;        }&#10;    };&#10;&#10;    // Sales rule description&#10;    const getSalesRuleDescription = (): string =&gt; {&#10;        switch (session.salesStartRuleType) {&#10;            case SalesStartRuleType.IMMEDIATE:&#10;                return &quot;On sale immediately&quot;;&#10;            case SalesStartRuleType.FIXED:&#10;                return session.salesStartFixedDatetime&#10;                    ? `Sales start on ${format(parseISO(session.salesStartFixedDatetime), 'MMM d, yyyy h:mm a')}`&#10;                    : &quot;Fixed date not set&quot;;&#10;            case SalesStartRuleType.ROLLING:&#10;                if (session.salesStartHoursBefore === undefined || session.salesStartHoursBefore === null || session.salesStartHoursBefore &lt; 0) {&#10;                    return &quot;Rolling hours not set or invalid&quot;;&#10;                } else if (session.salesStartHoursBefore &lt; 24) {&#10;                    return `Sales start ${session.salesStartHoursBefore} hour(s) before the session`;&#10;                } else {&#10;                    const days = Math.floor(session.salesStartHoursBefore / 24);&#10;                    const hours = session.salesStartHoursBefore % 24;&#10;                    return `Sales start ${days} day(s)${hours &gt; 0 ? ` and ${hours} hour(s)` : ''} before the session`;&#10;                }&#10;            default:&#10;                return &quot;Not set&quot;;&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;Clock className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                &lt;span&gt;Duration: {getDuration()}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-start gap-2&quot;&gt;&#10;                {isOnline ? (&#10;                    &lt;&gt;&#10;                        &lt;LinkIcon className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                        &lt;div&gt;&#10;                            &lt;div&gt;Online Event&lt;/div&gt;&#10;                            {venueDetails?.onlineLink ? (&#10;                                &lt;div className=&quot;text-sm text-muted-foreground break-all&quot;&gt;&#10;                                    {venueDetails.onlineLink}&#10;                                &lt;/div&gt;&#10;                            ) : (&#10;                                &lt;div className=&quot;text-sm text-destructive&quot;&gt;&#10;                                    Link not provided&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                ) : (&#10;                    &lt;&gt;&#10;                        &lt;MapPin className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                        &lt;div className=&quot;w-full&quot;&gt;&#10;                            {venueDetails?.name ? (&#10;                                &lt;&gt;&#10;                                    &lt;div&gt;{venueDetails.name}&lt;/div&gt;&#10;                                    {venueDetails.address &amp;&amp; (&#10;                                        &lt;div className=&quot;text-sm text-muted-foreground mb-2&quot;&gt;&#10;                                            {venueDetails.address}&#10;                                        &lt;/div&gt;&#10;                                    )}&#10;                                &lt;/&gt;&#10;                            ) : (&#10;                                &lt;div className=&quot;text-destructive&quot;&gt;&#10;                                    Venue not specified&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;Tag className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                &lt;span&gt;{getSalesRuleDescription()}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;interface SeatingInformationProps {&#10;    isOnline: boolean;&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;}&#10;&#10;const SeatingInformation: React.FC&lt;SeatingInformationProps&gt; = ({isOnline, session, tiers}) =&gt; {&#10;    const {layoutData} = session;&#10;    const {venueDetails} = session;&#10;&#10;&#10;    // For physical events with coordinates, prepare Google Map&#10;    const {isLoaded} = useJsApiLoader({&#10;        id: 'google-map-script',&#10;    const googleMapsApiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;&#10;    if (!googleMapsApiKey) {&#10;        throw new Error('Google Maps API key is missing. Please set NEXT_PUBLIC_GOOGLE_MAPS_API_KEY in your environment.');&#10;    }&#10;    const {isLoaded} = useJsApiLoader({&#10;        id: 'google-map-script',&#10;        googleMapsApiKey,&#10;    });&#10;&#10;    const mapCenter = venueDetails?.latitude &amp;&amp; venueDetails?.longitude&#10;        ? {lat: venueDetails.latitude, lng: venueDetails.longitude}&#10;        : {lat: 6.9271, lng: 79.8612}; // Default: Colombo, Sri Lanka&#10;&#10;    // Function to count seats by tier&#10;    const getSeatCountByTier = () =&gt; {&#10;        const tierCounts: Record&lt;string, number&gt; = {};&#10;&#10;        layoutData.layout.blocks.forEach(block =&gt; {&#10;            if (block.rows) {&#10;                // For seated blocks with rows&#10;                block.rows.forEach(row =&gt; {&#10;                    row.seats.forEach(seat =&gt; {&#10;                        if (seat.status !== 'RESERVED') {&#10;                            const tierId = seat.tierId || 'unassigned';&#10;                            tierCounts[tierId] = (tierCounts[tierId] || 0) + 1;&#10;                        }&#10;                    });&#10;                });&#10;            } else if (block.seats) {&#10;                // For blocks with direct seats array&#10;                block.seats.forEach(seat =&gt; {&#10;                    if (seat.status !== 'RESERVED') {&#10;                        const tierId = seat.tierId || 'unassigned';&#10;                        tierCounts[tierId] = (tierCounts[tierId] || 0) + 1;&#10;                    }&#10;                });&#10;            } else if (block.capacity &amp;&amp; block.type === 'standing_capacity') {&#10;                // For standing blocks&#10;                // Fix the TypeScript error by explicitly typing the block.seats access&#10;                const blockSeats = block.seats as Seat[] | undefined;&#10;                const tierId = blockSeats?.[0]?.tierId || 'unassigned';&#10;                tierCounts[tierId] = (tierCounts[tierId] || 0) + (block.capacity || 0);&#10;            }&#10;        });&#10;&#10;        return tierCounts;&#10;    };&#10;&#10;    const seatCountByTier = getSeatCountByTier();&#10;    const totalSeats = Object.values(seatCountByTier).reduce((sum, count) =&gt; sum + count, 0);&#10;&#10;    // Display for online events&#10;    if (isOnline) {&#10;        return (&#10;            &lt;div className=&quot;bg-muted/30 p-4 rounded-lg&quot;&gt;&#10;                &lt;div className=&quot;flex items-start gap-2 mb-2&quot;&gt;&#10;                    &lt;Users className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                    &lt;span className=&quot;font-medium&quot;&gt;Capacity Information&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-sm ml-6&quot;&gt;&#10;                    &lt;p&gt;Total capacity: {totalSeats}&lt;/p&gt;&#10;                    {Object.entries(seatCountByTier).map(([tierId, count]) =&gt; (&#10;                        &lt;div key={tierId} className=&quot;flex items-center gap-2 mt-1&quot;&gt;&#10;                            {tierId !== 'unassigned' &amp;&amp; (&#10;                                &lt;div&#10;                                    className=&quot;h-3 w-3 rounded-full&quot;&#10;                                    style={{&#10;                                        backgroundColor: getTierColor(tierId, session, tiers)&#10;                                    }}&#10;                                /&gt;&#10;                            )}&#10;                            &lt;span&gt;&#10;                                {getTierName(tierId, session, tiers)}: {count} {count === 1 ? 'seat' : 'seats'}&#10;                            &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    // Display for physical events - side by side layout&#10;    return (&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold&quot;&gt;Venue &amp; Seating Information&lt;/h3&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                {/* Left side: Google Map */}&#10;                &lt;div className=&quot;h-[300px] rounded-md overflow-hidden border&quot;&gt;&#10;                    {isLoaded ? (&#10;                        &lt;GoogleMap&#10;                            mapContainerStyle={{&#10;                                width: '100%',&#10;                                height: '100%',&#10;                            }}&#10;                            center={mapCenter}&#10;                            zoom={15}&#10;                        &gt;&#10;                            &lt;Marker position={mapCenter}/&gt;&#10;                        &lt;/GoogleMap&gt;&#10;                    ) : (&#10;                        &lt;div className=&quot;h-full w-full bg-muted flex items-center justify-center&quot;&gt;&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Loading map...&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Right side: Seating summary */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;bg-muted/30 p-4 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-start gap-2 mb-2&quot;&gt;&#10;                            &lt;Armchair className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Seating Summary&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm ml-6&quot;&gt;&#10;                            &lt;p&gt;Total capacity: {totalSeats}&lt;/p&gt;&#10;                            {Object.entries(seatCountByTier).map(([tierId, count]) =&gt; (&#10;                                &lt;div key={tierId} className=&quot;flex items-center gap-2 mt-1&quot;&gt;&#10;                                    {tierId !== 'unassigned' &amp;&amp; (&#10;                                        &lt;div&#10;                                            className=&quot;h-3 w-3 rounded-full&quot;&#10;                                            style={{&#10;                                                backgroundColor: getTierColor(tierId, session, tiers)&#10;                                            }}&#10;                                        /&gt;&#10;                                    )}&#10;                                    &lt;span&gt;&#10;                                        {getTierName(tierId, session, tiers)}: {count} {count === 1 ? 'seat' : 'seats'}&#10;                                    &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                            ))}&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Seating Layout below the map and summary */}&#10;            {layoutData &amp;&amp; (&#10;                &lt;SeatingLayout session={session} tiers={tiers}/&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;// Helper to get tier color&#10;const getTierColor = (tierId: string, session: SessionFormData, tiers: Tier[]): string =&gt; {&#10;    if (tierId === 'unassigned') return '#d1d5db'; // gray-300&#10;&#10;    // We need to check if tiers exist in the session&#10;    const tier = tiers.find(t =&gt; t.id === tierId);&#10;    return tier?.color || '#6b7280'; // gray-500 as fallback&#10;};&#10;&#10;// Helper to get tier name&#10;const getTierName = (tierId: string, session: SessionFormData, tiers: Tier[]): string =&gt; {&#10;    if (tierId === 'unassigned') return 'Unassigned';&#10;&#10;    const tier = tiers.find(t =&gt; t.id === tierId);&#10;    return tier?.name || 'Unknown Tier';&#10;};&#10;&#10;interface SeatingLayoutProps {&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;}&#10;&#10;const SeatingLayout: React.FC&lt;SeatingLayoutProps&gt; = ({session, tiers}) =&gt; {&#10;    // const [selectedSeat, setSelectedSeat] = useState&lt;{&#10;    //     seat: Seat;&#10;    //     rowLabel?: string;&#10;    //     blockName: string;&#10;    //     tier?: string;&#10;    // } | null&gt;(null);&#10;&#10;    const {layoutData} = session;&#10;&#10;    // Only render for physical events with layout data&#10;    if (!layoutData || session.sessionType !== SessionType.PHYSICAL) return null;&#10;&#10;    // const handleSeatClick = (&#10;    //     seat: Seat,&#10;    //     blockName: string,&#10;    //     rowLabel?: string&#10;    // ) =&gt; {&#10;    //     setSelectedSeat({&#10;    //         seat,&#10;    //         rowLabel,&#10;    //         blockName,&#10;    //         tier: seat.tierId ? getTierName(seat.tierId, session, tiers) : undefined&#10;    //     });&#10;    // };&#10;&#10;    return (&#10;        &lt;div className=&quot;border rounded-lg p-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold mb-4&quot;&gt;Seating Layout&lt;/h3&gt;&#10;            &lt;div className=&quot;relative bg-muted/30 min-h-[300px] p-4 rounded-lg overflow-auto&quot;&gt;&#10;                {layoutData.layout.blocks.map(block =&gt; (&#10;                    &lt;div&#10;                        key={block.id}&#10;                        className=&quot;absolute bg-card border rounded-lg p-3 shadow-sm&quot;&#10;                        style={{&#10;                            left: block.position.x,&#10;                            top: block.position.y,&#10;                            width: block.width ? `${block.width}px` : 'auto',&#10;                            height: block.height ? `${block.height}px` : 'auto'&#10;                        }}&#10;                    &gt;&#10;                        &lt;div className=&quot;text-sm font-medium mb-1&quot;&gt;{block.name}&lt;/div&gt;&#10;&#10;                        {block.type === 'seated_grid' &amp;&amp; block.rows &amp;&amp; (&#10;                            &lt;div&#10;                                className=&quot;grid gap-1&quot;&#10;                                style={{&#10;                                    gridTemplateColumns: `repeat(${block.rows[0]?.seats?.length || 1}, 1fr)`&#10;                                }}&#10;                            &gt;&#10;                                {block.rows.map(row =&gt;&#10;                                    row.seats.map(seat =&gt; (&#10;                                        &lt;Popover key={seat.id}&gt;&#10;                                            &lt;PopoverTrigger asChild&gt;&#10;                                                &lt;Button&#10;                                                    type=&quot;button&quot;&#10;                                                    variant=&quot;ghost&quot;&#10;                                                    className=&quot;h-6 w-6 p-0 rounded-full text-xs font-mono&quot;&#10;                                                    style={{&#10;                                                        backgroundColor: seat.tierId ?&#10;                                                            `${getTierColor(seat.tierId, session, tiers)}80` : // 50% opacity&#10;                                                            undefined,&#10;                                                        opacity: seat.status === 'RESERVED' ? 0.3 : 1&#10;                                                    }}&#10;                                                    // onClick={() =&gt; handleSeatClick(seat, block.name, row.label)}&#10;                                                &gt;&#10;                                                    {seat.label}&#10;                                                &lt;/Button&gt;&#10;                                            &lt;/PopoverTrigger&gt;&#10;                                            &lt;PopoverContent side=&quot;top&quot; className=&quot;w-60 p-0&quot;&gt;&#10;                                                &lt;div className=&quot;p-4&quot;&gt;&#10;                                                    &lt;div className=&quot;font-semibold mb-2&quot;&gt;Seat Information&lt;/div&gt;&#10;                                                    &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Block:&lt;/span&gt;&#10;                                                            &lt;span&gt;{block.name}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Row:&lt;/span&gt;&#10;                                                            &lt;span&gt;{row.label}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Seat:&lt;/span&gt;&#10;                                                            &lt;span&gt;{seat.label}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Status:&lt;/span&gt;&#10;                                                            &lt;Badge&#10;                                                                variant={seat.status === 'RESERVED' ? 'destructive' : 'outline'}&gt;&#10;                                                                {seat.status || 'Available'}&#10;                                                            &lt;/Badge&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Tier:&lt;/span&gt;&#10;                                                            &lt;div className=&quot;flex items-center gap-1&quot;&gt;&#10;                                                                {seat.tierId &amp;&amp; (&#10;                                                                    &lt;div&#10;                                                                        className=&quot;h-3 w-3 rounded-full&quot;&#10;                                                                        style={{&#10;                                                                            backgroundColor: getTierColor(seat.tierId, session, tiers)&#10;                                                                        }}&#10;                                                                    /&gt;&#10;                                                                )}&#10;                                                                &lt;span&gt;&#10;                                                                    {seat.tierId ? getTierName(seat.tierId, session, tiers) : 'Unassigned'}&#10;                                                                &lt;/span&gt;&#10;                                                            &lt;/div&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/PopoverContent&gt;&#10;                                        &lt;/Popover&gt;&#10;                                    ))&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {block.type === 'standing_capacity' &amp;&amp; (&#10;                            &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;                                &lt;p className=&quot;text-sm text-center&quot;&gt;&#10;                                    &lt;span className=&quot;block font-medium&quot;&gt;Standing Area&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-muted-foreground&quot;&gt;&#10;                                        Capacity: {block.capacity || 0}&#10;                                    &lt;/span&gt;&#10;                                &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {block.type === 'non_sellable' &amp;&amp; (&#10;                            &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;                                &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                                    Non-sellable area&#10;                                &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {format, parseISO} from 'date-fns';&#10;import {Calendar, MapPin, Tag, Users, Clock, Armchair, LinkIcon} from 'lucide-react';&#10;import {&#10;    Accordion,&#10;    AccordionContent,&#10;    AccordionItem,&#10;    AccordionTrigger,&#10;} from &quot;@/components/ui/accordion&quot;;&#10;import {Badge} from '@/components/ui/badge';&#10;import {&#10;    SessionFormData,&#10;    SalesStartRuleType,&#10;    SessionType,&#10;    Seat,&#10;    Tier&#10;} from '@/lib/validators/event';&#10;import {&#10;    Popover,&#10;    PopoverContent,&#10;    PopoverTrigger&#10;} from '@/components/ui/popover';&#10;import {Button} from '@/components/ui/button';&#10;import {GoogleMap, useJsApiLoader, Marker} from '@react-google-maps/api';&#10;&#10;interface ReviewSessionsProps {&#10;    sessions: SessionFormData[];&#10;    tiers: Tier[];&#10;}&#10;&#10;export const ReviewSessions: React.FC&lt;ReviewSessionsProps&gt; = ({sessions, tiers}) =&gt; {&#10;    if (sessions.length === 0) return null;&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;h2 className=&quot;text-2xl font-semibold&quot;&gt;Schedule&lt;/h2&gt;&#10;            &lt;Accordion type=&quot;single&quot; collapsible className=&quot;w-full&quot;&gt;&#10;                {sessions.map((session, index) =&gt; (&#10;                    &lt;SessionAccordionItem&#10;                        key={`session-${index}`}&#10;                        session={session}&#10;                        index={index}&#10;                        tiers={tiers}&#10;                    /&gt;&#10;                ))}&#10;            &lt;/Accordion&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;interface SessionAccordionItemProps {&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;    index: number;&#10;}&#10;&#10;const SessionAccordionItem: React.FC&lt;SessionAccordionItemProps&gt; = ({session, index, tiers}) =&gt; {&#10;    const startDate = parseISO(session.startTime);&#10;    const endDate = parseISO(session.endTime);&#10;    const isOnline = session.sessionType === SessionType.ONLINE;&#10;    const {layoutData} = session;&#10;&#10;    return (&#10;        &lt;AccordionItem&#10;            value={`item-${index}`}&#10;            className=&quot;border rounded-lg mb-4 overflow-hidden&quot;&#10;        &gt;&#10;            &lt;AccordionTrigger className=&quot;px-4 py-3 hover:no-underline hover:bg-muted/40&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-3 text-left&quot;&gt;&#10;                    &lt;Calendar className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                    &lt;div&gt;&#10;                        &lt;div className=&quot;font-medium&quot;&gt;&#10;                            {format(startDate, &quot;EEEE, MMMM d, yyyy&quot;)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                            {format(startDate, &quot;h:mm a&quot;)} - {format(endDate, &quot;h:mm a&quot;)}&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Badge variant={isOnline ? &quot;secondary&quot; : &quot;default&quot;} className=&quot;ml-4&quot;&gt;&#10;                        {isOnline ? 'Online' : 'Physical'}&#10;                    &lt;/Badge&gt;&#10;                &lt;/div&gt;&#10;            &lt;/AccordionTrigger&gt;&#10;            &lt;AccordionContent className=&quot;px-4 pt-2 pb-4&quot;&gt;&#10;                &lt;div className=&quot;grid grid-cols-1 gap-6&quot;&gt;&#10;                    &lt;SessionDetails session={session}/&gt;&#10;                    {layoutData &amp;&amp; layoutData.layout.blocks.length &gt; 0 &amp;&amp; (&#10;                        &lt;SeatingInformation&#10;                            isOnline={isOnline}&#10;                            session={session}&#10;                            tiers={tiers}&#10;                        /&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/AccordionContent&gt;&#10;        &lt;/AccordionItem&gt;&#10;    );&#10;};&#10;&#10;interface SessionDetailsProps {&#10;    session: SessionFormData;&#10;}&#10;&#10;const SessionDetails: React.FC&lt;SessionDetailsProps&gt; = ({session}) =&gt; {&#10;    const startDate = parseISO(session.startTime);&#10;    const endDate = parseISO(session.endTime);&#10;    const isOnline = session.sessionType === SessionType.ONLINE;&#10;    const {venueDetails} = session;&#10;&#10;    // Calculate event duration&#10;    const getDuration = (): string =&gt; {&#10;        try {&#10;            const durationMs = endDate.getTime() - startDate.getTime();&#10;            const hours = Math.floor(durationMs / (1000 * 60 * 60));&#10;            const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));&#10;&#10;            return hours &gt; 0&#10;                ? `${hours} hour${hours !== 1 ? 's' : ''}${minutes &gt; 0 ? ` ${minutes} min` : ''}`&#10;                : `${minutes} minutes`;&#10;        } catch (e) {&#10;            console.error(&quot;Error calculating duration:&quot;, e);&#10;            return &quot;Duration unavailable&quot;;&#10;        }&#10;    };&#10;&#10;    // Sales rule description&#10;    const getSalesRuleDescription = (): string =&gt; {&#10;        switch (session.salesStartRuleType) {&#10;            case SalesStartRuleType.IMMEDIATE:&#10;                return &quot;On sale immediately&quot;;&#10;            case SalesStartRuleType.FIXED:&#10;                return session.salesStartFixedDatetime&#10;                    ? `Sales start on ${format(parseISO(session.salesStartFixedDatetime), 'MMM d, yyyy h:mm a')}`&#10;                    : &quot;Fixed date not set&quot;;&#10;            case SalesStartRuleType.ROLLING:&#10;                if (session.salesStartHoursBefore === undefined || session.salesStartHoursBefore === null || session.salesStartHoursBefore &lt; 0) {&#10;                    return &quot;Rolling hours not set or invalid&quot;;&#10;                } else if (session.salesStartHoursBefore &lt; 24) {&#10;                    return `Sales start ${session.salesStartHoursBefore} hour(s) before the session`;&#10;                } else {&#10;                    const days = Math.floor(session.salesStartHoursBefore / 24);&#10;                    const hours = session.salesStartHoursBefore % 24;&#10;                    return `Sales start ${days} day(s)${hours &gt; 0 ? ` and ${hours} hour(s)` : ''} before the session`;&#10;                }&#10;            default:&#10;                return &quot;Not set&quot;;&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;Clock className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                &lt;span&gt;Duration: {getDuration()}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-start gap-2&quot;&gt;&#10;                {isOnline ? (&#10;                    &lt;&gt;&#10;                        &lt;LinkIcon className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                        &lt;div&gt;&#10;                            &lt;div&gt;Online Event&lt;/div&gt;&#10;                            {venueDetails?.onlineLink ? (&#10;                                &lt;div className=&quot;text-sm text-muted-foreground break-all&quot;&gt;&#10;                                    {venueDetails.onlineLink}&#10;                                &lt;/div&gt;&#10;                            ) : (&#10;                                &lt;div className=&quot;text-sm text-destructive&quot;&gt;&#10;                                    Link not provided&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                ) : (&#10;                    &lt;&gt;&#10;                        &lt;MapPin className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                        &lt;div className=&quot;w-full&quot;&gt;&#10;                            {venueDetails?.name ? (&#10;                                &lt;&gt;&#10;                                    &lt;div&gt;{venueDetails.name}&lt;/div&gt;&#10;                                    {venueDetails.address &amp;&amp; (&#10;                                        &lt;div className=&quot;text-sm text-muted-foreground mb-2&quot;&gt;&#10;                                            {venueDetails.address}&#10;                                        &lt;/div&gt;&#10;                                    )}&#10;                                &lt;/&gt;&#10;                            ) : (&#10;                                &lt;div className=&quot;text-destructive&quot;&gt;&#10;                                    Venue not specified&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;Tag className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                &lt;span&gt;{getSalesRuleDescription()}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;interface SeatingInformationProps {&#10;    isOnline: boolean;&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;}&#10;&#10;const SeatingInformation: React.FC&lt;SeatingInformationProps&gt; = ({isOnline, session, tiers}) =&gt; {&#10;    const {layoutData} = session;&#10;    const {venueDetails} = session;&#10;    &#10;    // For physical events with coordinates, prepare Google Map&#10;    const googleMapsApiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;&#10;    if (!googleMapsApiKey) {&#10;        console.error('Google Maps API key is missing. Please set NEXT_PUBLIC_GOOGLE_MAPS_API_KEY in your environment.');&#10;    }&#10;    &#10;    const {isLoaded} = useJsApiLoader({&#10;        id: 'google-map-script',&#10;        googleMapsApiKey: googleMapsApiKey || '',&#10;    });&#10;&#10;    const mapCenter = venueDetails?.latitude &amp;&amp; venueDetails?.longitude&#10;        ? {lat: venueDetails.latitude, lng: venueDetails.longitude}&#10;        : {lat: 6.9271, lng: 79.8612}; // Default: Colombo, Sri Lanka&#10;&#10;    // Function to count seats by tier&#10;    const getSeatCountByTier = () =&gt; {&#10;        const tierCounts: Record&lt;string, number&gt; = {};&#10;&#10;        layoutData.layout.blocks.forEach(block =&gt; {&#10;            if (block.rows) {&#10;                // For seated blocks with rows&#10;                block.rows.forEach(row =&gt; {&#10;                    row.seats.forEach(seat =&gt; {&#10;                        if (seat.status !== 'RESERVED') {&#10;                            const tierId = seat.tierId || 'unassigned';&#10;                            tierCounts[tierId] = (tierCounts[tierId] || 0) + 1;&#10;                        }&#10;                    });&#10;                });&#10;            } else if (block.seats) {&#10;                // For blocks with direct seats array&#10;                block.seats.forEach(seat =&gt; {&#10;                    if (seat.status !== 'RESERVED') {&#10;                        const tierId = seat.tierId || 'unassigned';&#10;                        tierCounts[tierId] = (tierCounts[tierId] || 0) + 1;&#10;                    }&#10;                });&#10;            } else if (block.capacity &amp;&amp; block.type === 'standing_capacity') {&#10;                // For standing blocks&#10;                // Fix the TypeScript error by explicitly typing the block.seats access&#10;                const blockSeats = block.seats as Seat[] | undefined;&#10;                const tierId = blockSeats?.[0]?.tierId || 'unassigned';&#10;                tierCounts[tierId] = (tierCounts[tierId] || 0) + (block.capacity || 0);&#10;            }&#10;        });&#10;&#10;        return tierCounts;&#10;    };&#10;&#10;    const seatCountByTier = getSeatCountByTier();&#10;    const totalSeats = Object.values(seatCountByTier).reduce((sum, count) =&gt; sum + count, 0);&#10;&#10;    // Display for online events&#10;    if (isOnline) {&#10;        return (&#10;            &lt;div className=&quot;bg-muted/30 p-4 rounded-lg&quot;&gt;&#10;                &lt;div className=&quot;flex items-start gap-2 mb-2&quot;&gt;&#10;                    &lt;Users className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                    &lt;span className=&quot;font-medium&quot;&gt;Capacity Information&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-sm ml-6&quot;&gt;&#10;                    &lt;p&gt;Total capacity: {totalSeats}&lt;/p&gt;&#10;                    {Object.entries(seatCountByTier).map(([tierId, count]) =&gt; (&#10;                        &lt;div key={tierId} className=&quot;flex items-center gap-2 mt-1&quot;&gt;&#10;                            {tierId !== 'unassigned' &amp;&amp; (&#10;                                &lt;div&#10;                                    className=&quot;h-3 w-3 rounded-full&quot;&#10;                                    style={{&#10;                                        backgroundColor: getTierColor(tierId, session, tiers)&#10;                                    }}&#10;                                /&gt;&#10;                            )}&#10;                            &lt;span&gt;&#10;                                {getTierName(tierId, session, tiers)}: {count} {count === 1 ? 'seat' : 'seats'}&#10;                            &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    // Display for physical events - side by side layout&#10;    return (&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold&quot;&gt;Venue &amp; Seating Information&lt;/h3&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                {/* Left side: Google Map */}&#10;                &lt;div className=&quot;h-[300px] rounded-md overflow-hidden border&quot;&gt;&#10;                    {isLoaded ? (&#10;                        &lt;GoogleMap&#10;                            mapContainerStyle={{&#10;                                width: '100%',&#10;                                height: '100%',&#10;                            }}&#10;                            center={mapCenter}&#10;                            zoom={15}&#10;                        &gt;&#10;                            &lt;Marker position={mapCenter}/&gt;&#10;                        &lt;/GoogleMap&gt;&#10;                    ) : (&#10;                        &lt;div className=&quot;h-full w-full bg-muted flex items-center justify-center&quot;&gt;&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Loading map...&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Right side: Seating summary */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;bg-muted/30 p-4 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-start gap-2 mb-2&quot;&gt;&#10;                            &lt;Armchair className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Seating Summary&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm ml-6&quot;&gt;&#10;                            &lt;p&gt;Total capacity: {totalSeats}&lt;/p&gt;&#10;                            {Object.entries(seatCountByTier).map(([tierId, count]) =&gt; (&#10;                                &lt;div key={tierId} className=&quot;flex items-center gap-2 mt-1&quot;&gt;&#10;                                    {tierId !== 'unassigned' &amp;&amp; (&#10;                                        &lt;div&#10;                                            className=&quot;h-3 w-3 rounded-full&quot;&#10;                                            style={{&#10;                                                backgroundColor: getTierColor(tierId, session, tiers)&#10;                                            }}&#10;                                        /&gt;&#10;                                    )}&#10;                                    &lt;span&gt;&#10;                                        {getTierName(tierId, session, tiers)}: {count} {count === 1 ? 'seat' : 'seats'}&#10;                                    &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                            ))}&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Seating Layout below the map and summary */}&#10;            {layoutData &amp;&amp; (&#10;                &lt;SeatingLayout session={session} tiers={tiers}/&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;// Helper to get tier color&#10;const getTierColor = (tierId: string, session: SessionFormData, tiers: Tier[]): string =&gt; {&#10;    if (tierId === 'unassigned') return '#d1d5db'; // gray-300&#10;&#10;    // We need to check if tiers exist in the session&#10;    const tier = tiers.find(t =&gt; t.id === tierId);&#10;    return tier?.color || '#6b7280'; // gray-500 as fallback&#10;};&#10;&#10;// Helper to get tier name&#10;const getTierName = (tierId: string, session: SessionFormData, tiers: Tier[]): string =&gt; {&#10;    if (tierId === 'unassigned') return 'Unassigned';&#10;&#10;    const tier = tiers.find(t =&gt; t.id === tierId);&#10;    return tier?.name || 'Unknown Tier';&#10;};&#10;&#10;interface SeatingLayoutProps {&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;}&#10;&#10;const SeatingLayout: React.FC&lt;SeatingLayoutProps&gt; = ({session, tiers}) =&gt; {&#10;    // const [selectedSeat, setSelectedSeat] = useState&lt;{&#10;    //     seat: Seat;&#10;    //     rowLabel?: string;&#10;    //     blockName: string;&#10;    //     tier?: string;&#10;    // } | null&gt;(null);&#10;&#10;    const {layoutData} = session;&#10;&#10;    // Only render for physical events with layout data&#10;    if (!layoutData || session.sessionType !== SessionType.PHYSICAL) return null;&#10;&#10;    // const handleSeatClick = (&#10;    //     seat: Seat,&#10;    //     blockName: string,&#10;    //     rowLabel?: string&#10;    // ) =&gt; {&#10;    //     setSelectedSeat({&#10;    //         seat,&#10;    //         rowLabel,&#10;    //         blockName,&#10;    //         tier: seat.tierId ? getTierName(seat.tierId, session, tiers) : undefined&#10;    //     });&#10;    // };&#10;&#10;    return (&#10;        &lt;div className=&quot;border rounded-lg p-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold mb-4&quot;&gt;Seating Layout&lt;/h3&gt;&#10;            &lt;div className=&quot;relative bg-muted/30 min-h-[300px] p-4 rounded-lg overflow-auto&quot;&gt;&#10;                {layoutData.layout.blocks.map(block =&gt; (&#10;                    &lt;div&#10;                        key={block.id}&#10;                        className=&quot;absolute bg-card border rounded-lg p-3 shadow-sm&quot;&#10;                        style={{&#10;                            left: block.position.x,&#10;                            top: block.position.y,&#10;                            width: block.width ? `${block.width}px` : 'auto',&#10;                            height: block.height ? `${block.height}px` : 'auto'&#10;                        }}&#10;                    &gt;&#10;                        &lt;div className=&quot;text-sm font-medium mb-1&quot;&gt;{block.name}&lt;/div&gt;&#10;&#10;                        {block.type === 'seated_grid' &amp;&amp; block.rows &amp;&amp; (&#10;                            &lt;div&#10;                                className=&quot;grid gap-1&quot;&#10;                                style={{&#10;                                    gridTemplateColumns: `repeat(${block.rows[0]?.seats?.length || 1}, 1fr)`&#10;                                }}&#10;                            &gt;&#10;                                {block.rows.map(row =&gt;&#10;                                    row.seats.map(seat =&gt; (&#10;                                        &lt;Popover key={seat.id}&gt;&#10;                                            &lt;PopoverTrigger asChild&gt;&#10;                                                &lt;Button&#10;                                                    type=&quot;button&quot;&#10;                                                    variant=&quot;ghost&quot;&#10;                                                    className=&quot;h-6 w-6 p-0 rounded-full text-xs font-mono&quot;&#10;                                                    style={{&#10;                                                        backgroundColor: seat.tierId ?&#10;                                                            `${getTierColor(seat.tierId, session, tiers)}80` : // 50% opacity&#10;                                                            undefined,&#10;                                                        opacity: seat.status === 'RESERVED' ? 0.3 : 1&#10;                                                    }}&#10;                                                    // onClick={() =&gt; handleSeatClick(seat, block.name, row.label)}&#10;                                                &gt;&#10;                                                    {seat.label}&#10;                                                &lt;/Button&gt;&#10;                                            &lt;/PopoverTrigger&gt;&#10;                                            &lt;PopoverContent side=&quot;top&quot; className=&quot;w-60 p-0&quot;&gt;&#10;                                                &lt;div className=&quot;p-4&quot;&gt;&#10;                                                    &lt;div className=&quot;font-semibold mb-2&quot;&gt;Seat Information&lt;/div&gt;&#10;                                                    &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Block:&lt;/span&gt;&#10;                                                            &lt;span&gt;{block.name}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Row:&lt;/span&gt;&#10;                                                            &lt;span&gt;{row.label}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Seat:&lt;/span&gt;&#10;                                                            &lt;span&gt;{seat.label}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Status:&lt;/span&gt;&#10;                                                            &lt;Badge&#10;                                                                variant={seat.status === 'RESERVED' ? 'destructive' : 'outline'}&gt;&#10;                                                                {seat.status || 'Available'}&#10;                                                            &lt;/Badge&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Tier:&lt;/span&gt;&#10;                                                            &lt;div className=&quot;flex items-center gap-1&quot;&gt;&#10;                                                                {seat.tierId &amp;&amp; (&#10;                                                                    &lt;div&#10;                                                                        className=&quot;h-3 w-3 rounded-full&quot;&#10;                                                                        style={{&#10;                                                                            backgroundColor: getTierColor(seat.tierId, session, tiers)&#10;                                                                        }}&#10;                                                                    /&gt;&#10;                                                                )}&#10;                                                                &lt;span&gt;&#10;                                                                    {seat.tierId ? getTierName(seat.tierId, session, tiers) : 'Unassigned'}&#10;                                                                &lt;/span&gt;&#10;                                                            &lt;/div&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/PopoverContent&gt;&#10;                                        &lt;/Popover&gt;&#10;                                    ))&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {block.type === 'standing_capacity' &amp;&amp; (&#10;                            &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;                                &lt;p className=&quot;text-sm text-center&quot;&gt;&#10;                                    &lt;span className=&quot;block font-medium&quot;&gt;Standing Area&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-muted-foreground&quot;&gt;&#10;                                        Capacity: {block.capacity || 0}&#10;                                    &lt;/span&gt;&#10;                                &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {block.type === 'non_sellable' &amp;&amp; (&#10;                            &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;                                &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                                    Non-sellable area&#10;                                &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx.new">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx.new" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useEffect, useState} from 'react';&#10;import {CoreDetailsStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/CoreDetailsStep&quot;;&#10;import {Progress} from &quot;@/components/ui/progress&quot;;&#10;import {CreateEventRequest} from &quot;@/types/event&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {FormProvider, useForm} from &quot;react-hook-form&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {TiersStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/TierStep&quot;;&#10;import {zodResolver} from &quot;@hookform/resolvers/zod&quot;;&#10;import {coreDetailsSchema, tiersSchema} from &quot;@/lib/validators/event&quot;;&#10;import {WizardSidebar} from &quot;../_components/WizardSideBar&quot;;&#10;import {useSidebar} from &quot;@/components/ui/sidebar&quot;;&#10;&#10;// --- Main Wizard Parent Component ---&#10;export default function CreateEventPage() {&#10;    const [step, setStep] = useState(1);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const totalSteps = 5;&#10;    const {setOpen} = useSidebar();&#10;    &#10;    const steps = [&#10;        {number: 1, title: &quot;Core Details&quot;, description: &quot;Name, category, and location&quot;},&#10;        {number: 2, title: &quot;Tiers &amp; Pricing&quot;, description: &quot;Set your ticket prices&quot;},&#10;        {number: 3, title: &quot;Scheduling&quot;, description: &quot;Add dates and times&quot;},&#10;        {number: 4, title: &quot;Seating&quot;, description: &quot;Configure seating maps&quot;},&#10;        {number: 5, title: &quot;Review &amp; Publish&quot;, description: &quot;Final check before submission&quot;},&#10;    ];&#10;&#10;    // Collapse the main sidebar when component mounts&#10;    useEffect(() =&gt; {&#10;        setOpen(false);&#10;    }, [setOpen]);&#10;&#10;    // ✅ The single form instance for the entire wizard is created here.&#10;    const methods = useForm&lt;CreateEventRequest&gt;({&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            organizationId: '', // Should be set from context/params&#10;            categoryId: '',&#10;            isOnline: false,&#10;            tiers: [],&#10;            sessions: [],&#10;        },&#10;        mode: 'onSubmit', // Only validate when explicitly triggered&#10;    });&#10;&#10;    // Update the validation schema based on the current step&#10;    useEffect(() =&gt; {&#10;        if (step === 1) {&#10;            methods.clearErrors();&#10;        } else if (step === 2) {&#10;            methods.clearErrors();&#10;        }&#10;    }, [step, methods]);&#10;&#10;    const validateCoreDetails = async () =&gt; {&#10;        try {&#10;            // Check for cover photos&#10;            if (coverFiles.length === 0) {&#10;                toast.error(&quot;Please upload at least one cover photo.&quot;);&#10;                return false;&#10;            }&#10;            &#10;            // Get form values for core details&#10;            const values = methods.getValues();&#10;            const coreData = {&#10;                title: values.title,&#10;                description: values.description || &quot;&quot;,&#10;                overview: values.overview || &quot;&quot;,&#10;                categoryId: values.categoryId || &quot;&quot;,&#10;                isOnline: values.isOnline || false,&#10;                venueId: values.venueId,&#10;                onlineLink: values.onlineLink,&#10;                locationDescription: values.locationDescription,&#10;            };&#10;            &#10;            // Validate with Zod schema&#10;            const result = coreDetailsSchema.safeParse(coreData);&#10;            &#10;            if (!result.success) {&#10;                // Show validation errors&#10;                result.error.errors.forEach(err =&gt; {&#10;                    toast.error(`${err.path.join('.')}: ${err.message}`);&#10;                });&#10;                &#10;                // Also set form errors for field highlighting&#10;                result.error.errors.forEach(err =&gt; {&#10;                    const path = err.path.join('.') as keyof CreateEventRequest;&#10;                    methods.setError(path, { &#10;                        type: 'manual', &#10;                        message: err.message &#10;                    });&#10;                });&#10;                &#10;                return false;&#10;            }&#10;            &#10;            return true;&#10;        } catch (error: any) {&#10;            console.error(&quot;Validation error:&quot;, error);&#10;            toast.error(&quot;Please check all required fields&quot;);&#10;            return false;&#10;        }&#10;    };&#10;&#10;    const validateTiers = async () =&gt; {&#10;        try {&#10;            // Get tiers data&#10;            const values = methods.getValues();&#10;            const tiersData = { tiers: values.tiers || [] };&#10;            &#10;            // Validate with Zod schema&#10;            const result = tiersSchema.safeParse(tiersData);&#10;            &#10;            if (!result.success) {&#10;                // Show validation errors&#10;                result.error.errors.forEach(err =&gt; {&#10;                    toast.error(`${err.message}`);&#10;                });&#10;                return false;&#10;            }&#10;            &#10;            return true;&#10;        } catch (error: any) {&#10;            console.error(&quot;Tier validation error:&quot;, error);&#10;            toast.error(&quot;Please add at least one tier with valid information&quot;);&#10;            return false;&#10;        }&#10;    };&#10;&#10;    const onNext = async () =&gt; {&#10;        let isValid = false;&#10;        &#10;        if (step === 1) {&#10;            isValid = await validateCoreDetails();&#10;        } else if (step === 2) {&#10;            isValid = await validateTiers();&#10;        } else {&#10;            // For future steps that don't have validation yet&#10;            isValid = true;&#10;        }&#10;&#10;        if (isValid) {&#10;            setStep(s =&gt; Math.min(totalSteps, s + 1));&#10;        }&#10;    };&#10;&#10;    const onPrev = () =&gt; setStep(s =&gt; Math.max(1, s - 1));&#10;&#10;    const onSubmit = async (data: CreateEventRequest) =&gt; {&#10;        // Perform final validation before submission&#10;        let isValid = true;&#10;        &#10;        // Validate the current step first&#10;        if (step === 1) {&#10;            isValid = await validateCoreDetails();&#10;        } else if (step === 2) {&#10;            isValid = await validateTiers();&#10;        }&#10;        &#10;        if (isValid) {&#10;            console.log(&quot;Final Assembled Form Data:&quot;, data);&#10;            console.log(&quot;Final Cover Files:&quot;, coverFiles);&#10;            // Here you would call your createEvent API action&#10;            toast.success(&quot;Event submitted for approval!&quot;);&#10;        }&#10;    };&#10;&#10;    const renderStep = () =&gt; {&#10;        switch (step) {&#10;            case 1:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;            case 2:&#10;                return &lt;TiersStep/&gt;;&#10;            // Add cases for other steps here&#10;            default:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;flex min-h-screen bg-muted/40&quot;&gt;&#10;            &lt;WizardSidebar currentStep={step} steps={steps}/&gt;&#10;            &lt;main className=&quot;flex-1 p-4 md:p-8 overflow-y-auto ml-72&quot;&gt;&#10;                &lt;div className=&quot;max-w-4xl mx-auto&quot;&gt;&#10;                    &lt;div className=&quot;mb-8&quot;&gt;&#10;                        &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Step {step} of {totalSteps}&lt;/p&gt;&#10;                        &lt;Progress value={(step / totalSteps) * 100} className=&quot;mt-2&quot;/&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* ✅ The FormProvider broadcasts the form state to all children */}&#10;                    &lt;FormProvider {...methods}&gt;&#10;                        &lt;form onSubmit={methods.handleSubmit(onSubmit)}&gt;&#10;                            {renderStep()}&#10;&#10;                            &lt;div className=&quot;flex justify-between mt-8&quot;&gt;&#10;                                &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; onClick={onPrev} disabled={step === 1}&gt;&#10;                                    Previous&#10;                                &lt;/Button&gt;&#10;                                {step &lt; totalSteps ? (&#10;                                    &lt;Button type=&quot;button&quot; onClick={onNext}&gt;&#10;                                        Next&#10;                                    &lt;/Button&gt;&#10;                                ) : (&#10;                                    &lt;Button type=&quot;submit&quot;&gt;&#10;                                        Submit for Approval&#10;                                    &lt;/Button&gt;&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        &lt;/form&gt;&#10;                    &lt;/FormProvider&gt;&#10;                &lt;/div&gt;&#10;            &lt;/main&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/actions/eventActions.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/actions/eventActions.ts" />
              <option name="originalContent" value="import {apiFetch} from '@/lib/api';&#10;import {CreateEventFormData} from '@/lib/validators/event';&#10;import {EventDetailDTO, EventStatus, EventSummaryDTO} from '@/lib/validators/event';&#10;&#10;import {PaginatedResponse} from &quot;@/types/paginatedResponse&quot;;&#10;import {EventResponseDTO} from &quot;@/types/event&quot;;&#10;&#10;const API_BASE_PATH = '/event-seating/v1/events';&#10;&#10;// ================================================================================&#10;// General User &amp; Organizer Actions&#10;// ================================================================================&#10;&#10;/**&#10; * Creates a new event.&#10; */&#10;export const createEvent = (eventData: CreateEventFormData, coverImages: File[]): Promise&lt;EventResponseDTO&gt; =&gt; {&#10;    const formData = new FormData();&#10;    formData.append('request', JSON.stringify(eventData));&#10;    if (coverImages?.length &gt; 0) {&#10;        coverImages.forEach(file =&gt; formData.append('coverImages', file));&#10;    }&#10;    return apiFetch&lt;EventResponseDTO&gt;(API_BASE_PATH, {&#10;        method: 'POST',&#10;        body: formData,&#10;    });&#10;};&#10;&#10;/**&#10; * Fetches event details for an event the current user OWNS.&#10; */&#10;export const getMyEventById = (eventId: string): Promise&lt;EventDetailDTO&gt; =&gt; {&#10;    return apiFetch&lt;EventDetailDTO&gt;(`${API_BASE_PATH}/${eventId}`);&#10;};&#10;&#10;/**&#10; * Fetches a paginated list of events for an organization the current user OWNS.&#10; */&#10;export const getMyOrganizationEvents = (&#10;    organizationId: string,&#10;    status?: EventStatus,&#10;    search?: string,&#10;    page: number = 0,&#10;    size: number = 10&#10;): Promise&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({&#10;        page: page.toString(),&#10;        size: size.toString(),&#10;    });&#10;    if (status) params.append('status', status);&#10;    if (search) params.append('search', search);&#10;&#10;    return apiFetch&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt;(`${API_BASE_PATH}/organization/${organizationId}?${params.toString()}`);&#10;};&#10;&#10;/**&#10; * Deletes an event the current user OWNS.&#10; */&#10;export const deleteEvent = (eventId: string): Promise&lt;void&gt; =&gt; {&#10;    return apiFetch&lt;void&gt;(`${API_BASE_PATH}/${eventId}`, {&#10;        method: 'DELETE',&#10;    });&#10;};&#10;&#10;&#10;// ================================================================================&#10;// Administrator-Only Actions&#10;// ================================================================================&#10;&#10;/**&#10; * [ADMIN] Fetches event details for ANY event by its ID.&#10; */&#10;export const getAnyEventById_Admin = (eventId: string): Promise&lt;EventDetailDTO&gt; =&gt; {&#10;    return apiFetch&lt;EventDetailDTO&gt;(`${API_BASE_PATH}/admin/${eventId}`);&#10;};&#10;&#10;/**&#10; * [ADMIN] Fetches a paginated list of ALL events in the system.&#10; */&#10;export const getAllEvents_Admin = (&#10;    status?: EventStatus,&#10;    search?: string,&#10;    page: number = 0,&#10;    size: number = 10&#10;): Promise&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({&#10;        page: page.toString(),&#10;        size: size.toString(),&#10;    });&#10;    if (status) params.append('status', status);&#10;    if (search) params.append('search', search);&#10;&#10;    return apiFetch&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt;(`${API_BASE_PATH}/admin/all?${params.toString()}`);&#10;};&#10;&#10;/**&#10; * [ADMIN] Fetches a paginated list of events for ANY organization.&#10; */&#10;export const getAnyOrganizationEvents_Admin = (&#10;    organizationId: string,&#10;    status?: EventStatus,&#10;    search?: string,&#10;    page: number = 0,&#10;    size: number = 10&#10;): Promise&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({&#10;        page: page.toString(),&#10;        size: size.toString(),&#10;    });&#10;    if (status) params.append('status', status);&#10;    if (search) params.append('search', search);&#10;&#10;    return apiFetch&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt;(`${API_BASE_PATH}/admin/organization/${organizationId}?${params.toString()}`);&#10;};&#10;&#10;/**&#10; */&#10;export const approveEvent_Admin = (eventId: string): Promise&lt;void&gt; =&gt; {&#10;    return apiFetch&lt;void&gt;(`${API_BASE_PATH}/${eventId}/approve`, {&#10;        method: 'POST',&#10;    });&#10;};&#10;&#10;/**&#10; * [ADMIN] Rejects a pending event.&#10; */&#10;export const rejectEvent_Admin = (eventId: string, reason: string): Promise&lt;void&gt; =&gt; {&#10;    return apiFetch&lt;void&gt;(`${API_BASE_PATH}/${eventId}/reject`, {&#10;        method: 'POST',&#10;        body: JSON.stringify({reason}),&#10;    });&#10;};&#10;" />
              <option name="updatedContent" value="import {apiFetch} from '@/lib/api';&#10;import {CreateEventFormData} from '@/lib/validators/event';&#10;import {EventDetailDTO, EventStatus, EventSummaryDTO} from '@/lib/validators/event';&#10;&#10;import {PaginatedResponse} from &quot;@/types/paginatedResponse&quot;;&#10;import {EventResponseDTO} from &quot;@/types/event&quot;;&#10;&#10;const API_BASE_PATH = '/event-seating/v1/events';&#10;&#10;// ================================================================================&#10;// General User &amp; Organizer Actions&#10;// ================================================================================&#10;&#10;/**&#10; * Creates a new event.&#10; */&#10;export const createEvent = (eventData: CreateEventFormData, coverImages: File[]): Promise&lt;EventResponseDTO&gt; =&gt; {&#10;    const formData = new FormData();&#10;    formData.append('request', JSON.stringify(eventData));&#10;    if (coverImages?.length &gt; 0) {&#10;        coverImages.forEach(file =&gt; formData.append('coverImages', file));&#10;    }&#10;    return apiFetch&lt;EventResponseDTO&gt;(API_BASE_PATH, {&#10;        method: 'POST',&#10;        body: formData,&#10;    });&#10;};&#10;&#10;/**&#10; * Fetches event details for an event the current user OWNS.&#10; */&#10;export const getMyEventById = (eventId: string): Promise&lt;EventDetailDTO&gt; =&gt; {&#10;    return apiFetch&lt;EventDetailDTO&gt;(`${API_BASE_PATH}/${eventId}`);&#10;};&#10;&#10;/**&#10; * Fetches a paginated list of events for an organization the current user OWNS.&#10; */&#10;export const getMyOrganizationEvents = (&#10;    organizationId: string,&#10;    status?: EventStatus,&#10;    search?: string,&#10;    page: number = 0,&#10;    size: number = 10&#10;): Promise&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({&#10;        page: page.toString(),&#10;        size: size.toString(),&#10;    });&#10;    if (status) params.append('status', status);&#10;    if (search) params.append('search', search);&#10;&#10;    return apiFetch&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt;(`${API_BASE_PATH}/organization/${organizationId}?${params.toString()}`);&#10;};&#10;&#10;/**&#10; * Deletes an event the current user OWNS.&#10; */&#10;export const deleteEvent = (eventId: string): Promise&lt;void&gt; =&gt; {&#10;    return apiFetch&lt;void&gt;(`${API_BASE_PATH}/${eventId}`, {&#10;        method: 'DELETE',&#10;    });&#10;};&#10;&#10;&#10;// ================================================================================&#10;// Administrator-Only Actions&#10;// ================================================================================&#10;&#10;/**&#10; * [ADMIN] Fetches event details for ANY event by its ID.&#10; */&#10;export const getAnyEventById_Admin = (eventId: string): Promise&lt;EventDetailDTO&gt; =&gt; {&#10;    return apiFetch&lt;EventDetailDTO&gt;(`${API_BASE_PATH}/admin/${eventId}`);&#10;};&#10;&#10;/**&#10; * [ADMIN] Fetches a paginated list of ALL events in the system.&#10; */&#10;export const getAllEvents_Admin = (&#10;    status?: EventStatus,&#10;    search?: string,&#10;    page: number = 0,&#10;    size: number = 10&#10;): Promise&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({&#10;        page: page.toString(),&#10;        size: size.toString(),&#10;    });&#10;    if (status) params.append('status', status);&#10;    if (search) params.append('search', search);&#10;&#10;    return apiFetch&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt;(`${API_BASE_PATH}/admin/all?${params.toString()}`);&#10;};&#10;&#10;/**&#10; * [ADMIN] Fetches a paginated list of events for ANY organization.&#10; */&#10;export const getAnyOrganizationEvents_Admin = (&#10;    organizationId: string,&#10;    status?: EventStatus,&#10;    search?: string,&#10;    page: number = 0,&#10;    size: number = 10&#10;): Promise&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({&#10;        page: page.toString(),&#10;        size: size.toString(),&#10;    });&#10;    if (status) params.append('status', status);&#10;    if (search) params.append('search', search);&#10;&#10;    return apiFetch&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt;(`${API_BASE_PATH}/admin/organization/${organizationId}?${params.toString()}`);&#10;};&#10;&#10;/**&#10; * [ADMIN] Approves a pending event.&#10; * Returns void as the endpoint returns no content&#10; */&#10;export const approveEvent_Admin = (eventId: string): Promise&lt;void&gt; =&gt; {&#10;    return apiFetch&lt;void&gt;(`${API_BASE_PATH}/${eventId}/approve`, {&#10;        method: 'POST',&#10;    });&#10;};&#10;&#10;/**&#10; * [ADMIN] Rejects a pending event.&#10; * Returns void as the endpoint returns no content&#10; */&#10;export const rejectEvent_Admin = (eventId: string, reason: string): Promise&lt;void&gt; =&gt; {&#10;    return apiFetch&lt;void&gt;(`${API_BASE_PATH}/${eventId}/reject`, {&#10;        method: 'POST',&#10;        body: JSON.stringify({reason}),&#10;    });&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/providers/LimitProvider.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/providers/LimitProvider.ts" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, {createContext, useContext, useState, useEffect, ReactNode, useMemo} from 'react';&#10;import {useAuth} from '@/providers/AuthProvider';&#10;import {getAppConfiguration} from '@/lib/actions/configActions';&#10;import {AppConfig, TierLimitDetails, TierName} from '@/types/config';&#10;&#10;// Define the shape of the context&#10;interface LimitContextType {&#10;    config: AppConfig | null;&#10;    isLoading: boolean;&#10;    error: string | null;&#10;    currentUserTier: TierName;&#10;    currentUserTierLimits: TierLimitDetails | null;&#10;    getLimitsForTier: (tier: TierName) =&gt; TierLimitDetails | null;&#10;}&#10;&#10;const LimitContext = createContext&lt;LimitContextType | undefined&gt;(undefined);&#10;&#10;export const LimitProvider = ({children}: { children: ReactNode }) =&gt; {&#10;    const {keycloak} = useAuth();&#10;    const [config, setConfig] = useState&lt;AppConfig | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    // Fetch the entire configuration on initial application load&#10;    useEffect(() =&gt; {&#10;        const fetchConfig = async () =&gt; {&#10;            try {&#10;                const appConfig = await getAppConfiguration();&#10;                setConfig(appConfig);&#10;            } catch (err) {&#10;                setError('Failed to load application configuration. Some features may be unavailable.');&#10;                console.error(err);&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;        fetchConfig();&#10;    }, []);&#10;&#10;    // A memoized helper to get the current user's highest tier from their JWT&#10;    const currentUserTier = useMemo((): TierName =&gt; {&#10;        if (!keycloak?.tokenParsed?.user_groups || !Array.isArray(keycloak.tokenParsed.user_groups)) return 'FREE';&#10;&#10;        const userGroups: string[] = keycloak.tokenParsed.user_groups;&#10;        let highestTier: TierName = 'FREE';&#10;        let maxLevel = 0;&#10;&#10;        const tierLevels: Record&lt;TierName, number&gt; = {FREE: 0, PRO: 1, ENTERPRISE: 2};&#10;&#10;        userGroups.forEach(group =&gt; {&#10;            if (group.startsWith('/Tiers/')) {&#10;                const tierName = group.substring('/Tiers/'.length).toUpperCase() as TierName;&#10;                if (tierLevels[tierName] !== undefined &amp;&amp; tierLevels[tierName] &gt; maxLevel) {&#10;                    maxLevel = tierLevels[tierName];&#10;                    highestTier = tierName;&#10;                }&#10;            }&#10;        });&#10;        return highestTier;&#10;    }, [keycloak]);&#10;&#10;    // A memoized value for the current user's specific limits, derived from the full config&#10;    const currentUserTierLimits = useMemo(() =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[currentUserTier] || config.tierLimits.FREE;&#10;    }, [config, currentUserTier]);&#10;&#10;    // A function to get limits for any specified tier (useful for upgrade pages)&#10;    const getLimitsForTier = (tier: TierName): TierLimitDetails | null =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[tier] || null;&#10;    };&#10;&#10;    const value = {config, isLoading, error, currentUserTier, currentUserTierLimits, getLimitsForTier};&#10;&#10;    return (&#10;        &lt;LimitContext.Provider value={value}&gt;&#10;            {children}&#10;        &lt;/LimitContext.Provider&gt;&#10;    );&#10;};&#10;&#10;// The custom hook to easily access the limits from any component&#10;export const useLimits = (): LimitContextType =&gt; {&#10;    const context = useContext(LimitContext);&#10;    if (context === undefined) {&#10;        throw new Error('useLimits must be used within a LimitProvider');&#10;    }&#10;    return context;&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, {createContext, useContext, useState, useEffect, ReactNode, useMemo} from 'react';&#10;import {useAuth} from '@/providers/AuthProvider';&#10;import {getAppConfiguration} from '@/lib/actions/configActions';&#10;import {AppConfig, TierLimitDetails, TierName} from '@/types/config';&#10;&#10;// Define the shape of the context&#10;interface LimitContextType {&#10;    config: AppConfig | null;&#10;    isLoading: boolean;&#10;    error: string | null;&#10;    currentUserTier: TierName;&#10;    currentUserTierLimits: TierLimitDetails | null;&#10;    getLimitsForTier: (tier: TierName) =&gt; TierLimitDetails | null;&#10;}&#10;&#10;const LimitContext = createContext&lt;LimitContextType | undefined&gt;(undefined);&#10;&#10;export const LimitProvider = ({children}: { children: ReactNode }) =&gt; {&#10;    const {keycloak} = useAuth();&#10;    const [config, setConfig] = useState&lt;AppConfig | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    // Fetch the entire configuration on initial application load&#10;    useEffect(() =&gt; {&#10;        const fetchConfig = async () =&gt; {&#10;            try {&#10;                const appConfig = await getAppConfiguration();&#10;                setConfig(appConfig);&#10;            } catch (err) {&#10;                setError('Failed to load application configuration. Some features may be unavailable.');&#10;                console.error(err);&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;        fetchConfig();&#10;    }, []);&#10;&#10;    // A memoized helper to get the current user's highest tier from their JWT&#10;    const currentUserTier = useMemo((): TierName =&gt; {&#10;        if (!keycloak?.tokenParsed?.user_groups || !Array.isArray(keycloak.tokenParsed.user_groups)) return 'FREE';&#10;&#10;        const userGroups: string[] = keycloak.tokenParsed.user_groups;&#10;        let highestTier: TierName = 'FREE';&#10;        let maxLevel = 0;&#10;&#10;        const tierLevels: Record&lt;TierName, number&gt; = {FREE: 0, PRO: 1, ENTERPRISE: 2};&#10;&#10;        userGroups.forEach(group =&gt; {&#10;            if (group.startsWith('/Tiers/')) {&#10;                const tierName = group.substring('/Tiers/'.length).toUpperCase() as TierName;&#10;                if (tierLevels[tierName] !== undefined &amp;&amp; tierLevels[tierName] &gt; maxLevel) {&#10;                    maxLevel = tierLevels[tierName];&#10;                    highestTier = tierName;&#10;                }&#10;            }&#10;        });&#10;        return highestTier;&#10;    }, [keycloak]);&#10;&#10;    // A memoized value for the current user's specific limits, derived from the full config&#10;    const currentUserTierLimits = useMemo(() =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[currentUserTier] || config.tierLimits.FREE;&#10;    }, [config, currentUserTier]);&#10;&#10;    // A function to get limits for any specified tier (useful for upgrade pages)&#10;    const getLimitsForTier = (tier: TierName): TierLimitDetails | null =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[tier] || null;&#10;    };&#10;&#10;    const value = {config, isLoading, error, currentUserTier, currentUserTierLimits, getLimitsForTier};&#10;&#10;    return React.createElement(&#10;        LimitContext.Provider,&#10;        { value },&#10;        children&#10;    );&#10;};&#10;&#10;// The custom hook to easily access the limits from any component&#10;export const useLimits = (): LimitContextType =&gt; {&#10;    const context = useContext(LimitContext);&#10;    if (context === undefined) {&#10;        throw new Error('useLimits must be used within a LimitProvider');&#10;    }&#10;    return context;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>