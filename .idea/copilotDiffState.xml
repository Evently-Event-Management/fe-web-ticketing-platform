<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/coreDetailsStep.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/coreDetailsStep.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useForm, FormProvider} from 'react-hook-form';&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {useOrganization} from '@/providers/OrganizationProvider';&#10;import {useLimits} from '@/providers/LimitProvider';&#10;import {CategoryResponse} from '@/types/category';&#10;import {getAllCategories} from '@/lib/actions/categoryActions';&#10;import {coreDetailsSchema, CoreDetailsData} from '@/lib/validators/event';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Textarea} from '@/components/ui/textarea';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;import {&#10;    Select,&#10;    SelectContent,&#10;    SelectItem,&#10;    SelectTrigger,&#10;    SelectValue,&#10;    SelectGroup,&#10;    SelectLabel&#10;} from '@/components/ui/select';&#10;import {Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious} from &quot;@/components/ui/carousel&quot;;&#10;import Image from 'next/image';&#10;import {ImageIcon, X, PlusCircle, Upload} from 'lucide-react';&#10;import {toast} from 'sonner';&#10;import Autoplay from 'embla-carousel-autoplay';&#10;&#10;// --- Step 1: Core Details Component ---&#10;export function CoreDetailsStep({onNextAction}: { onNextAction: () =&gt; void }) {&#10;    const {organization} = useOrganization();&#10;    const {myLimits} = useLimits();&#10;    const [categories, setCategories] = useState&lt;CategoryResponse[]&gt;([]);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    const maxPhotos = myLimits?.eventLimits.maxCoverPhotos || 1;&#10;&#10;    const form = useForm&lt;CoreDetailsData&gt;({&#10;        resolver: zodResolver(coreDetailsSchema),&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            categoryId: '', // Ensure categoryId is present&#10;            isOnline: false,&#10;        },&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        getAllCategories().then(setCategories);&#10;    }, [organization]);&#10;&#10;    const handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        if (e.target.files) {&#10;            const files = Array.from(e.target.files);&#10;            if ((coverFiles.length + files.length) &gt; maxPhotos) {&#10;                toast.error(`You can only upload a maximum of ${maxPhotos} photos.`);&#10;                return;&#10;            }&#10;            setCoverFiles(prev =&gt; [...prev, ...files]);&#10;        }&#10;    };&#10;&#10;    const removeImage = (index: number) =&gt; {&#10;        setCoverFiles(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    };&#10;&#10;    function onSubmit(data: CoreDetailsData) {&#10;        console.log(&quot;Step 1 Data:&quot;, data);&#10;        console.log(&quot;Cover Files:&quot;, coverFiles);&#10;        onNextAction();&#10;    }&#10;&#10;    return (&#10;        &lt;FormProvider {...form}&gt;&#10;            &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt;&#10;                {/* Hero Cover Photos Section */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Cover Photos&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;This is the first thing people will see. Upload up&#10;                            to {maxPhotos} images.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                        {coverFiles.length &gt; 0 ? (&#10;                            &lt;Carousel plugins={[Autoplay({delay: 4000, stopOnInteraction: false})]}&gt;&#10;                                &lt;CarouselContent&gt;&#10;                                    {coverFiles.map((file, index) =&gt; (&#10;                                        &lt;CarouselItem key={index} className=&quot;relative&quot;&gt;&#10;                                            &lt;div className=&quot;aspect-[21/9] w-full relative&quot;&gt;&#10;                                                &lt;Image src={URL.createObjectURL(file)} alt={`Cover photo ${index + 1}`}&#10;                                                       fill className=&quot;object-cover rounded-lg&quot;/&gt;&#10;                                                &lt;Button type=&quot;button&quot; variant=&quot;destructive&quot; size=&quot;icon&quot;&#10;                                                        className=&quot;absolute top-4 right-4 h-8 w-8 z-10&quot;&#10;                                                        onClick={() =&gt; removeImage(index)}&gt;&lt;X&#10;                                                    className=&quot;h-4 w-4&quot;/&gt;&lt;/Button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/CarouselItem&gt;&#10;                                    ))}&#10;                                &lt;/CarouselContent&gt;&#10;                                &lt;CarouselPrevious type=&quot;button&quot;&#10;                                                  className=&quot;absolute left-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                                &lt;CarouselNext type=&quot;button&quot;&#10;                                              className=&quot;absolute right-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                            &lt;/Carousel&gt;&#10;                        ) : (&#10;                            &lt;div&#10;                                className=&quot;flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-12 text-center aspect-[21/9] w-full&quot;&gt;&#10;                                &lt;ImageIcon className=&quot;h-16 w-16 text-muted-foreground&quot;/&gt;&#10;                                &lt;p className=&quot;mt-4 text-lg font-medium&quot;&gt;Add cover photos for your event&lt;/p&gt;&#10;                                &lt;Button type=&quot;button&quot; className=&quot;mt-4&quot;&#10;                                        onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;Upload className=&quot;mr-2 h-4 w-4&quot;/&gt;Upload&#10;                                    Images&lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                        &lt;div className=&quot;mt-4 flex justify-center items-center gap-4&quot;&gt;&#10;                            {coverFiles.length &gt; 0 &amp;&amp; (&lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&#10;                                                               onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;PlusCircle&#10;                                className=&quot;mr-2 h-4 w-4&quot;/&gt;Add More&lt;/Button&gt;)}&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{coverFiles.length} of {maxPhotos} photos&#10;                                selected.&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;Input id=&quot;picture&quot; type=&quot;file&quot; multiple accept=&quot;image/*&quot; onChange={handleFileChange}&#10;                               className=&quot;hidden&quot; ref={fileInputRef}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                {/* Event Details Card with Category dropdown */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Event Details&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;Provide the core information about your event.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                        &lt;FormField control={form.control} name=&quot;title&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Event Title&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                placeholder=&quot;e.g., Annual Tech Conference 2025&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;&#10;                        {/* Category Selector as dropdown */}&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;categoryId&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Category&lt;/FormLabel&gt;&#10;                                    &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#10;                                        &lt;FormControl&gt;&#10;                                            &lt;SelectTrigger&gt;&#10;                                                &lt;SelectValue placeholder=&quot;Select a category for your event&quot;/&gt;&#10;                                            &lt;/SelectTrigger&gt;&#10;                                        &lt;/FormControl&gt;&#10;                                        &lt;SelectContent className=&quot;max-h-100&quot;&gt;&#10;                                            {categories.map((parentCat) =&gt; (&#10;                                                &lt;SelectGroup key={parentCat.id}&gt;&#10;                                                    &lt;SelectLabel&gt;{parentCat.name}&lt;/SelectLabel&gt;&#10;                                                    {parentCat.subCategories.map((subCat) =&gt; (&#10;                                                        &lt;SelectItem key={subCat.id} value={subCat.id}&gt;&#10;                                                            {subCat.name}&#10;                                                        &lt;/SelectItem&gt;&#10;                                                    ))}&#10;                                                &lt;/SelectGroup&gt;&#10;                                            ))}&#10;                                        &lt;/SelectContent&gt;&#10;                                    &lt;/Select&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;FormField control={form.control} name=&quot;description&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Short Description&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;A brief summary of your event.&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                        &lt;FormField control={form.control} name=&quot;overview&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Overview&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;Provide more details like schedule, speakers, etc.&quot;&#10;                                className=&quot;min-h-32&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;                &lt;div className=&quot;flex justify-end mt-8&quot;&gt;&#10;                    &lt;Button type=&quot;submit&quot;&gt;Next: Tiers &amp; Pricing&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/form&gt;&#10;        &lt;/FormProvider&gt;&#10;    )&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useForm, FormProvider} from 'react-hook-form';&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {useOrganization} from '@/providers/OrganizationProvider';&#10;import {useLimits} from '@/providers/LimitProvider';&#10;import {CategoryResponse} from '@/types/category';&#10;import {getAllCategories} from '@/lib/actions/categoryActions';&#10;import {coreDetailsSchema, CoreDetailsData} from '@/lib/validators/event';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Textarea} from '@/components/ui/textarea';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;import {&#10;    Select,&#10;    SelectContent,&#10;    SelectItem,&#10;    SelectTrigger,&#10;    SelectValue,&#10;    SelectGroup,&#10;    SelectLabel&#10;} from '@/components/ui/select';&#10;import {Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious} from &quot;@/components/ui/carousel&quot;;&#10;import Image from 'next/image';&#10;import {ImageIcon, X, PlusCircle, Upload} from 'lucide-react';&#10;import {toast} from 'sonner';&#10;import Autoplay from 'embla-carousel-autoplay';&#10;&#10;// Updated props interface to match the required signature&#10;interface CoreDetailsStepProps {&#10;    coverFiles: File[];&#10;    setCoverFilesAction: React.Dispatch&lt;React.SetStateAction&lt;File[]&gt;&gt;;&#10;    onNextAction?: () =&gt; void;&#10;}&#10;&#10;// --- Step 1: Core Details Component ---&#10;export function CoreDetailsStep({ coverFiles, setCoverFilesAction, onNextAction }: CoreDetailsStepProps) {&#10;    const {organization} = useOrganization();&#10;    const {myLimits} = useLimits();&#10;    const [categories, setCategories] = useState&lt;CategoryResponse[]&gt;([]);&#10;    const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    const maxPhotos = myLimits?.eventLimits.maxCoverPhotos || 1;&#10;&#10;    const form = useForm&lt;CoreDetailsData&gt;({&#10;        resolver: zodResolver(coreDetailsSchema),&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            categoryId: '', // Ensure categoryId is present&#10;            isOnline: false,&#10;        },&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        getAllCategories().then(setCategories);&#10;    }, [organization]);&#10;&#10;    const handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        if (e.target.files) {&#10;            const files = Array.from(e.target.files);&#10;            if ((coverFiles.length + files.length) &gt; maxPhotos) {&#10;                toast.error(`You can only upload a maximum of ${maxPhotos} photos.`);&#10;                return;&#10;            }&#10;            setCoverFilesAction(prev =&gt; [...prev, ...files]);&#10;        }&#10;    };&#10;&#10;    const removeImage = (index: number) =&gt; {&#10;        setCoverFilesAction(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    };&#10;&#10;    function onSubmit(data: CoreDetailsData) {&#10;        console.log(&quot;Step 1 Data:&quot;, data);&#10;        console.log(&quot;Cover Files:&quot;, coverFiles);&#10;        if (onNextAction) onNextAction();&#10;    }&#10;&#10;    return (&#10;        &lt;FormProvider {...form}&gt;&#10;            &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt;&#10;                {/* Hero Cover Photos Section */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Cover Photos&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;This is the first thing people will see. Upload up&#10;                            to {maxPhotos} images.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                        {coverFiles.length &gt; 0 ? (&#10;                            &lt;Carousel plugins={[Autoplay({delay: 4000, stopOnInteraction: false})]}&gt;&#10;                                &lt;CarouselContent&gt;&#10;                                    {coverFiles.map((file, index) =&gt; (&#10;                                        &lt;CarouselItem key={index} className=&quot;relative&quot;&gt;&#10;                                            &lt;div className=&quot;aspect-[21/9] w-full relative&quot;&gt;&#10;                                                &lt;Image src={URL.createObjectURL(file)} alt={`Cover photo ${index + 1}`}&#10;                                                       fill className=&quot;object-cover rounded-lg&quot;/&gt;&#10;                                                &lt;Button type=&quot;button&quot; variant=&quot;destructive&quot; size=&quot;icon&quot;&#10;                                                        className=&quot;absolute top-4 right-4 h-8 w-8 z-10&quot;&#10;                                                        onClick={() =&gt; removeImage(index)}&gt;&lt;X&#10;                                                    className=&quot;h-4 w-4&quot;/&gt;&lt;/Button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/CarouselItem&gt;&#10;                                    ))}&#10;                                &lt;/CarouselContent&gt;&#10;                                &lt;CarouselPrevious type=&quot;button&quot;&#10;                                                  className=&quot;absolute left-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                                &lt;CarouselNext type=&quot;button&quot;&#10;                                              className=&quot;absolute right-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                            &lt;/Carousel&gt;&#10;                        ) : (&#10;                            &lt;div&#10;                                className=&quot;flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-12 text-center aspect-[21/9] w-full&quot;&gt;&#10;                                &lt;ImageIcon className=&quot;h-16 w-16 text-muted-foreground&quot;/&gt;&#10;                                &lt;p className=&quot;mt-4 text-lg font-medium&quot;&gt;Add cover photos for your event&lt;/p&gt;&#10;                                &lt;Button type=&quot;button&quot; className=&quot;mt-4&quot;&#10;                                        onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;Upload className=&quot;mr-2 h-4 w-4&quot;/&gt;Upload&#10;                                    Images&lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                        &lt;div className=&quot;mt-4 flex justify-center items-center gap-4&quot;&gt;&#10;                            {coverFiles.length &gt; 0 &amp;&amp; (&lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&#10;                                                               onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;PlusCircle&#10;                                className=&quot;mr-2 h-4 w-4&quot;/&gt;Add More&lt;/Button&gt;)}&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{coverFiles.length} of {maxPhotos} photos&#10;                                selected.&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;Input id=&quot;picture&quot; type=&quot;file&quot; multiple accept=&quot;image/*&quot; onChange={handleFileChange}&#10;                               className=&quot;hidden&quot; ref={fileInputRef}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                {/* Event Details Card with Category dropdown */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Event Details&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;Provide the core information about your event.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                        &lt;FormField control={form.control} name=&quot;title&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Event Title&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                placeholder=&quot;e.g., Annual Tech Conference 2025&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;&#10;                        {/* Category Selector as dropdown */}&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;categoryId&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Category&lt;/FormLabel&gt;&#10;                                    &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#10;                                        &lt;FormControl&gt;&#10;                                            &lt;SelectTrigger&gt;&#10;                                                &lt;SelectValue placeholder=&quot;Select a category for your event&quot;/&gt;&#10;                                            &lt;/SelectTrigger&gt;&#10;                                        &lt;/FormControl&gt;&#10;                                        &lt;SelectContent className=&quot;max-h-100&quot;&gt;&#10;                                            {categories.map((parentCat) =&gt; (&#10;                                                &lt;SelectGroup key={parentCat.id}&gt;&#10;                                                    &lt;SelectLabel&gt;{parentCat.name}&lt;/SelectLabel&gt;&#10;                                                    {parentCat.subCategories.map((subCat) =&gt; (&#10;                                                        &lt;SelectItem key={subCat.id} value={subCat.id}&gt;&#10;                                                            {subCat.name}&#10;                                                        &lt;/SelectItem&gt;&#10;                                                    ))}&#10;                                                &lt;/SelectGroup&gt;&#10;                                            ))}&#10;                                        &lt;/SelectContent&gt;&#10;                                    &lt;/Select&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;FormField control={form.control} name=&quot;description&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Short Description&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;A brief summary of your event.&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                        &lt;FormField control={form.control} name=&quot;overview&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Overview&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;Provide more details like schedule, speakers, etc.&quot;&#10;                                className=&quot;min-h-32&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;                &lt;div className=&quot;flex justify-end mt-8&quot;&gt;&#10;                    &lt;Button type=&quot;submit&quot;&gt;Next: Tiers &amp; Pricing&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/form&gt;&#10;        &lt;/FormProvider&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState} from 'react';&#10;import {CoreDetailsStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/CoreDetailsStep&quot;;&#10;import {Progress} from &quot;@/components/ui/progress&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {FormProvider, useForm, useFormContext} from &quot;react-hook-form&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {TiersStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/TierStep&quot;;&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {CreateEventFormData, createEventSchema, stepValidationFields} from '@/lib/validators/event';&#10;import {SchedulingStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/SchedulingStep&quot;;&#10;import {SeatingStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/SeratingStep&quot;;&#10;import {useOrganization} from &quot;@/providers/OrganizationProvider&quot;;&#10;&#10;&#10;export default function CreateEventPage() {&#10;    const [step, setStep] = useState(1);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const {&#10;        organization: activeOrganization,&#10;    } = useOrganization();&#10;    const totalSteps = 5;&#10;&#10;    console.log(activeOrganization)&#10;&#10;    const methods = useForm&lt;CreateEventFormData&gt;({&#10;        resolver: zodResolver(createEventSchema),&#10;        mode: 'onChange', // Enable real-time validation&#10;        defaultValues: {&#10;            title: 'An Example Event',&#10;            description: 'This is a sample event description.',&#10;            overview: 'An overview of the event goes here.',&#10;            organizationId: activeOrganization?.id,&#10;            categoryId: '',&#10;            tiers: [],&#10;            sessions: [],&#10;        },&#10;    });&#10;&#10;    const onNext = async () =&gt; {&#10;        const fieldsToValidate = stepValidationFields[step as keyof typeof stepValidationFields];&#10;        const isValid = await methods.trigger(fieldsToValidate);&#10;        console.log(methods.watch());&#10;&#10;        if (isValid) {&#10;            setStep(s =&gt; Math.min(totalSteps, s + 1));&#10;        } else {&#10;            // react-hook-form will automatically show errors next to the invalid fields.&#10;            // A toast is good for a general notification.&#10;            console.error(&quot;Validation failed for step&quot;, step);&#10;            toast.error(&quot;Please fix the errors before proceeding.&quot;);&#10;        }&#10;    };&#10;&#10;    const onPrev = () =&gt; setStep(s =&gt; Math.max(1, s - 1));&#10;&#10;    const onSubmit = (data: CreateEventFormData) =&gt; {&#10;        console.log(&quot;Final Assembled Form Data:&quot;, data);&#10;        console.log(&quot;Final Cover Files:&quot;, coverFiles);&#10;        // Here you would call your createEvent API action&#10;        toast.success(&quot;Event submitted for approval!&quot;);&#10;    };&#10;&#10;&#10;    const renderStep = () =&gt; {&#10;        switch (step) {&#10;            case 1:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;            case 2:&#10;                return &lt;TiersStep/&gt;;&#10;            // Add cases for other steps here&#10;            case 3:&#10;                return &lt;SchedulingStep/&gt;&#10;            case 4:&#10;                return &lt;SeatingStep/&gt;;&#10;            default:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;        }&#10;    };&#10;&#10;    // Helper function to check if current step has errors&#10;    const hasStepErrors = () =&gt; {&#10;        const fieldsToCheck = stepValidationFields[step as keyof typeof stepValidationFields];&#10;        if (!fieldsToCheck) return false;&#10;&#10;        return fieldsToCheck.some(field =&gt; methods.formState.errors[field]);&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;p-4 md:p-8&quot;&gt;&#10;            &lt;div className=&quot;mb-8&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;h1 className=&quot;text-2xl font-bold&quot;&gt;Create New Event&lt;/h1&gt;&#10;                        &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Step {step} of {totalSteps}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    {hasStepErrors() &amp;&amp; (&#10;                        &lt;div className=&quot;text-sm text-destructive&quot;&gt;&#10;                            ⚠️ Please fix validation errors&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;Progress value={(step / totalSteps) * 100} className=&quot;mt-2&quot;/&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;FormProvider {...methods}&gt;&#10;                &lt;form onSubmit={methods.handleSubmit(onSubmit)}&gt;&#10;                    {renderStep()}&#10;&#10;                    &lt;div className=&quot;flex justify-between mt-8&quot;&gt;&#10;                        &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; onClick={onPrev} disabled={step === 1}&gt;&#10;                            Previous&#10;                        &lt;/Button&gt;&#10;                        {step &lt; totalSteps ? (&#10;                            &lt;Button&#10;                                type=&quot;button&quot;&#10;                                onClick={onNext}&#10;                                disabled={methods.formState.isSubmitting}&#10;                            &gt;&#10;                                {methods.formState.isSubmitting ? 'Validating...' : 'Next'}&#10;                            &lt;/Button&gt;&#10;                        ) : (&#10;                            &lt;Button&#10;                                type=&quot;submit&quot;&#10;                                disabled={methods.formState.isSubmitting}&#10;                            &gt;&#10;                                {methods.formState.isSubmitting ? 'Submitting...' : 'Submit for Approval'}&#10;                            &lt;/Button&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/form&gt;&#10;            &lt;/FormProvider&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {CoreDetailsStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/CoreDetailsStep&quot;;&#10;import {Progress} from &quot;@/components/ui/progress&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {FormProvider, useForm, useFormContext} from &quot;react-hook-form&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {TiersStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/TierStep&quot;;&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {CreateEventFormData, createEventSchema, stepValidationFields} from '@/lib/validators/event';&#10;import {SchedulingStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/SchedulingStep&quot;;&#10;import {SeatingStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/SeratingStep&quot;;&#10;import {useOrganization} from &quot;@/providers/OrganizationProvider&quot;;&#10;&#10;&#10;export default function CreateEventPage() {&#10;    const [step, setStep] = useState(1);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const {&#10;        organization: activeOrganization,&#10;    } = useOrganization();&#10;    const totalSteps = 5;&#10;&#10;    console.log(activeOrganization)&#10;&#10;    const methods = useForm&lt;CreateEventFormData&gt;({&#10;        resolver: zodResolver(createEventSchema),&#10;        mode: 'onChange', // Enable real-time validation&#10;        defaultValues: {&#10;            title: 'An Example Event',&#10;            description: 'This is a sample event description.',&#10;            overview: 'An overview of the event goes here.',&#10;            organizationId: activeOrganization?.id || '', // This might be undefined initially&#10;            categoryId: '',&#10;            tiers: [],&#10;            sessions: [],&#10;        },&#10;    });&#10;&#10;    // Update organizationId when activeOrganization becomes available&#10;    useEffect(() =&gt; {&#10;        if (activeOrganization?.id) {&#10;            methods.setValue('organizationId', activeOrganization.id);&#10;            console.log(&quot;Updated organizationId:&quot;, activeOrganization.id);&#10;        }&#10;    }, [activeOrganization, methods]);&#10;&#10;    const onNext = async () =&gt; {&#10;        const fieldsToValidate = stepValidationFields[step as keyof typeof stepValidationFields];&#10;        const isValid = await methods.trigger(fieldsToValidate);&#10;        console.log(methods.watch());&#10;&#10;        if (isValid) {&#10;            setStep(s =&gt; Math.min(totalSteps, s + 1));&#10;        } else {&#10;            // react-hook-form will automatically show errors next to the invalid fields.&#10;            // A toast is good for a general notification.&#10;            console.error(&quot;Validation failed for step&quot;, step);&#10;            toast.error(&quot;Please fix the errors before proceeding.&quot;);&#10;        }&#10;    };&#10;&#10;    const onPrev = () =&gt; setStep(s =&gt; Math.max(1, s - 1));&#10;&#10;    const onSubmit = (data: CreateEventFormData) =&gt; {&#10;        console.log(&quot;Final Assembled Form Data:&quot;, data);&#10;        console.log(&quot;Final Cover Files:&quot;, coverFiles);&#10;        // Here you would call your createEvent API action&#10;        toast.success(&quot;Event submitted for approval!&quot;);&#10;    };&#10;&#10;&#10;    const renderStep = () =&gt; {&#10;        switch (step) {&#10;            case 1:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;            case 2:&#10;                return &lt;TiersStep/&gt;;&#10;            // Add cases for other steps here&#10;            case 3:&#10;                return &lt;SchedulingStep/&gt;&#10;            case 4:&#10;                return &lt;SeatingStep/&gt;;&#10;            default:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;        }&#10;    };&#10;&#10;    // Helper function to check if current step has errors&#10;    const hasStepErrors = () =&gt; {&#10;        const fieldsToCheck = stepValidationFields[step as keyof typeof stepValidationFields];&#10;        if (!fieldsToCheck) return false;&#10;&#10;        return fieldsToCheck.some(field =&gt; methods.formState.errors[field]);&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;p-4 md:p-8&quot;&gt;&#10;            &lt;div className=&quot;mb-8&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;h1 className=&quot;text-2xl font-bold&quot;&gt;Create New Event&lt;/h1&gt;&#10;                        &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Step {step} of {totalSteps}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    {hasStepErrors() &amp;&amp; (&#10;                        &lt;div className=&quot;text-sm text-destructive&quot;&gt;&#10;                            ���️ Please fix validation errors&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;Progress value={(step / totalSteps) * 100} className=&quot;mt-2&quot;/&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;FormProvider {...methods}&gt;&#10;                &lt;form onSubmit={methods.handleSubmit(onSubmit)}&gt;&#10;                    {renderStep()}&#10;&#10;                    &lt;div className=&quot;flex justify-between mt-8&quot;&gt;&#10;                        &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; onClick={onPrev} disabled={step === 1}&gt;&#10;                            Previous&#10;                        &lt;/Button&gt;&#10;                        {step &lt; totalSteps ? (&#10;                            &lt;Button&#10;                                type=&quot;button&quot;&#10;                                onClick={onNext}&#10;                                disabled={methods.formState.isSubmitting}&#10;                            &gt;&#10;                                {methods.formState.isSubmitting ? 'Validating...' : 'Next'}&#10;                            &lt;/Button&gt;&#10;                        ) : (&#10;                            &lt;Button&#10;                                type=&quot;submit&quot;&#10;                                disabled={methods.formState.isSubmitting}&#10;                            &gt;&#10;                                {methods.formState.isSubmitting ? 'Submitting...' : 'Submit for Approval'}&#10;                            &lt;/Button&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/form&gt;&#10;            &lt;/FormProvider&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx.new">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx.new" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useEffect, useState} from 'react';&#10;import {CoreDetailsStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/CoreDetailsStep&quot;;&#10;import {Progress} from &quot;@/components/ui/progress&quot;;&#10;import {CreateEventRequest} from &quot;@/types/event&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {FormProvider, useForm} from &quot;react-hook-form&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {TiersStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/TierStep&quot;;&#10;import {zodResolver} from &quot;@hookform/resolvers/zod&quot;;&#10;import {coreDetailsSchema, tiersSchema} from &quot;@/lib/validators/event&quot;;&#10;import {WizardSidebar} from &quot;../_components/WizardSideBar&quot;;&#10;import {useSidebar} from &quot;@/components/ui/sidebar&quot;;&#10;&#10;// --- Main Wizard Parent Component ---&#10;export default function CreateEventPage() {&#10;    const [step, setStep] = useState(1);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const totalSteps = 5;&#10;    const {setOpen} = useSidebar();&#10;    &#10;    const steps = [&#10;        {number: 1, title: &quot;Core Details&quot;, description: &quot;Name, category, and location&quot;},&#10;        {number: 2, title: &quot;Tiers &amp; Pricing&quot;, description: &quot;Set your ticket prices&quot;},&#10;        {number: 3, title: &quot;Scheduling&quot;, description: &quot;Add dates and times&quot;},&#10;        {number: 4, title: &quot;Seating&quot;, description: &quot;Configure seating maps&quot;},&#10;        {number: 5, title: &quot;Review &amp; Publish&quot;, description: &quot;Final check before submission&quot;},&#10;    ];&#10;&#10;    // Collapse the main sidebar when component mounts&#10;    useEffect(() =&gt; {&#10;        setOpen(false);&#10;    }, [setOpen]);&#10;&#10;    // ✅ The single form instance for the entire wizard is created here.&#10;    const methods = useForm&lt;CreateEventRequest&gt;({&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            organizationId: '', // Should be set from context/params&#10;            categoryId: '',&#10;            isOnline: false,&#10;            tiers: [],&#10;            sessions: [],&#10;        },&#10;        mode: 'onSubmit', // Only validate when explicitly triggered&#10;    });&#10;&#10;    // Update the validation schema based on the current step&#10;    useEffect(() =&gt; {&#10;        if (step === 1) {&#10;            methods.clearErrors();&#10;        } else if (step === 2) {&#10;            methods.clearErrors();&#10;        }&#10;    }, [step, methods]);&#10;&#10;    const validateCoreDetails = async () =&gt; {&#10;        try {&#10;            // Check for cover photos&#10;            if (coverFiles.length === 0) {&#10;                toast.error(&quot;Please upload at least one cover photo.&quot;);&#10;                return false;&#10;            }&#10;            &#10;            // Get form values for core details&#10;            const values = methods.getValues();&#10;            const coreData = {&#10;                title: values.title,&#10;                description: values.description || &quot;&quot;,&#10;                overview: values.overview || &quot;&quot;,&#10;                categoryId: values.categoryId || &quot;&quot;,&#10;                isOnline: values.isOnline || false,&#10;                venueId: values.venueId,&#10;                onlineLink: values.onlineLink,&#10;                locationDescription: values.locationDescription,&#10;            };&#10;            &#10;            // Validate with Zod schema&#10;            const result = coreDetailsSchema.safeParse(coreData);&#10;            &#10;            if (!result.success) {&#10;                // Show validation errors&#10;                result.error.errors.forEach(err =&gt; {&#10;                    toast.error(`${err.path.join('.')}: ${err.message}`);&#10;                });&#10;                &#10;                // Also set form errors for field highlighting&#10;                result.error.errors.forEach(err =&gt; {&#10;                    const path = err.path.join('.') as keyof CreateEventRequest;&#10;                    methods.setError(path, { &#10;                        type: 'manual', &#10;                        message: err.message &#10;                    });&#10;                });&#10;                &#10;                return false;&#10;            }&#10;            &#10;            return true;&#10;        } catch (error: any) {&#10;            console.error(&quot;Validation error:&quot;, error);&#10;            toast.error(&quot;Please check all required fields&quot;);&#10;            return false;&#10;        }&#10;    };&#10;&#10;    const validateTiers = async () =&gt; {&#10;        try {&#10;            // Get tiers data&#10;            const values = methods.getValues();&#10;            const tiersData = { tiers: values.tiers || [] };&#10;            &#10;            // Validate with Zod schema&#10;            const result = tiersSchema.safeParse(tiersData);&#10;            &#10;            if (!result.success) {&#10;                // Show validation errors&#10;                result.error.errors.forEach(err =&gt; {&#10;                    toast.error(`${err.message}`);&#10;                });&#10;                return false;&#10;            }&#10;            &#10;            return true;&#10;        } catch (error: any) {&#10;            console.error(&quot;Tier validation error:&quot;, error);&#10;            toast.error(&quot;Please add at least one tier with valid information&quot;);&#10;            return false;&#10;        }&#10;    };&#10;&#10;    const onNext = async () =&gt; {&#10;        let isValid = false;&#10;        &#10;        if (step === 1) {&#10;            isValid = await validateCoreDetails();&#10;        } else if (step === 2) {&#10;            isValid = await validateTiers();&#10;        } else {&#10;            // For future steps that don't have validation yet&#10;            isValid = true;&#10;        }&#10;&#10;        if (isValid) {&#10;            setStep(s =&gt; Math.min(totalSteps, s + 1));&#10;        }&#10;    };&#10;&#10;    const onPrev = () =&gt; setStep(s =&gt; Math.max(1, s - 1));&#10;&#10;    const onSubmit = async (data: CreateEventRequest) =&gt; {&#10;        // Perform final validation before submission&#10;        let isValid = true;&#10;        &#10;        // Validate the current step first&#10;        if (step === 1) {&#10;            isValid = await validateCoreDetails();&#10;        } else if (step === 2) {&#10;            isValid = await validateTiers();&#10;        }&#10;        &#10;        if (isValid) {&#10;            console.log(&quot;Final Assembled Form Data:&quot;, data);&#10;            console.log(&quot;Final Cover Files:&quot;, coverFiles);&#10;            // Here you would call your createEvent API action&#10;            toast.success(&quot;Event submitted for approval!&quot;);&#10;        }&#10;    };&#10;&#10;    const renderStep = () =&gt; {&#10;        switch (step) {&#10;            case 1:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;            case 2:&#10;                return &lt;TiersStep/&gt;;&#10;            // Add cases for other steps here&#10;            default:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;flex min-h-screen bg-muted/40&quot;&gt;&#10;            &lt;WizardSidebar currentStep={step} steps={steps}/&gt;&#10;            &lt;main className=&quot;flex-1 p-4 md:p-8 overflow-y-auto ml-72&quot;&gt;&#10;                &lt;div className=&quot;max-w-4xl mx-auto&quot;&gt;&#10;                    &lt;div className=&quot;mb-8&quot;&gt;&#10;                        &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Step {step} of {totalSteps}&lt;/p&gt;&#10;                        &lt;Progress value={(step / totalSteps) * 100} className=&quot;mt-2&quot;/&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* ✅ The FormProvider broadcasts the form state to all children */}&#10;                    &lt;FormProvider {...methods}&gt;&#10;                        &lt;form onSubmit={methods.handleSubmit(onSubmit)}&gt;&#10;                            {renderStep()}&#10;&#10;                            &lt;div className=&quot;flex justify-between mt-8&quot;&gt;&#10;                                &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; onClick={onPrev} disabled={step === 1}&gt;&#10;                                    Previous&#10;                                &lt;/Button&gt;&#10;                                {step &lt; totalSteps ? (&#10;                                    &lt;Button type=&quot;button&quot; onClick={onNext}&gt;&#10;                                        Next&#10;                                    &lt;/Button&gt;&#10;                                ) : (&#10;                                    &lt;Button type=&quot;submit&quot;&gt;&#10;                                        Submit for Approval&#10;                                    &lt;/Button&gt;&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        &lt;/form&gt;&#10;                    &lt;/FormProvider&gt;&#10;                &lt;/div&gt;&#10;            &lt;/main&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/validators/event.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/validators/event.ts" />
              <option name="originalContent" value="import {z} from 'zod';&#10;&#10;export enum SalesStartRuleType {&#10;    IMMEDIATE = 'IMMEDIATE',&#10;    ROLLING = 'ROLLING',&#10;    FIXED = 'FIXED',&#10;}&#10;&#10;&#10;// --- Seating Layout Schemas ---&#10;&#10;const positionSchema = z.object({&#10;    x: z.number(),&#10;    y: z.number(),&#10;});&#10;&#10;const seatSchema = z.object({&#10;    id: z.string(),&#10;    label: z.string(),&#10;    tierId: z.string().optional(),&#10;    status: z.enum(['AVAILABLE', 'RESERVED']).optional(),&#10;});&#10;&#10;const rowSchema = z.object({&#10;    id: z.string(),&#10;    label: z.string(),&#10;    seats: z.array(seatSchema),&#10;});&#10;&#10;const blockSchema = z.object({&#10;    id: z.string(),&#10;    name: z.string().min(1, &quot;Block name is required.&quot;),&#10;    type: z.enum(['seated_grid', 'standing_capacity', 'non_sellable']),&#10;    position: positionSchema,&#10;    rows: z.array(rowSchema).optional(),&#10;    capacity: z.number().optional(),&#10;    seats: z.array(seatSchema).optional(),&#10;    width: z.number().optional(),&#10;    height: z.number().optional(),&#10;});&#10;&#10;const layoutSchema = z.object({&#10;    blocks: z.array(blockSchema),&#10;});&#10;&#10;const sessionSeatingMapRequestSchema = z.object({&#10;    name: z.string(),&#10;    layout: layoutSchema,&#10;});&#10;&#10;&#10;// --- Venue &amp; Tier Schemas ---&#10;&#10;const venueDetailsSchema = z.object({&#10;    name: z.string().min(1, &quot;Venue name is required.&quot;),&#10;    address: z.string().optional(),&#10;    latitude: z.number().optional(),&#10;    longitude: z.number().optional(),&#10;});&#10;&#10;const tierSchema = z.object({&#10;    id: z.string(),&#10;    name: z.string().min(1, {message: &quot;Tier name cannot be empty.&quot;}),&#10;    price: z.number().min(0, {message: &quot;Price must be a positive number.&quot;}),&#10;    color: z.string().optional(),&#10;});&#10;&#10;&#10;// --- Session Schema with Conditional Logic ---&#10;&#10;const sessionSchema = z.object({&#10;    startTime: z.iso.datetime({message: &quot;Invalid start date format.&quot;}),&#10;    endTime: z.iso.datetime({message: &quot;Invalid end date format.&quot;}),&#10;&#10;    // ✅ Corrected: Use z.enum() for string-based enums.&#10;    salesStartRuleType: z.enum([&#10;        SalesStartRuleType.IMMEDIATE,&#10;        SalesStartRuleType.ROLLING,&#10;        SalesStartRuleType.FIXED&#10;    ]),&#10;&#10;    salesStartHoursBefore: z.number().optional(),&#10;    salesStartFixedDatetime: z.iso.datetime({message: &quot;Invalid date format.&quot;}).optional(),&#10;    isOnline: z.boolean(),&#10;    onlineLink: z.string().optional(),&#10;    venueDetails: venueDetailsSchema.optional(),&#10;    layoutData: sessionSeatingMapRequestSchema,&#10;}).refine(data =&gt; {&#10;    // If it's an online event, the onlineLink must be a valid URL.&#10;    if (data.isOnline) {&#10;        return data.onlineLink &amp;&amp; z.url().safeParse(data.onlineLink).success;&#10;    }&#10;    return true;&#10;}, {&#10;    message: &quot;A valid URL is required for online events.&quot;,&#10;    path: [&quot;onlineLink&quot;],&#10;}).refine(data =&gt; {&#10;    // If it's a physical event, venueDetails must be provided.&#10;    if (!data.isOnline) {&#10;        return !!data.venueDetails;&#10;    }&#10;    return true;&#10;}, {&#10;    message: &quot;Venue details are required for physical events.&quot;,&#10;    path: [&quot;venueDetails&quot;],&#10;}).refine(data =&gt; {&#10;    // End time must be after start time&#10;    return new Date(data.endTime) &gt; new Date(data.startTime);&#10;}, {&#10;    message: &quot;End time must be after the start time.&quot;,&#10;    path: [&quot;endTime&quot;],&#10;});&#10;&#10;&#10;// --- Final Event Schema ---&#10;&#10;export const createEventSchema = z.object({&#10;    title: z.string().min(3, {message: &quot;Title must be at least 3 characters.&quot;}),&#10;    description: z.string().optional(),&#10;    overview: z.string().optional(),&#10;    organizationId: z.uuid(),&#10;    categoryId: z.uuid({message: &quot;Please select a category.&quot;}),&#10;    tiers: z.array(tierSchema).min(1, {message: &quot;You must create at least one tier.&quot;}),&#10;    sessions: z.array(sessionSchema).min(1, {message: &quot;You must schedule at least one session.&quot;}),&#10;});&#10;&#10;// --- Type Inference ---&#10;&#10;export type CreateEventFormData = z.infer&lt;typeof createEventSchema&gt;;&#10;export type SessionFormData = z.infer&lt;typeof sessionSchema&gt;;&#10;export type TierFormData = z.infer&lt;typeof tierSchema&gt;;&#10;export type VenueDetails = z.infer&lt;typeof venueDetailsSchema&gt;;&#10;export type SessionSeatingMapRequest = z.infer&lt;typeof sessionSeatingMapRequestSchema&gt;;&#10;export type Seat = z.infer&lt;typeof seatSchema&gt;;&#10;&#10;// --- Step-by-Step Validation Fields ---&#10;&#10;export const stepValidationFields = {&#10;    1: ['title', 'categoryId', 'description', 'overview'] as const,&#10;    2: ['tiers'] as const,&#10;    3: ['sessions'] as const,&#10;    // Step 4 is for seating, which is part of the session object&#10;    // Step 5 is for cover photos and review (handled separately)&#10;} as const;&#10;" />
              <option name="updatedContent" value="import {z} from 'zod';&#10;&#10;export enum SalesStartRuleType {&#10;    IMMEDIATE = 'IMMEDIATE',&#10;    ROLLING = 'ROLLING',&#10;    FIXED = 'FIXED',&#10;}&#10;&#10;&#10;// --- Seating Layout Schemas ---&#10;&#10;const positionSchema = z.object({&#10;    x: z.number(),&#10;    y: z.number(),&#10;});&#10;&#10;const seatSchema = z.object({&#10;    id: z.string(),&#10;    label: z.string(),&#10;    tierId: z.string().optional(),&#10;    status: z.enum(['AVAILABLE', 'RESERVED']).optional(),&#10;});&#10;&#10;const rowSchema = z.object({&#10;    id: z.string(),&#10;    label: z.string(),&#10;    seats: z.array(seatSchema),&#10;});&#10;&#10;const blockSchema = z.object({&#10;    id: z.string(),&#10;    name: z.string().min(1, &quot;Block name is required.&quot;),&#10;    type: z.enum(['seated_grid', 'standing_capacity', 'non_sellable']),&#10;    position: positionSchema,&#10;    rows: z.array(rowSchema).optional(),&#10;    capacity: z.number().optional(),&#10;    seats: z.array(seatSchema).optional(),&#10;    width: z.number().optional(),&#10;    height: z.number().optional(),&#10;});&#10;&#10;const layoutSchema = z.object({&#10;    blocks: z.array(blockSchema),&#10;});&#10;&#10;const sessionSeatingMapRequestSchema = z.object({&#10;    name: z.string(),&#10;    layout: layoutSchema,&#10;});&#10;&#10;&#10;// --- Venue &amp; Tier Schemas ---&#10;&#10;const venueDetailsSchema = z.object({&#10;    name: z.string().min(1, &quot;Venue name is required.&quot;),&#10;    address: z.string().optional(),&#10;    latitude: z.number().optional(),&#10;    longitude: z.number().optional(),&#10;});&#10;&#10;const tierSchema = z.object({&#10;    id: z.string(),&#10;    name: z.string().min(1, {message: &quot;Tier name cannot be empty.&quot;}),&#10;    price: z.number().min(0, {message: &quot;Price must be a positive number.&quot;}),&#10;    color: z.string().optional(),&#10;});&#10;&#10;&#10;// --- Session Schema with Conditional Logic ---&#10;&#10;const sessionSchema = z.object({&#10;    startTime: z.iso.datetime({message: &quot;Invalid start date format.&quot;}),&#10;    endTime: z.iso.datetime({message: &quot;Invalid end date format.&quot;}),&#10;&#10;    // ✅ Corrected: Use z.enum() for string-based enums.&#10;    salesStartRuleType: z.enum([&#10;        SalesStartRuleType.IMMEDIATE,&#10;        SalesStartRuleType.ROLLING,&#10;        SalesStartRuleType.FIXED&#10;    ]),&#10;&#10;    salesStartHoursBefore: z.number().optional(),&#10;    salesStartFixedDatetime: z.iso.datetime({message: &quot;Invalid date format.&quot;}).optional(),&#10;    isOnline: z.boolean(),&#10;    onlineLink: z.string().optional(),&#10;    venueDetails: z.preprocess(&#10;        // This preprocessing step ignores venueDetails when isOnline is true&#10;        (val, ctx) =&gt; {&#10;            const isOnline = (ctx.parent as any).isOnline;&#10;            return isOnline ? undefined : val;&#10;        },&#10;        venueDetailsSchema.optional()&#10;    ),&#10;    layoutData: sessionSeatingMapRequestSchema,&#10;}).refine(data =&gt; {&#10;    // If it's an online event, the onlineLink must be a valid URL.&#10;    if (data.isOnline) {&#10;        return data.onlineLink &amp;&amp; z.string().url().safeParse(data.onlineLink).success;&#10;    }&#10;    return true;&#10;}, {&#10;    message: &quot;A valid URL is required for online events.&quot;,&#10;    path: [&quot;onlineLink&quot;],&#10;}).refine(data =&gt; {&#10;    // If it's a physical event, venueDetails must be provided with a name&#10;    if (!data.isOnline) {&#10;        return !!data.venueDetails?.name;&#10;    }&#10;    return true;&#10;}, {&#10;    message: &quot;Venue details are required for physical events.&quot;,&#10;    path: [&quot;venueDetails&quot;],&#10;}).refine(data =&gt; {&#10;    // End time must be after start time&#10;    return new Date(data.endTime) &gt; new Date(data.startTime);&#10;}, {&#10;    message: &quot;End time must be after the start time.&quot;,&#10;    path: [&quot;endTime&quot;],&#10;});&#10;&#10;&#10;// --- Final Event Schema ---&#10;&#10;export const createEventSchema = z.object({&#10;    title: z.string().min(3, {message: &quot;Title must be at least 3 characters.&quot;}),&#10;    description: z.string().optional(),&#10;    overview: z.string().optional(),&#10;    organizationId: z.uuid(),&#10;    categoryId: z.uuid({message: &quot;Please select a category.&quot;}),&#10;    tiers: z.array(tierSchema).min(1, {message: &quot;You must create at least one tier.&quot;}),&#10;    sessions: z.array(sessionSchema).min(1, {message: &quot;You must schedule at least one session.&quot;}),&#10;});&#10;&#10;// --- Type Inference ---&#10;&#10;export type CreateEventFormData = z.infer&lt;typeof createEventSchema&gt;;&#10;export type SessionFormData = z.infer&lt;typeof sessionSchema&gt;;&#10;export type TierFormData = z.infer&lt;typeof tierSchema&gt;;&#10;export type VenueDetails = z.infer&lt;typeof venueDetailsSchema&gt;;&#10;export type SessionSeatingMapRequest = z.infer&lt;typeof sessionSeatingMapRequestSchema&gt;;&#10;export type Seat = z.infer&lt;typeof seatSchema&gt;;&#10;&#10;// --- Step-by-Step Validation Fields ---&#10;&#10;export const stepValidationFields = {&#10;    1: ['title', 'categoryId', 'description', 'overview'] as const,&#10;    2: ['tiers'] as const,&#10;    3: ['sessions'] as const,&#10;    // Step 4 is for seating, which is part of the session object&#10;    // Step 5 is for cover photos and review (handled separately)&#10;} as const;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/providers/LimitProvider.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/providers/LimitProvider.ts" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, {createContext, useContext, useState, useEffect, ReactNode, useMemo} from 'react';&#10;import {useAuth} from '@/providers/AuthProvider';&#10;import {getAppConfiguration} from '@/lib/actions/configActions';&#10;import {AppConfig, TierLimitDetails, TierName} from '@/types/config';&#10;&#10;// Define the shape of the context&#10;interface LimitContextType {&#10;    config: AppConfig | null;&#10;    isLoading: boolean;&#10;    error: string | null;&#10;    currentUserTier: TierName;&#10;    currentUserTierLimits: TierLimitDetails | null;&#10;    getLimitsForTier: (tier: TierName) =&gt; TierLimitDetails | null;&#10;}&#10;&#10;const LimitContext = createContext&lt;LimitContextType | undefined&gt;(undefined);&#10;&#10;export const LimitProvider = ({children}: { children: ReactNode }) =&gt; {&#10;    const {keycloak} = useAuth();&#10;    const [config, setConfig] = useState&lt;AppConfig | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    // Fetch the entire configuration on initial application load&#10;    useEffect(() =&gt; {&#10;        const fetchConfig = async () =&gt; {&#10;            try {&#10;                const appConfig = await getAppConfiguration();&#10;                setConfig(appConfig);&#10;            } catch (err) {&#10;                setError('Failed to load application configuration. Some features may be unavailable.');&#10;                console.error(err);&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;        fetchConfig();&#10;    }, []);&#10;&#10;    // A memoized helper to get the current user's highest tier from their JWT&#10;    const currentUserTier = useMemo((): TierName =&gt; {&#10;        if (!keycloak?.tokenParsed?.user_groups || !Array.isArray(keycloak.tokenParsed.user_groups)) return 'FREE';&#10;&#10;        const userGroups: string[] = keycloak.tokenParsed.user_groups;&#10;        let highestTier: TierName = 'FREE';&#10;        let maxLevel = 0;&#10;&#10;        const tierLevels: Record&lt;TierName, number&gt; = {FREE: 0, PRO: 1, ENTERPRISE: 2};&#10;&#10;        userGroups.forEach(group =&gt; {&#10;            if (group.startsWith('/Tiers/')) {&#10;                const tierName = group.substring('/Tiers/'.length).toUpperCase() as TierName;&#10;                if (tierLevels[tierName] !== undefined &amp;&amp; tierLevels[tierName] &gt; maxLevel) {&#10;                    maxLevel = tierLevels[tierName];&#10;                    highestTier = tierName;&#10;                }&#10;            }&#10;        });&#10;        return highestTier;&#10;    }, [keycloak]);&#10;&#10;    // A memoized value for the current user's specific limits, derived from the full config&#10;    const currentUserTierLimits = useMemo(() =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[currentUserTier] || config.tierLimits.FREE;&#10;    }, [config, currentUserTier]);&#10;&#10;    // A function to get limits for any specified tier (useful for upgrade pages)&#10;    const getLimitsForTier = (tier: TierName): TierLimitDetails | null =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[tier] || null;&#10;    };&#10;&#10;    const value = {config, isLoading, error, currentUserTier, currentUserTierLimits, getLimitsForTier};&#10;&#10;    return (&#10;        &lt;LimitContext.Provider value={value}&gt;&#10;            {children}&#10;        &lt;/LimitContext.Provider&gt;&#10;    );&#10;};&#10;&#10;// The custom hook to easily access the limits from any component&#10;export const useLimits = (): LimitContextType =&gt; {&#10;    const context = useContext(LimitContext);&#10;    if (context === undefined) {&#10;        throw new Error('useLimits must be used within a LimitProvider');&#10;    }&#10;    return context;&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, {createContext, useContext, useState, useEffect, ReactNode, useMemo} from 'react';&#10;import {useAuth} from '@/providers/AuthProvider';&#10;import {getAppConfiguration} from '@/lib/actions/configActions';&#10;import {AppConfig, TierLimitDetails, TierName} from '@/types/config';&#10;&#10;// Define the shape of the context&#10;interface LimitContextType {&#10;    config: AppConfig | null;&#10;    isLoading: boolean;&#10;    error: string | null;&#10;    currentUserTier: TierName;&#10;    currentUserTierLimits: TierLimitDetails | null;&#10;    getLimitsForTier: (tier: TierName) =&gt; TierLimitDetails | null;&#10;}&#10;&#10;const LimitContext = createContext&lt;LimitContextType | undefined&gt;(undefined);&#10;&#10;export const LimitProvider = ({children}: { children: ReactNode }) =&gt; {&#10;    const {keycloak} = useAuth();&#10;    const [config, setConfig] = useState&lt;AppConfig | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    // Fetch the entire configuration on initial application load&#10;    useEffect(() =&gt; {&#10;        const fetchConfig = async () =&gt; {&#10;            try {&#10;                const appConfig = await getAppConfiguration();&#10;                setConfig(appConfig);&#10;            } catch (err) {&#10;                setError('Failed to load application configuration. Some features may be unavailable.');&#10;                console.error(err);&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;        fetchConfig();&#10;    }, []);&#10;&#10;    // A memoized helper to get the current user's highest tier from their JWT&#10;    const currentUserTier = useMemo((): TierName =&gt; {&#10;        if (!keycloak?.tokenParsed?.user_groups || !Array.isArray(keycloak.tokenParsed.user_groups)) return 'FREE';&#10;&#10;        const userGroups: string[] = keycloak.tokenParsed.user_groups;&#10;        let highestTier: TierName = 'FREE';&#10;        let maxLevel = 0;&#10;&#10;        const tierLevels: Record&lt;TierName, number&gt; = {FREE: 0, PRO: 1, ENTERPRISE: 2};&#10;&#10;        userGroups.forEach(group =&gt; {&#10;            if (group.startsWith('/Tiers/')) {&#10;                const tierName = group.substring('/Tiers/'.length).toUpperCase() as TierName;&#10;                if (tierLevels[tierName] !== undefined &amp;&amp; tierLevels[tierName] &gt; maxLevel) {&#10;                    maxLevel = tierLevels[tierName];&#10;                    highestTier = tierName;&#10;                }&#10;            }&#10;        });&#10;        return highestTier;&#10;    }, [keycloak]);&#10;&#10;    // A memoized value for the current user's specific limits, derived from the full config&#10;    const currentUserTierLimits = useMemo(() =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[currentUserTier] || config.tierLimits.FREE;&#10;    }, [config, currentUserTier]);&#10;&#10;    // A function to get limits for any specified tier (useful for upgrade pages)&#10;    const getLimitsForTier = (tier: TierName): TierLimitDetails | null =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[tier] || null;&#10;    };&#10;&#10;    const value = {config, isLoading, error, currentUserTier, currentUserTierLimits, getLimitsForTier};&#10;&#10;    return React.createElement(&#10;        LimitContext.Provider,&#10;        { value },&#10;        children&#10;    );&#10;};&#10;&#10;// The custom hook to easily access the limits from any component&#10;export const useLimits = (): LimitContextType =&gt; {&#10;    const context = useContext(LimitContext);&#10;    if (context === undefined) {&#10;        throw new Error('useLimits must be used within a LimitProvider');&#10;    }&#10;    return context;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>