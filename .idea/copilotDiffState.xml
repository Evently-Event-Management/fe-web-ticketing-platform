<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/InteractiveBlocks.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/InteractiveBlocks.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useDraggable} from '@dnd-kit/core';&#10;import {Block, Tier} from '@/lib/validators/event';&#10;import {cn} from '@/lib/utils';&#10;import {Button} from '@/components/ui/button';&#10;&#10;// --- Interactive Draggable Block for Seated Grids ---&#10;interface DraggableBlockProps {&#10;    block: Block;&#10;    tiers: Tier[];&#10;    onSeatClick: (blockId: string, rowId: string, seatId: string) =&gt; void;&#10;    onApplyToAllSeats?: (blockId: string) =&gt; void;  // New prop for handling apply to all&#10;}&#10;&#10;export function InteractiveDraggableBlock({block, tiers, onSeatClick, onApplyToAllSeats}: DraggableBlockProps) {&#10;    const {setNodeRef} = useDraggable({&#10;        id: block.id,&#10;        disabled: true, // Dragging is disabled in assignment mode&#10;    });&#10;&#10;    const style = {&#10;        // No transform needed as blocks are static in this editor&#10;        left: block.position.x,&#10;        top: block.position.y,&#10;    };&#10;&#10;    const getTierColor = (tierId?: string) =&gt; {&#10;        if (tierId === 'RESERVED') return 'hsl(var(--muted-foreground))';&#10;        if (!tierId) return undefined;&#10;        const tier = tiers.find(t =&gt; t.id === tierId);&#10;        return tier?.color || 'hsl(var(--primary))';&#10;    };&#10;&#10;    return (&#10;        &lt;div ref={setNodeRef} style={style} className=&quot;absolute p-3 bg-card border rounded-lg&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col text-center relative&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between w-full mb-2&quot;&gt;&#10;                    &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#10;                    {onApplyToAllSeats &amp;&amp; (&#10;                        &lt;Button&#10;                            size=&quot;sm&quot;&#10;                            variant=&quot;outline&quot;&#10;                            className=&quot;text-xs py-0 h-6&quot;&#10;                            onClick={(e) =&gt; {&#10;                                e.stopPropagation();&#10;                                onApplyToAllSeats(block.id);&#10;                            }}&#10;                        &gt;&#10;                            Apply to All&#10;                        &lt;/Button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;grid gap-1.5&quot;&#10;                     style={{gridTemplateColumns: `repeat(${block.rows?.[0]?.seats?.length || 1}, 1fr)`}}&gt;&#10;                    {block.rows?.map(row =&gt;&#10;                        row.seats.map(seat =&gt; (&#10;                            &lt;button&#10;                                key={seat.id}&#10;                                type=&quot;button&quot;&#10;                                onClick={() =&gt; onSeatClick(block.id, row.id, seat.id)}&#10;                                className={cn(&#10;                                    &quot;h-6 w-6 rounded-full border text-xs font-mono transition-all hover:scale-110 flex items-center justify-center&quot;,&#10;                                    seat.status === 'RESERVED' &amp;&amp; &quot;bg-muted-foreground text-primary-foreground line-through border-destructive border-2&quot;&#10;                                )}&#10;                                style={{backgroundColor: seat.tierId &amp;&amp; seat.status !== 'RESERVED' ? getTierColor(seat.tierId) : undefined}}&#10;                            &gt;&#10;                                {seat.label}&#10;                            &lt;/button&gt;&#10;                        ))&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;// --- Interactive Resizable Block for Standing Capacity ---&#10;interface ResizableBlockProps {&#10;    block: Block;&#10;    tiers: Tier[];&#10;    onClick: (blockId: string) =&gt; void;&#10;}&#10;&#10;export function InteractiveResizableBlock({block, tiers, onClick}: ResizableBlockProps) {&#10;    const {setNodeRef} = useDraggable({&#10;        id: block.id,&#10;        disabled: true,&#10;    });&#10;&#10;    const style = {&#10;        left: block.position.x,&#10;        top: block.position.y,&#10;        width: block.width,&#10;        height: block.height,&#10;    };&#10;&#10;    // âœ… Determine the background color based on the tier of the seats inside the block.&#10;    // For simplicity, we'll use the tier of the first seat as the representative color.&#10;    const getBlockTierColor = () =&gt; {&#10;        const firstTieredSeat = block.seats?.find(s =&gt; s.tierId);&#10;        if (!firstTieredSeat || !firstTieredSeat.tierId) return undefined;&#10;        const tier = tiers.find(t =&gt; t.id === firstTieredSeat.tierId);&#10;        return tier?.color;&#10;    };&#10;&#10;    return (&#10;        &lt;div ref={setNodeRef} style={style} className=&quot;absolute&quot;&gt;&#10;            &lt;div&#10;                onClick={() =&gt; onClick(block.id)}&#10;                className=&quot;p-2 bg-card border rounded-lg shadow-md box-border flex flex-col relative cursor-pointer h-full w-full&quot;&#10;                style={{backgroundColor: getBlockTierColor()}}&#10;            &gt;&#10;                &lt;div className=&quot;flex items-center gap-2 flex-grow&quot;&gt;&#10;                    &lt;div className=&quot;flex flex-col text-center flex-grow&quot;&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#10;                        &lt;span className=&quot;text-xs text-muted-foreground&quot;&gt;{block.capacity} capacity&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useDraggable} from '@dnd-kit/core';&#10;import {Block, Tier} from '@/lib/validators/event';&#10;import {cn} from '@/lib/utils';&#10;import {Button} from '@/components/ui/button';&#10;&#10;// --- Interactive Draggable Block for Seated Grids ---&#10;interface DraggableBlockProps {&#10;    block: Block;&#10;    tiers: Tier[];&#10;    onSeatClick: (blockId: string, rowId: string, seatId: string) =&gt; void;&#10;    onApplyToAllSeats?: (blockId: string) =&gt; void;  // New prop for handling apply to all&#10;}&#10;&#10;export function InteractiveDraggableBlock({block, tiers, onSeatClick, onApplyToAllSeats}: DraggableBlockProps) {&#10;    const {setNodeRef} = useDraggable({&#10;        id: block.id,&#10;        disabled: true, // Dragging is disabled in assignment mode&#10;    });&#10;&#10;    const style = {&#10;        // No transform needed as blocks are static in this editor&#10;        left: block.position.x,&#10;        top: block.position.y,&#10;    };&#10;&#10;    const getTierColor = (tierId?: string) =&gt; {&#10;        if (tierId === 'RESERVED') return 'hsla(var(--muted-foreground), 0.5)'; // Added opacity&#10;        if (!tierId) return undefined;&#10;        const tier = tiers.find(t =&gt; t.id === tierId);&#10;        // Add opacity to the color&#10;        if (tier?.color) {&#10;            // Handle HSL color format&#10;            if (tier.color.startsWith('hsl')) {&#10;                return tier.color.replace('hsl', 'hsla').replace(')', ', 0.5)');&#10;            }&#10;            // Handle hex or other formats by adding opacity suffix&#10;            return `${tier.color}80`; // 80 is equivalent to 50% opacity in hex&#10;        }&#10;        return 'hsla(var(--primary), 0.5)'; // Added opacity&#10;    };&#10;&#10;    return (&#10;        &lt;div ref={setNodeRef} style={style} className=&quot;absolute p-3 bg-card border rounded-lg&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col text-center relative&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between w-full mb-2&quot;&gt;&#10;                    &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#10;                    {onApplyToAllSeats &amp;&amp; (&#10;                        &lt;Button&#10;                            size=&quot;sm&quot;&#10;                            variant=&quot;outline&quot;&#10;                            className=&quot;text-xs py-0 h-6&quot;&#10;                            onClick={(e) =&gt; {&#10;                                e.stopPropagation();&#10;                                onApplyToAllSeats(block.id);&#10;                            }}&#10;                        &gt;&#10;                            Apply to All&#10;                        &lt;/Button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;grid gap-1.5&quot;&#10;                     style={{gridTemplateColumns: `repeat(${block.rows?.[0]?.seats?.length || 1}, 1fr)`}}&gt;&#10;                    {block.rows?.map(row =&gt;&#10;                        row.seats.map(seat =&gt; (&#10;                            &lt;button&#10;                                key={seat.id}&#10;                                type=&quot;button&quot;&#10;                                onClick={() =&gt; onSeatClick(block.id, row.id, seat.id)}&#10;                                className={cn(&#10;                                    &quot;h-6 w-6 rounded-full border text-xs font-mono transition-all hover:scale-110 flex items-center justify-center&quot;,&#10;                                    seat.status === 'RESERVED' &amp;&amp; &quot;bg-muted-foreground/50 text-primary-foreground line-through border-destructive border-2&quot;&#10;                                )}&#10;                                style={{backgroundColor: seat.tierId &amp;&amp; seat.status !== 'RESERVED' ? getTierColor(seat.tierId) : undefined}}&#10;                            &gt;&#10;                                {seat.label}&#10;                            &lt;/button&gt;&#10;                        ))&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;// --- Interactive Resizable Block for Standing Capacity ---&#10;interface ResizableBlockProps {&#10;    block: Block;&#10;    tiers: Tier[];&#10;    onClick: (blockId: string) =&gt; void;&#10;}&#10;&#10;export function InteractiveResizableBlock({block, tiers, onClick}: ResizableBlockProps) {&#10;    const {setNodeRef} = useDraggable({&#10;        id: block.id,&#10;        disabled: true,&#10;    });&#10;&#10;    const style = {&#10;        left: block.position.x,&#10;        top: block.position.y,&#10;        width: block.width,&#10;        height: block.height,&#10;    };&#10;&#10;    // Determine the background color based on the tier of the seats inside the block&#10;    // with 50% opacity&#10;    const getBlockTierColor = () =&gt; {&#10;        const firstTieredSeat = block.seats?.find(s =&gt; s.tierId);&#10;        if (!firstTieredSeat || !firstTieredSeat.tierId) return undefined;&#10;        const tier = tiers.find(t =&gt; t.id === firstTieredSeat.tierId);&#10;        &#10;        // Add opacity to the color&#10;        if (tier?.color) {&#10;            // Handle HSL color format&#10;            if (tier.color.startsWith('hsl')) {&#10;                return tier.color.replace('hsl', 'hsla').replace(')', ', 0.5)');&#10;            }&#10;            // Handle hex or other formats by adding opacity suffix&#10;            return `${tier.color}80`; // 80 is equivalent to 50% opacity in hex&#10;        }&#10;        return undefined;&#10;    };&#10;&#10;    return (&#10;        &lt;div ref={setNodeRef} style={style} className=&quot;absolute&quot;&gt;&#10;            &lt;div&#10;                onClick={() =&gt; onClick(block.id)}&#10;                className=&quot;p-2 bg-card border rounded-lg shadow-md box-border flex flex-col relative cursor-pointer h-full w-full&quot;&#10;                style={{backgroundColor: getBlockTierColor()}}&#10;            &gt;&#10;                &lt;div className=&quot;flex items-center gap-2 flex-grow&quot;&gt;&#10;                    &lt;div className=&quot;flex flex-col text-center flex-grow&quot;&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#10;                        &lt;span className=&quot;text-xs text-muted-foreground&quot;&gt;{block.capacity} capacity&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/PhysicalConfigView.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/PhysicalConfigView.tsx" />
              <option name="originalContent" value="// --- Physical Configuration View ---&#10;import {CreateEventFormData, SessionSeatingMapRequest} from &quot;@/lib/validators/event&quot;;&#10;import {useFormContext} from &quot;react-hook-form&quot;;&#10;import * as React from &quot;react&quot;;&#10;import {useEffect, useState} from &quot;react&quot;;&#10;import {LayoutData, SeatingLayoutTemplateResponse} from &quot;@/types/seatingLayout&quot;;&#10;import {createSeatingLayoutTemplate, getSeatingLayoutTemplatesByOrg} from &quot;@/lib/actions/seatingLayoutTemplateActions&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {LayoutEditor} from &quot;@/app/manage/organization/[organization_id]/seating/_components/LayoutEditor&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import LayoutPreviewCard from &quot;@/app/manage/organization/[organization_id]/seating/_components/LayoutPreviewCard&quot;;&#10;import {TierAssignmentEditor} from &quot;@/app/manage/organization/[organization_id]/event/_components/TierAssignmentEditor&quot;;&#10;&#10;export function PhysicalConfigView({ onSave}: {&#10;    onSave: (layout: SessionSeatingMapRequest) =&gt; void;&#10;}) {&#10;    const {watch} = useFormContext&lt;CreateEventFormData&gt;();&#10;    const organizationId = watch('organizationId');&#10;    console.log(&quot;Organization ID:&quot;, organizationId);&#10;    const [templates, setTemplates] = useState&lt;SeatingLayoutTemplateResponse[]&gt;([]);&#10;    const [mode, setMode] = useState&lt;'select' | 'create' | 'assign'&gt;('select');&#10;    const [selectedLayout, setSelectedLayout] = useState&lt;LayoutData | null&gt;(null);&#10;&#10;    useEffect(() =&gt; {&#10;        if (organizationId) {&#10;            getSeatingLayoutTemplatesByOrg(organizationId, 0, 100).then(res =&gt; setTemplates(res.content));&#10;        }&#10;    }, [organizationId]);&#10;&#10;    const handleTierAssignmentSave = (layoutWithTiers: SessionSeatingMapRequest) =&gt; {&#10;        onSave(layoutWithTiers);&#10;    };&#10;&#10;    const handleSave = async (layoutData: LayoutData) =&gt; {&#10;        const request = {&#10;            name: layoutData.name,&#10;            organizationId,&#10;            layoutData,&#10;        };&#10;&#10;        toast.promise(createSeatingLayoutTemplate(request), {&#10;            loading: 'Saving new layout...',&#10;            success: (data) =&gt; {&#10;                // Redirect to the new edit page on success&#10;                return `Layout &quot;${data.name}&quot; created successfully!`;&#10;            },&#10;            error: (err) =&gt; (err.message || 'Failed to create layout.') + 'Moving to assign mode.',&#10;        });&#10;    };&#10;&#10;&#10;    if (mode === 'create') {&#10;        return &lt;LayoutEditor onSave={async (data) =&gt; {&#10;            await handleSave(data);&#10;            setSelectedLayout(data);&#10;            setMode(&quot;assign&quot;);&#10;        }}/&gt;;&#10;    }&#10;&#10;    if (mode === 'assign' &amp;&amp; selectedLayout) {&#10;        return &lt;TierAssignmentEditor initialLayout={selectedLayout} onSave={handleTierAssignmentSave}/&gt;;&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;p-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold mb-4&quot;&gt;Select a Seating Layout&lt;/h3&gt;&#10;            &lt;div className=&quot;grid grid-cols-5 gap-4 mb-4&quot;&gt;&#10;                {templates.map(template =&gt; (&#10;                    &lt;div key={template.id} onClick={() =&gt; {&#10;                        setSelectedLayout(template.layoutData);&#10;                        setMode('assign');&#10;                    }}&gt;&#10;                        &lt;LayoutPreviewCard layout={template} onDelete={() =&gt; {&#10;                        }}/&gt;&#10;                    &lt;/div&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;            &lt;Button variant=&quot;outline&quot; onClick={() =&gt; setMode('create')}&gt;Create From Scratch&lt;/Button&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="// --- Physical Configuration View ---&#10;import {CreateEventFormData, SessionSeatingMapRequest, Block, Seat} from &quot;@/lib/validators/event&quot;;&#10;import {useFormContext} from &quot;react-hook-form&quot;;&#10;import * as React from &quot;react&quot;;&#10;import {useEffect, useState} from &quot;react&quot;;&#10;import {LayoutData, SeatingLayoutTemplateResponse} from &quot;@/types/seatingLayout&quot;;&#10;import {createSeatingLayoutTemplate, getSeatingLayoutTemplatesByOrg} from &quot;@/lib/actions/seatingLayoutTemplateActions&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {LayoutEditor} from &quot;@/app/manage/organization/[organization_id]/seating/_components/LayoutEditor&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import LayoutPreviewCard from &quot;@/app/manage/organization/[organization_id]/seating/_components/LayoutPreviewCard&quot;;&#10;import {TierAssignmentEditor} from &quot;@/app/manage/organization/[organization_id]/event/_components/TierAssignmentEditor&quot;;&#10;&#10;export function PhysicalConfigView({ onSave}: {&#10;    onSave: (layout: SessionSeatingMapRequest) =&gt; void;&#10;}) {&#10;    const {watch} = useFormContext&lt;CreateEventFormData&gt;();&#10;    const organizationId = watch('organizationId');&#10;    console.log(&quot;Organization ID:&quot;, organizationId);&#10;    const [templates, setTemplates] = useState&lt;SeatingLayoutTemplateResponse[]&gt;([]);&#10;    const [mode, setMode] = useState&lt;'select' | 'create' | 'assign'&gt;('select');&#10;    const [selectedLayout, setSelectedLayout] = useState&lt;LayoutData | null&gt;(null);&#10;&#10;    useEffect(() =&gt; {&#10;        if (organizationId) {&#10;            getSeatingLayoutTemplatesByOrg(organizationId, 0, 100).then(res =&gt; setTemplates(res.content));&#10;        }&#10;    }, [organizationId]);&#10;    &#10;    const handleTierAssignmentSave = (layoutWithTiers: SessionSeatingMapRequest) =&gt; {&#10;        // Check if all seats and standing blocks have tier assignments&#10;        let hasUnassignedElements = false;&#10;        &#10;        for (const block of layoutWithTiers.layout.blocks) {&#10;            // Check seated blocks (rows with seats)&#10;            if (block.type === 'seated_grid' &amp;&amp; block.rows) {&#10;                for (const row of block.rows) {&#10;                    for (const seat of row.seats) {&#10;                        // Seat must either have a tierId or be marked as RESERVED&#10;                        if (!seat.tierId &amp;&amp; seat.status !== 'RESERVED') {&#10;                            hasUnassignedElements = true;&#10;                            break;&#10;                        }&#10;                    }&#10;                    if (hasUnassignedElements) break;&#10;                }&#10;            }&#10;            &#10;            // Check standing capacity blocks&#10;            if (block.type === 'standing_capacity' &amp;&amp; block.seats) {&#10;                // For standing blocks, check if at least one seat has a tier assignment&#10;                const hasAnyAssignedSeat = block.seats.some(seat =&gt; seat.tierId);&#10;                if (!hasAnyAssignedSeat &amp;&amp; block.seats.length &gt; 0) {&#10;                    hasUnassignedElements = true;&#10;                    break;&#10;                }&#10;            }&#10;            &#10;            if (hasUnassignedElements) break;&#10;        }&#10;&#10;        if (hasUnassignedElements) {&#10;            toast.error(&quot;Please assign all seats to a tier or mark them as reserved. Standing areas must also have tier assignments.&quot;);&#10;            return;&#10;        }&#10;        &#10;        // All elements are properly assigned, proceed with save&#10;        onSave(layoutWithTiers);&#10;    };&#10;&#10;    const handleSave = async (layoutData: LayoutData) =&gt; {&#10;        const request = {&#10;            name: layoutData.name,&#10;            organizationId,&#10;            layoutData,&#10;        };&#10;&#10;        toast.promise(createSeatingLayoutTemplate(request), {&#10;            loading: 'Saving new layout...',&#10;            success: (data) =&gt; {&#10;                // Redirect to the new edit page on success&#10;                return `Layout &quot;${data.name}&quot; created successfully!`;&#10;            },&#10;            error: (err) =&gt; (err.message || 'Failed to create layout.') + 'Moving to assign mode.',&#10;        });&#10;    };&#10;&#10;&#10;    if (mode === 'create') {&#10;        return &lt;LayoutEditor onSave={async (data) =&gt; {&#10;            await handleSave(data);&#10;            setSelectedLayout(data);&#10;            setMode(&quot;assign&quot;);&#10;        }}/&gt;;&#10;    }&#10;&#10;    if (mode === 'assign' &amp;&amp; selectedLayout) {&#10;        return &lt;TierAssignmentEditor initialLayout={selectedLayout} onSave={handleTierAssignmentSave}/&gt;;&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;p-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold mb-4&quot;&gt;Select a Seating Layout&lt;/h3&gt;&#10;            &lt;div className=&quot;grid grid-cols-5 gap-4 mb-4&quot;&gt;&#10;                {templates.map(template =&gt; (&#10;                    &lt;div key={template.id} onClick={() =&gt; {&#10;                        setSelectedLayout(template.layoutData);&#10;                        setMode('assign');&#10;                    }}&gt;&#10;                        &lt;LayoutPreviewCard layout={template} onDelete={() =&gt; {&#10;                        }}/&gt;&#10;                    &lt;/div&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;            &lt;Button variant=&quot;outline&quot; onClick={() =&gt; setMode('create')}&gt;Create From Scratch&lt;/Button&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/SeratingStep.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/SeratingStep.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {useFieldArray, useFormContext} from 'react-hook-form';&#10;import {CreateEventFormData} from '@/lib/validators/event';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {&#10;    SessionListItemSeating&#10;} from &quot;@/app/manage/organization/[organization_id]/event/_components/SessionListItemSeating&quot;;&#10;import {OnlineConfigView} from &quot;@/app/manage/organization/[organization_id]/event/_components/OnlineConfigView&quot;;&#10;import {PhysicalConfigView} from &quot;@/app/manage/organization/[organization_id]/event/_components/PhysicalConfigView&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {Checkbox} from &quot;@/components/ui/checkbox&quot;;&#10;import {Label} from &quot;@/components/ui/label&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {ArrowLeft} from &quot;lucide-react&quot;;&#10;&#10;interface SeatingStepProps {&#10;    onConfigModeChange?: (isInConfigMode: boolean) =&gt; void;&#10;}&#10;&#10;// --- Main Seating Step Component ---&#10;export function SeatingStep({ onConfigModeChange }: SeatingStepProps) {&#10;    const { control, formState: { errors }, watch, getValues, setValue } = useFormContext&lt;CreateEventFormData&gt;();&#10;    const [configuringIndex, setConfiguringIndex] = useState&lt;number | null&gt;(null);&#10;    const [applyToAll, setApplyToAll] = useState(false);&#10;&#10;    const { fields } = useFieldArray({&#10;        control,&#10;        name: &quot;sessions&quot;,&#10;    });&#10;&#10;    // Get the session being configured&#10;    const currentSession = configuringIndex !== null ? watch(`sessions.${configuringIndex}`) : null;&#10;&#10;    // Notify parent component when configuration mode changes&#10;    useEffect(() =&gt; {&#10;        if (onConfigModeChange) {&#10;            onConfigModeChange(configuringIndex !== null);&#10;        }&#10;    }, [configuringIndex, onConfigModeChange]);&#10;&#10;    const handleSave = (layoutData: any) =&gt; {&#10;        if (configuringIndex === null) return;&#10;&#10;        setValue(`sessions.${configuringIndex}.layoutData`, layoutData);&#10;&#10;        if (applyToAll) {&#10;            const allSessions = getValues('sessions');&#10;            allSessions.forEach((s, i) =&gt; {&#10;                // Apply only to sessions of the same type (online/physical)&#10;                if (s.isOnline === currentSession?.isOnline) {&#10;                    setValue(`sessions.${i}.layoutData`, layoutData);&#10;                }&#10;            });&#10;            toast.success(`Seating applied to all ${currentSession?.isOnline ? 'online' : 'physical'} sessions.`);&#10;        } else {&#10;            toast.success(`Seating configured for Session ${configuringIndex + 1}.`);&#10;        }&#10;&#10;        setConfiguringIndex(null);&#10;    };&#10;&#10;    // If we're configuring a session, show the full-page configuration view&#10;    if (configuringIndex !== null &amp;&amp; currentSession) {&#10;        return (&#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;Button&#10;                        variant=&quot;ghost&quot;&#10;                        onClick={() =&gt; setConfiguringIndex(null)}&#10;                        className=&quot;flex items-center gap-1&quot;&#10;                    &gt;&#10;                        &lt;ArrowLeft className=&quot;h-4 w-4&quot; /&gt;&#10;                        Back to Sessions&#10;                    &lt;/Button&gt;&#10;                    &lt;h2 className=&quot;text-xl font-semibold&quot;&gt;&#10;                        Configure Seating for Session {configuringIndex + 1}&#10;                    &lt;/h2&gt;&#10;                    &lt;div&gt;&lt;/div&gt; {/* Empty div for flexbox spacing */}&#10;                &lt;/div&gt;&#10;&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;&#10;                            {currentSession.isOnline&#10;                                ? &quot;Online Capacity Configuration&quot;&#10;                                : &quot;Physical Seating Configuration&quot;}&#10;                        &lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;&#10;                            {currentSession.isOnline&#10;                                ? &quot;Set the capacity and ticket tier for your online event.&quot;&#10;                                : &quot;Choose a layout template or create a new one, then assign your tiers.&quot;}&#10;                        &lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                        {currentSession.isOnline ? (&#10;                            &lt;OnlineConfigView onSave={handleSave} /&gt;&#10;                        ) : (&#10;                            &lt;PhysicalConfigView onSave={handleSave} /&gt;&#10;                        )}&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                &lt;div className=&quot;flex items-center justify-between border-t pt-4 mt-8&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;Checkbox&#10;                            id=&quot;apply-to-all-seating&quot;&#10;                            checked={applyToAll}&#10;                            onCheckedChange={(checked) =&gt; setApplyToAll(checked === true)}&#10;                        /&gt;&#10;                        &lt;Label htmlFor=&quot;apply-to-all-seating&quot;&gt;&#10;                            Apply to all {currentSession.isOnline ? 'online' : 'physical'} sessions&#10;                        &lt;/Label&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    // Otherwise show the session list&#10;    return (&#10;        &lt;Card&gt;&#10;            &lt;CardHeader&gt;&#10;                &lt;CardTitle&gt;Seating &amp; Tier Assignment&lt;/CardTitle&gt;&#10;                &lt;CardDescription&gt;&#10;                    Configure the seating layout and assign ticket tiers for each session.&#10;                &lt;/CardDescription&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;                {fields.map((field, index) =&gt; (&#10;                    &lt;SessionListItemSeating&#10;                        key={field.id}&#10;                        field={field}&#10;                        index={index}&#10;                        onConfigure={() =&gt; setConfiguringIndex(index)}&#10;                    /&gt;&#10;                ))}&#10;&#10;                {errors.sessions?.root &amp;&amp; (&#10;                    &lt;p className=&quot;text-sm font-medium text-destructive&quot;&gt;{errors.sessions.root.message}&lt;/p&gt;&#10;                )}&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {useFieldArray, useFormContext} from 'react-hook-form';&#10;import {CreateEventFormData} from '@/lib/validators/event';&#10;import {SessionListItemSeating} from &quot;@/app/manage/organization/[organization_id]/event/_components/SessionListItemSeating&quot;;&#10;import {OnlineConfigView} from &quot;@/app/manage/organization/[organization_id]/event/_components/OnlineConfigView&quot;;&#10;import {PhysicalConfigView} from &quot;@/app/manage/organization/[organization_id]/event/_components/PhysicalConfigView&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {Checkbox} from &quot;@/components/ui/checkbox&quot;;&#10;import {Label} from &quot;@/components/ui/label&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {ArrowLeft} from &quot;lucide-react&quot;;&#10;&#10;interface SeatingStepProps {&#10;    onConfigModeChange?: (isInConfigMode: boolean) =&gt; void;&#10;}&#10;&#10;// --- Main Seating Step Component ---&#10;export function SeatingStep({ onConfigModeChange }: SeatingStepProps) {&#10;    const { control, formState: { errors }, watch, getValues, setValue } = useFormContext&lt;CreateEventFormData&gt;();&#10;    const [configuringIndex, setConfiguringIndex] = useState&lt;number | null&gt;(null);&#10;    const [applyToAll, setApplyToAll] = useState(false);&#10;&#10;    const { fields } = useFieldArray({&#10;        control,&#10;        name: &quot;sessions&quot;,&#10;    });&#10;&#10;    // Get the session being configured&#10;    const currentSession = configuringIndex !== null ? watch(`sessions.${configuringIndex}`) : null;&#10;&#10;    // Notify parent component when configuration mode changes&#10;    useEffect(() =&gt; {&#10;        if (onConfigModeChange) {&#10;            onConfigModeChange(configuringIndex !== null);&#10;        }&#10;    }, [configuringIndex, onConfigModeChange]);&#10;&#10;    const handleSave = (layoutData: any) =&gt; {&#10;        if (configuringIndex === null) return;&#10;&#10;        setValue(`sessions.${configuringIndex}.layoutData`, layoutData);&#10;&#10;        if (applyToAll) {&#10;            const allSessions = getValues('sessions');&#10;            allSessions.forEach((s, i) =&gt; {&#10;                // Apply only to sessions of the same type (online/physical)&#10;                if (s.isOnline === currentSession?.isOnline) {&#10;                    setValue(`sessions.${i}.layoutData`, layoutData);&#10;                }&#10;            });&#10;            toast.success(`Seating applied to all ${currentSession?.isOnline ? 'online' : 'physical'} sessions.`);&#10;        } else {&#10;            toast.success(`Seating configured for Session ${configuringIndex + 1}.`);&#10;        }&#10;&#10;        setConfiguringIndex(null);&#10;    };&#10;&#10;    // If we're configuring a session, show the full-page configuration view&#10;    if (configuringIndex !== null &amp;&amp; currentSession) {&#10;        return (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;Button&#10;                        variant=&quot;ghost&quot;&#10;                        onClick={() =&gt; setConfiguringIndex(null)}&#10;                        className=&quot;flex items-center gap-1&quot;&#10;                    &gt;&#10;                        &lt;ArrowLeft className=&quot;h-4 w-4&quot; /&gt;&#10;                        Back to Sessions&#10;                    &lt;/Button&gt;&#10;                    &lt;h2 className=&quot;text-xl font-semibold&quot;&gt;&#10;                        Configure Seating for Session {configuringIndex + 1}&#10;                    &lt;/h2&gt;&#10;                    &lt;div&gt;&lt;/div&gt; {/* Empty div for flexbox spacing */}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-medium&quot;&gt;&#10;                        {currentSession.isOnline&#10;                            ? &quot;Online Capacity Configuration&quot;&#10;                            : &quot;Physical Seating Configuration&quot;}&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-muted-foreground text-sm&quot;&gt;&#10;                        {currentSession.isOnline&#10;                            ? &quot;Set the capacity and ticket tier for your online event.&quot;&#10;                            : &quot;Choose a layout template or create a new one, then assign your tiers.&quot;}&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div className=&quot;border rounded-md p-6 bg-card&quot;&gt;&#10;                    {currentSession.isOnline ? (&#10;                        &lt;OnlineConfigView onSave={handleSave} /&gt;&#10;                    ) : (&#10;                        &lt;PhysicalConfigView onSave={handleSave} /&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex items-center border-t pt-4 mt-8&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;Checkbox&#10;                            id=&quot;apply-to-all-seating&quot;&#10;                            checked={applyToAll}&#10;                            onCheckedChange={(checked) =&gt; setApplyToAll(checked === true)}&#10;                        /&gt;&#10;                        &lt;Label htmlFor=&quot;apply-to-all-seating&quot;&gt;&#10;                            Apply to all {currentSession.isOnline ? 'online' : 'physical'} sessions&#10;                        &lt;/Label&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    // Otherwise show the session list&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;div&gt;&#10;                &lt;h2 className=&quot;text-xl font-semibold mb-1&quot;&gt;Seating &amp; Tier Assignment&lt;/h2&gt;&#10;                &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                    Configure the seating layout and assign ticket tiers for each session.&#10;                &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;                {fields.map((field, index) =&gt; (&#10;                    &lt;SessionListItemSeating&#10;                        key={field.id}&#10;                        field={field}&#10;                        index={index}&#10;                        onConfigure={() =&gt; setConfiguringIndex(index)}&#10;                    /&gt;&#10;                ))}&#10;&#10;                {errors.sessions?.root &amp;&amp; (&#10;                    &lt;p className=&quot;text-sm font-medium text-destructive&quot;&gt;{errors.sessions.root.message}&lt;/p&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/TierAssignmentEditor.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/TierAssignmentEditor.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {useFormContext} from 'react-hook-form';&#10;import {Block, CreateEventFormData} from '@/lib/validators/event';&#10;import {SessionSeatingMapRequest, Row, Seat} from '@/lib/validators/event';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {TierPalette} from './TierPalette';&#10;import {InteractiveDraggableBlock, InteractiveResizableBlock} from './InteractiveBlocks';&#10;import {toast} from 'sonner';&#10;&#10;import {getRowLabel} from &quot;@/app/manage/organization/[organization_id]/seating/create/_lib/getRowLabel&quot;;&#10;import {LayoutData} from &quot;@/types/seatingLayout&quot;;&#10;&#10;interface TierAssignmentEditorProps {&#10;    initialLayout: LayoutData;&#10;    onSave: (layout: SessionSeatingMapRequest) =&gt; void;&#10;}&#10;&#10;export function TierAssignmentEditor({initialLayout, onSave}: TierAssignmentEditorProps) {&#10;    const {watch} = useFormContext&lt;CreateEventFormData&gt;();&#10;    const tiers = watch('tiers');&#10;    const [layoutData, setLayoutData] = useState&lt;SessionSeatingMapRequest | null&gt;(null);&#10;    const [selectedTierId, setSelectedTierId] = useState&lt;string | null&gt;(tiers[0]?.id || null);&#10;&#10;    // âœ… This effect performs the crucial transformation from a structural template to a full seating map.&#10;    useEffect(() =&gt; {&#10;        const transformedBlocks = initialLayout.layout.blocks.map((block) =&gt; {&#10;            const newBlock: Block = {&#10;                ...block,&#10;                rows: [],&#10;                seats: [],&#10;            };&#10;&#10;            if (block.type === 'seated_grid' &amp;&amp; block.rows &amp;&amp; block.columns) {&#10;                const startRowIndex = block.startRowLabel ? block.startRowLabel.charCodeAt(0) - 'A'.charCodeAt(0) : 0;&#10;                const startCol = block.startColumnLabel || 1;&#10;                const numRows = block.rows;&#10;                const numColumns = block.columns;&#10;&#10;                newBlock.rows = Array.from({length: numRows}, (_, rowIndex) =&gt; {&#10;                    const newRow: Row = {&#10;                        id: `temp_row_${block.id}_${rowIndex}`,&#10;                        label: `${getRowLabel(startRowIndex + rowIndex)}`,&#10;                        seats: Array.from({length: numColumns}, (_, colIndex) =&gt; ({&#10;                            id: `temp_seat_${block.id}_${rowIndex}_${colIndex}`,&#10;                            label: `${startCol + colIndex}${getRowLabel(startRowIndex + rowIndex)}`,&#10;                            status: 'AVAILABLE',&#10;                        })),&#10;                    };&#10;                    return newRow;&#10;                });&#10;            } else if (block.type === 'standing_capacity' &amp;&amp; block.capacity) {&#10;                const capacity = block.capacity;&#10;                newBlock.seats = Array.from({length: capacity}, (_, i) =&gt; ({&#10;                    id: `temp_seat_${block.id}_${i}`,&#10;                    label: `Slot ${i + 1}`,&#10;                    status: 'AVAILABLE',&#10;                }));&#10;            }&#10;            return newBlock;&#10;        });&#10;&#10;        setLayoutData({&#10;            name: initialLayout.name,&#10;            layout: {&#10;                blocks: transformedBlocks,&#10;            },&#10;        });&#10;    }, [initialLayout]);&#10;&#10;&#10;    const handleSeatClick = (blockId: string, rowId: string, seatId: string) =&gt; {&#10;        if (!layoutData) return;&#10;        setLayoutData(prevLayout =&gt; {&#10;            // Deep copy to avoid state mutation issues&#10;            const newLayout = JSON.parse(JSON.stringify(prevLayout));&#10;            const block = newLayout.layout.blocks.find((b: Block) =&gt; b.id === blockId);&#10;            if (block?.rows) {&#10;                const row = block.rows.find((r: Row) =&gt; r.id === rowId);&#10;                if (row?.seats) {&#10;                    const seat = row.seats.find((s: Seat) =&gt; s.id === seatId);&#10;                    if (seat) {&#10;                        if (selectedTierId === 'RESERVED') {&#10;                            seat.status = seat.status === 'RESERVED' ? 'AVAILABLE' : 'RESERVED';&#10;                            seat.tierId = undefined;&#10;                        } else {&#10;                            seat.tierId = seat.tierId === selectedTierId ? undefined : selectedTierId;&#10;                            seat.status = 'AVAILABLE';&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            return newLayout;&#10;        });&#10;    };&#10;&#10;    const handleBlockClick = (blockId: string) =&gt; {&#10;        if (!layoutData) return;&#10;        setLayoutData(prevLayout =&gt; {&#10;            const newLayout = JSON.parse(JSON.stringify(prevLayout));&#10;            const block = newLayout.layout.blocks.find((b: Block) =&gt; b.id === blockId);&#10;            if (block) {&#10;                if (selectedTierId === 'RESERVED') {&#10;                    toast.warning(&quot;You cannot reserve an entire standing block. To make it unavailable, please edit the layout and change its type to 'non-sellable'.&quot;);&#10;                    return prevLayout;&#10;                }&#10;                if (block.seats) {&#10;                    block.seats.forEach((seat: Seat) =&gt; {&#10;                        seat.tierId = selectedTierId ?? undefined;&#10;                    });&#10;                }&#10;            }&#10;            return newLayout;&#10;        });&#10;    };&#10;&#10;    if (!layoutData) {&#10;        return &lt;div&gt;Loading layout...&lt;/div&gt;; // Or a skeleton loader&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;flex h-[70vh] border rounded-lg&quot;&gt;&#10;            &lt;main className=&quot;flex-1 relative bg-muted/20 overflow-auto&quot;&gt;&#10;                &lt;div className=&quot;relative w-full h-full p-4&quot;&gt;&#10;                    {layoutData.layout.blocks.map(block =&gt; {&#10;                        if (block.type === 'seated_grid') {&#10;                            return &lt;InteractiveDraggableBlock key={block.id} block={block} tiers={tiers}&#10;                                                              onSeatClick={handleSeatClick}/&gt;;&#10;                        }&#10;                        if (block.type === 'standing_capacity') {&#10;                            return &lt;InteractiveResizableBlock key={block.id} block={block} tiers={tiers}&#10;                                                              onClick={handleBlockClick}/&gt;;&#10;                        }&#10;                        return (&#10;                            &lt;div key={block.id} style={{&#10;                                left: block.position.x,&#10;                                top: block.position.y,&#10;                                width: block.width,&#10;                                height: block.height&#10;                            }}&#10;                                 className=&quot;absolute p-2 bg-muted border rounded-lg flex items-center justify-center&quot;&gt;&#10;                                &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{block.name}&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        );&#10;                    })}&#10;                &lt;/div&gt;&#10;            &lt;/main&gt;&#10;            &lt;TierPalette tiers={tiers} selectedTierId={selectedTierId} onSelectTier={setSelectedTierId}/&gt;&#10;            &lt;div className=&quot;absolute bottom-4 left-4 z-10&quot;&gt;&#10;                &lt;Button onClick={() =&gt; onSave(layoutData)}&gt;Confirm Tier Assignments&lt;/Button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {useFormContext} from 'react-hook-form';&#10;import {Block, CreateEventFormData} from '@/lib/validators/event';&#10;import {SessionSeatingMapRequest, Row, Seat} from '@/lib/validators/event';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {TierPalette} from './TierPalette';&#10;import {InteractiveDraggableBlock, InteractiveResizableBlock} from './InteractiveBlocks';&#10;import {toast} from 'sonner';&#10;&#10;import {getRowLabel} from &quot;@/app/manage/organization/[organization_id]/seating/create/_lib/getRowLabel&quot;;&#10;import {LayoutData} from &quot;@/types/seatingLayout&quot;;&#10;&#10;interface TierAssignmentEditorProps {&#10;    initialLayout: LayoutData;&#10;    onSave: (layout: SessionSeatingMapRequest) =&gt; void;&#10;}&#10;&#10;export function TierAssignmentEditor({initialLayout, onSave}: TierAssignmentEditorProps) {&#10;    const {watch} = useFormContext&lt;CreateEventFormData&gt;();&#10;    const tiers = watch('tiers');&#10;    const [layoutData, setLayoutData] = useState&lt;SessionSeatingMapRequest | null&gt;(null);&#10;    const [selectedTierId, setSelectedTierId] = useState&lt;string | null&gt;(tiers[0]?.id || null);&#10;&#10;    // âœ… This effect performs the crucial transformation from a structural template to a full seating map.&#10;    useEffect(() =&gt; {&#10;        const transformedBlocks = initialLayout.layout.blocks.map((block) =&gt; {&#10;            const newBlock: Block = {&#10;                ...block,&#10;                rows: [],&#10;                seats: [],&#10;            };&#10;&#10;            if (block.type === 'seated_grid' &amp;&amp; block.rows &amp;&amp; block.columns) {&#10;                const startRowIndex = block.startRowLabel ? block.startRowLabel.charCodeAt(0) - 'A'.charCodeAt(0) : 0;&#10;                const startCol = block.startColumnLabel || 1;&#10;                const numRows = block.rows;&#10;                const numColumns = block.columns;&#10;&#10;                newBlock.rows = Array.from({length: numRows}, (_, rowIndex) =&gt; {&#10;                    const newRow: Row = {&#10;                        id: `temp_row_${block.id}_${rowIndex}`,&#10;                        label: `${getRowLabel(startRowIndex + rowIndex)}`,&#10;                        seats: Array.from({length: numColumns}, (_, colIndex) =&gt; ({&#10;                            id: `temp_seat_${block.id}_${rowIndex}_${colIndex}`,&#10;                            label: `${startCol + colIndex}${getRowLabel(startRowIndex + rowIndex)}`,&#10;                            status: 'AVAILABLE',&#10;                        })),&#10;                    };&#10;                    return newRow;&#10;                });&#10;            } else if (block.type === 'standing_capacity' &amp;&amp; block.capacity) {&#10;                const capacity = block.capacity;&#10;                newBlock.seats = Array.from({length: capacity}, (_, i) =&gt; ({&#10;                    id: `temp_seat_${block.id}_${i}`,&#10;                    label: `Slot ${i + 1}`,&#10;                    status: 'AVAILABLE',&#10;                }));&#10;            }&#10;            return newBlock;&#10;        });&#10;&#10;        setLayoutData({&#10;            name: initialLayout.name,&#10;            layout: {&#10;                blocks: transformedBlocks,&#10;            },&#10;        });&#10;    }, [initialLayout]);&#10;&#10;&#10;    const handleSeatClick = (blockId: string, rowId: string, seatId: string) =&gt; {&#10;        if (!layoutData) return;&#10;        setLayoutData(prevLayout =&gt; {&#10;            // Deep copy to avoid state mutation issues&#10;            const newLayout = JSON.parse(JSON.stringify(prevLayout));&#10;            const block = newLayout.layout.blocks.find((b: Block) =&gt; b.id === blockId);&#10;            if (block?.rows) {&#10;                const row = block.rows.find((r: Row) =&gt; r.id === rowId);&#10;                if (row?.seats) {&#10;                    const seat = row.seats.find((s: Seat) =&gt; s.id === seatId);&#10;                    if (seat) {&#10;                        if (selectedTierId === 'RESERVED') {&#10;                            seat.status = seat.status === 'RESERVED' ? 'AVAILABLE' : 'RESERVED';&#10;                            seat.tierId = undefined;&#10;                        } else {&#10;                            seat.tierId = seat.tierId === selectedTierId ? undefined : selectedTierId;&#10;                            seat.status = 'AVAILABLE';&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            return newLayout;&#10;        });&#10;    };&#10;&#10;    const handleBlockClick = (blockId: string) =&gt; {&#10;        if (!layoutData) return;&#10;        setLayoutData(prevLayout =&gt; {&#10;            const newLayout = JSON.parse(JSON.stringify(prevLayout));&#10;            const block = newLayout.layout.blocks.find((b: Block) =&gt; b.id === blockId);&#10;            if (block) {&#10;                if (selectedTierId === 'RESERVED') {&#10;                    toast.warning(&quot;You cannot reserve an entire standing block. To make it unavailable, please edit the layout and change its type to 'non-sellable'.&quot;);&#10;                    return prevLayout;&#10;                }&#10;                if (block.seats) {&#10;                    block.seats.forEach((seat: Seat) =&gt; {&#10;                        seat.tierId = selectedTierId ?? undefined;&#10;                    });&#10;                }&#10;            }&#10;            return newLayout;&#10;        });&#10;    };&#10;&#10;    // New function to apply selected tier to all seats in a seated block&#10;    const handleApplyToAllSeats = (blockId: string) =&gt; {&#10;        if (!layoutData) return;&#10;        &#10;        setLayoutData(prevLayout =&gt; {&#10;            const newLayout = JSON.parse(JSON.stringify(prevLayout));&#10;            const block = newLayout.layout.blocks.find((b: Block) =&gt; b.id === blockId);&#10;            &#10;            if (block?.rows) {&#10;                // Handle 'RESERVED' status specially&#10;                if (selectedTierId === 'RESERVED') {&#10;                    for (const row of block.rows) {&#10;                        for (const seat of row.seats) {&#10;                            seat.status = 'RESERVED';&#10;                            seat.tierId = undefined;&#10;                        }&#10;                    }&#10;                    toast.success(`All seats in ${block.name} have been reserved`);&#10;                } else {&#10;                    // Apply the selected tier to all seats&#10;                    for (const row of block.rows) {&#10;                        for (const seat of row.seats) {&#10;                            if (seat.status !== 'RESERVED') {&#10;                                seat.tierId = selectedTierId;&#10;                                seat.status = 'AVAILABLE';&#10;                            }&#10;                        }&#10;                    }&#10;                    const tierName = tiers.find(t =&gt; t.id === selectedTierId)?.name;&#10;                    toast.success(`Applied ${tierName || 'selected tier'} to all available seats in ${block.name}`);&#10;                }&#10;            }&#10;            &#10;            return newLayout;&#10;        });&#10;    };&#10;&#10;    if (!layoutData) {&#10;        return &lt;div&gt;Loading layout...&lt;/div&gt;; // Or a skeleton loader&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;flex h-[70vh] border rounded-lg&quot;&gt;&#10;            &lt;main className=&quot;flex-1 relative bg-muted/20 overflow-auto&quot;&gt;&#10;                &lt;div className=&quot;relative w-full h-full p-4&quot;&gt;&#10;                    {layoutData.layout.blocks.map(block =&gt; {&#10;                        if (block.type === 'seated_grid') {&#10;                            return &lt;InteractiveDraggableBlock &#10;                                key={block.id} &#10;                                block={block} &#10;                                tiers={tiers}&#10;                                onSeatClick={handleSeatClick} &#10;                                onApplyToAllSeats={handleApplyToAllSeats} &#10;                            /&gt;;&#10;                        }&#10;                        if (block.type === 'standing_capacity') {&#10;                            return &lt;InteractiveResizableBlock key={block.id} block={block} tiers={tiers}&#10;                                                              onClick={handleBlockClick}/&gt;;&#10;                        }&#10;                        return (&#10;                            &lt;div key={block.id} style={{&#10;                                left: block.position.x,&#10;                                top: block.position.y,&#10;                                width: block.width,&#10;                                height: block.height&#10;                            }}&#10;                                 className=&quot;absolute p-2 bg-muted border rounded-lg flex items-center justify-center&quot;&gt;&#10;                                &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{block.name}&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        );&#10;                    })}&#10;                &lt;/div&gt;&#10;            &lt;/main&gt;&#10;            &lt;TierPalette tiers={tiers} selectedTierId={selectedTierId} onSelectTier={setSelectedTierId}/&gt;&#10;            &lt;div className=&quot;absolute bottom-4 left-4 z-10&quot;&gt;&#10;                &lt;Button onClick={() =&gt; onSave(layoutData)}&gt;Confirm Tier Assignments&lt;/Button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/coreDetailsStep.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/coreDetailsStep.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useForm, FormProvider} from 'react-hook-form';&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {useOrganization} from '@/providers/OrganizationProvider';&#10;import {useLimits} from '@/providers/LimitProvider';&#10;import {CategoryResponse} from '@/types/category';&#10;import {getAllCategories} from '@/lib/actions/categoryActions';&#10;import {coreDetailsSchema, CoreDetailsData} from '@/lib/validators/event';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Textarea} from '@/components/ui/textarea';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;import {&#10;    Select,&#10;    SelectContent,&#10;    SelectItem,&#10;    SelectTrigger,&#10;    SelectValue,&#10;    SelectGroup,&#10;    SelectLabel&#10;} from '@/components/ui/select';&#10;import {Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious} from &quot;@/components/ui/carousel&quot;;&#10;import Image from 'next/image';&#10;import {ImageIcon, X, PlusCircle, Upload} from 'lucide-react';&#10;import {toast} from 'sonner';&#10;import Autoplay from 'embla-carousel-autoplay';&#10;&#10;// --- Step 1: Core Details Component ---&#10;export function CoreDetailsStep({onNextAction}: { onNextAction: () =&gt; void }) {&#10;    const {organization} = useOrganization();&#10;    const {myLimits} = useLimits();&#10;    const [categories, setCategories] = useState&lt;CategoryResponse[]&gt;([]);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    const maxPhotos = myLimits?.eventLimits.maxCoverPhotos || 1;&#10;&#10;    const form = useForm&lt;CoreDetailsData&gt;({&#10;        resolver: zodResolver(coreDetailsSchema),&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            categoryId: '', // Ensure categoryId is present&#10;            isOnline: false,&#10;        },&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        getAllCategories().then(setCategories);&#10;    }, [organization]);&#10;&#10;    const handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        if (e.target.files) {&#10;            const files = Array.from(e.target.files);&#10;            if ((coverFiles.length + files.length) &gt; maxPhotos) {&#10;                toast.error(`You can only upload a maximum of ${maxPhotos} photos.`);&#10;                return;&#10;            }&#10;            setCoverFiles(prev =&gt; [...prev, ...files]);&#10;        }&#10;    };&#10;&#10;    const removeImage = (index: number) =&gt; {&#10;        setCoverFiles(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    };&#10;&#10;    function onSubmit(data: CoreDetailsData) {&#10;        console.log(&quot;Step 1 Data:&quot;, data);&#10;        console.log(&quot;Cover Files:&quot;, coverFiles);&#10;        onNextAction();&#10;    }&#10;&#10;    return (&#10;        &lt;FormProvider {...form}&gt;&#10;            &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt;&#10;                {/* Hero Cover Photos Section */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Cover Photos&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;This is the first thing people will see. Upload up&#10;                            to {maxPhotos} images.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                        {coverFiles.length &gt; 0 ? (&#10;                            &lt;Carousel plugins={[Autoplay({delay: 4000, stopOnInteraction: false})]}&gt;&#10;                                &lt;CarouselContent&gt;&#10;                                    {coverFiles.map((file, index) =&gt; (&#10;                                        &lt;CarouselItem key={index} className=&quot;relative&quot;&gt;&#10;                                            &lt;div className=&quot;aspect-[21/9] w-full relative&quot;&gt;&#10;                                                &lt;Image src={URL.createObjectURL(file)} alt={`Cover photo ${index + 1}`}&#10;                                                       fill className=&quot;object-cover rounded-lg&quot;/&gt;&#10;                                                &lt;Button type=&quot;button&quot; variant=&quot;destructive&quot; size=&quot;icon&quot;&#10;                                                        className=&quot;absolute top-4 right-4 h-8 w-8 z-10&quot;&#10;                                                        onClick={() =&gt; removeImage(index)}&gt;&lt;X&#10;                                                    className=&quot;h-4 w-4&quot;/&gt;&lt;/Button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/CarouselItem&gt;&#10;                                    ))}&#10;                                &lt;/CarouselContent&gt;&#10;                                &lt;CarouselPrevious type=&quot;button&quot;&#10;                                                  className=&quot;absolute left-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                                &lt;CarouselNext type=&quot;button&quot;&#10;                                              className=&quot;absolute right-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                            &lt;/Carousel&gt;&#10;                        ) : (&#10;                            &lt;div&#10;                                className=&quot;flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-12 text-center aspect-[21/9] w-full&quot;&gt;&#10;                                &lt;ImageIcon className=&quot;h-16 w-16 text-muted-foreground&quot;/&gt;&#10;                                &lt;p className=&quot;mt-4 text-lg font-medium&quot;&gt;Add cover photos for your event&lt;/p&gt;&#10;                                &lt;Button type=&quot;button&quot; className=&quot;mt-4&quot;&#10;                                        onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;Upload className=&quot;mr-2 h-4 w-4&quot;/&gt;Upload&#10;                                    Images&lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                        &lt;div className=&quot;mt-4 flex justify-center items-center gap-4&quot;&gt;&#10;                            {coverFiles.length &gt; 0 &amp;&amp; (&lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&#10;                                                               onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;PlusCircle&#10;                                className=&quot;mr-2 h-4 w-4&quot;/&gt;Add More&lt;/Button&gt;)}&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{coverFiles.length} of {maxPhotos} photos&#10;                                selected.&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;Input id=&quot;picture&quot; type=&quot;file&quot; multiple accept=&quot;image/*&quot; onChange={handleFileChange}&#10;                               className=&quot;hidden&quot; ref={fileInputRef}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                {/* Event Details Card with Category dropdown */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Event Details&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;Provide the core information about your event.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                        &lt;FormField control={form.control} name=&quot;title&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Event Title&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                placeholder=&quot;e.g., Annual Tech Conference 2025&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;&#10;                        {/* Category Selector as dropdown */}&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;categoryId&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Category&lt;/FormLabel&gt;&#10;                                    &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#10;                                        &lt;FormControl&gt;&#10;                                            &lt;SelectTrigger&gt;&#10;                                                &lt;SelectValue placeholder=&quot;Select a category for your event&quot;/&gt;&#10;                                            &lt;/SelectTrigger&gt;&#10;                                        &lt;/FormControl&gt;&#10;                                        &lt;SelectContent className=&quot;max-h-100&quot;&gt;&#10;                                            {categories.map((parentCat) =&gt; (&#10;                                                &lt;SelectGroup key={parentCat.id}&gt;&#10;                                                    &lt;SelectLabel&gt;{parentCat.name}&lt;/SelectLabel&gt;&#10;                                                    {parentCat.subCategories.map((subCat) =&gt; (&#10;                                                        &lt;SelectItem key={subCat.id} value={subCat.id}&gt;&#10;                                                            {subCat.name}&#10;                                                        &lt;/SelectItem&gt;&#10;                                                    ))}&#10;                                                &lt;/SelectGroup&gt;&#10;                                            ))}&#10;                                        &lt;/SelectContent&gt;&#10;                                    &lt;/Select&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;FormField control={form.control} name=&quot;description&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Short Description&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;A brief summary of your event.&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                        &lt;FormField control={form.control} name=&quot;overview&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Overview&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;Provide more details like schedule, speakers, etc.&quot;&#10;                                className=&quot;min-h-32&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;                &lt;div className=&quot;flex justify-end mt-8&quot;&gt;&#10;                    &lt;Button type=&quot;submit&quot;&gt;Next: Tiers &amp; Pricing&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/form&gt;&#10;        &lt;/FormProvider&gt;&#10;    )&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useForm, FormProvider} from 'react-hook-form';&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {useOrganization} from '@/providers/OrganizationProvider';&#10;import {useLimits} from '@/providers/LimitProvider';&#10;import {CategoryResponse} from '@/types/category';&#10;import {getAllCategories} from '@/lib/actions/categoryActions';&#10;import {coreDetailsSchema, CoreDetailsData} from '@/lib/validators/event';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Textarea} from '@/components/ui/textarea';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;import {&#10;    Select,&#10;    SelectContent,&#10;    SelectItem,&#10;    SelectTrigger,&#10;    SelectValue,&#10;    SelectGroup,&#10;    SelectLabel&#10;} from '@/components/ui/select';&#10;import {Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious} from &quot;@/components/ui/carousel&quot;;&#10;import Image from 'next/image';&#10;import {ImageIcon, X, PlusCircle, Upload} from 'lucide-react';&#10;import {toast} from 'sonner';&#10;import Autoplay from 'embla-carousel-autoplay';&#10;&#10;// Updated props interface to match the required signature&#10;interface CoreDetailsStepProps {&#10;    coverFiles: File[];&#10;    setCoverFilesAction: React.Dispatch&lt;React.SetStateAction&lt;File[]&gt;&gt;;&#10;    onNextAction?: () =&gt; void;&#10;}&#10;&#10;// --- Step 1: Core Details Component ---&#10;export function CoreDetailsStep({ coverFiles, setCoverFilesAction, onNextAction }: CoreDetailsStepProps) {&#10;    const {organization} = useOrganization();&#10;    const {myLimits} = useLimits();&#10;    const [categories, setCategories] = useState&lt;CategoryResponse[]&gt;([]);&#10;    const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    const maxPhotos = myLimits?.eventLimits.maxCoverPhotos || 1;&#10;&#10;    const form = useForm&lt;CoreDetailsData&gt;({&#10;        resolver: zodResolver(coreDetailsSchema),&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            categoryId: '', // Ensure categoryId is present&#10;            isOnline: false,&#10;        },&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        getAllCategories().then(setCategories);&#10;    }, [organization]);&#10;&#10;    const handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        if (e.target.files) {&#10;            const files = Array.from(e.target.files);&#10;            if ((coverFiles.length + files.length) &gt; maxPhotos) {&#10;                toast.error(`You can only upload a maximum of ${maxPhotos} photos.`);&#10;                return;&#10;            }&#10;            setCoverFilesAction(prev =&gt; [...prev, ...files]);&#10;        }&#10;    };&#10;&#10;    const removeImage = (index: number) =&gt; {&#10;        setCoverFilesAction(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    };&#10;&#10;    function onSubmit(data: CoreDetailsData) {&#10;        console.log(&quot;Step 1 Data:&quot;, data);&#10;        console.log(&quot;Cover Files:&quot;, coverFiles);&#10;        if (onNextAction) onNextAction();&#10;    }&#10;&#10;    return (&#10;        &lt;FormProvider {...form}&gt;&#10;            &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt;&#10;                {/* Hero Cover Photos Section */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Cover Photos&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;This is the first thing people will see. Upload up&#10;                            to {maxPhotos} images.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                        {coverFiles.length &gt; 0 ? (&#10;                            &lt;Carousel plugins={[Autoplay({delay: 4000, stopOnInteraction: false})]}&gt;&#10;                                &lt;CarouselContent&gt;&#10;                                    {coverFiles.map((file, index) =&gt; (&#10;                                        &lt;CarouselItem key={index} className=&quot;relative&quot;&gt;&#10;                                            &lt;div className=&quot;aspect-[21/9] w-full relative&quot;&gt;&#10;                                                &lt;Image src={URL.createObjectURL(file)} alt={`Cover photo ${index + 1}`}&#10;                                                       fill className=&quot;object-cover rounded-lg&quot;/&gt;&#10;                                                &lt;Button type=&quot;button&quot; variant=&quot;destructive&quot; size=&quot;icon&quot;&#10;                                                        className=&quot;absolute top-4 right-4 h-8 w-8 z-10&quot;&#10;                                                        onClick={() =&gt; removeImage(index)}&gt;&lt;X&#10;                                                    className=&quot;h-4 w-4&quot;/&gt;&lt;/Button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/CarouselItem&gt;&#10;                                    ))}&#10;                                &lt;/CarouselContent&gt;&#10;                                &lt;CarouselPrevious type=&quot;button&quot;&#10;                                                  className=&quot;absolute left-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                                &lt;CarouselNext type=&quot;button&quot;&#10;                                              className=&quot;absolute right-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                            &lt;/Carousel&gt;&#10;                        ) : (&#10;                            &lt;div&#10;                                className=&quot;flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-12 text-center aspect-[21/9] w-full&quot;&gt;&#10;                                &lt;ImageIcon className=&quot;h-16 w-16 text-muted-foreground&quot;/&gt;&#10;                                &lt;p className=&quot;mt-4 text-lg font-medium&quot;&gt;Add cover photos for your event&lt;/p&gt;&#10;                                &lt;Button type=&quot;button&quot; className=&quot;mt-4&quot;&#10;                                        onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;Upload className=&quot;mr-2 h-4 w-4&quot;/&gt;Upload&#10;                                    Images&lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                        &lt;div className=&quot;mt-4 flex justify-center items-center gap-4&quot;&gt;&#10;                            {coverFiles.length &gt; 0 &amp;&amp; (&lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&#10;                                                               onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;PlusCircle&#10;                                className=&quot;mr-2 h-4 w-4&quot;/&gt;Add More&lt;/Button&gt;)}&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{coverFiles.length} of {maxPhotos} photos&#10;                                selected.&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;Input id=&quot;picture&quot; type=&quot;file&quot; multiple accept=&quot;image/*&quot; onChange={handleFileChange}&#10;                               className=&quot;hidden&quot; ref={fileInputRef}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                {/* Event Details Card with Category dropdown */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Event Details&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;Provide the core information about your event.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                        &lt;FormField control={form.control} name=&quot;title&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Event Title&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                placeholder=&quot;e.g., Annual Tech Conference 2025&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;&#10;                        {/* Category Selector as dropdown */}&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;categoryId&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Category&lt;/FormLabel&gt;&#10;                                    &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#10;                                        &lt;FormControl&gt;&#10;                                            &lt;SelectTrigger&gt;&#10;                                                &lt;SelectValue placeholder=&quot;Select a category for your event&quot;/&gt;&#10;                                            &lt;/SelectTrigger&gt;&#10;                                        &lt;/FormControl&gt;&#10;                                        &lt;SelectContent className=&quot;max-h-100&quot;&gt;&#10;                                            {categories.map((parentCat) =&gt; (&#10;                                                &lt;SelectGroup key={parentCat.id}&gt;&#10;                                                    &lt;SelectLabel&gt;{parentCat.name}&lt;/SelectLabel&gt;&#10;                                                    {parentCat.subCategories.map((subCat) =&gt; (&#10;                                                        &lt;SelectItem key={subCat.id} value={subCat.id}&gt;&#10;                                                            {subCat.name}&#10;                                                        &lt;/SelectItem&gt;&#10;                                                    ))}&#10;                                                &lt;/SelectGroup&gt;&#10;                                            ))}&#10;                                        &lt;/SelectContent&gt;&#10;                                    &lt;/Select&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;FormField control={form.control} name=&quot;description&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Short Description&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;A brief summary of your event.&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                        &lt;FormField control={form.control} name=&quot;overview&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Overview&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;Provide more details like schedule, speakers, etc.&quot;&#10;                                className=&quot;min-h-32&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;                &lt;div className=&quot;flex justify-end mt-8&quot;&gt;&#10;                    &lt;Button type=&quot;submit&quot;&gt;Next: Tiers &amp; Pricing&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/form&gt;&#10;        &lt;/FormProvider&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {CoreDetailsStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/CoreDetailsStep&quot;;&#10;import {Progress} from &quot;@/components/ui/progress&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {FormProvider, useForm} from &quot;react-hook-form&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {TiersStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/TierStep&quot;;&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {CreateEventFormData, createEventSchema, stepValidationFields} from '@/lib/validators/event';&#10;import {SchedulingStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/SchedulingStep&quot;;&#10;import {SeatingStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/SeratingStep&quot;;&#10;import {useOrganization} from &quot;@/providers/OrganizationProvider&quot;;&#10;&#10;&#10;export default function CreateEventPage() {&#10;    const [step, setStep] = useState(1);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const {&#10;        organization: activeOrganization,&#10;    } = useOrganization();&#10;    const totalSteps = 5;&#10;&#10;    const methods = useForm&lt;CreateEventFormData&gt;({&#10;        resolver: zodResolver(createEventSchema),&#10;        mode: 'onChange', // Enable real-time validation&#10;        defaultValues: {&#10;            title: 'An Example Event',&#10;            description: 'This is a sample event description.',&#10;            overview: 'An overview of the event goes here.',&#10;            organizationId: activeOrganization?.id || '', // This might be undefined initially&#10;            categoryId: '',&#10;            tiers: [],&#10;            sessions: [],&#10;        },&#10;    });&#10;&#10;    // Update organizationId when activeOrganization becomes available&#10;    useEffect(() =&gt; {&#10;        if (activeOrganization?.id) {&#10;            methods.setValue('organizationId', activeOrganization.id);&#10;        }&#10;    }, [activeOrganization, methods]);&#10;&#10;    const onNext = async () =&gt; {&#10;        const fieldsToValidate = stepValidationFields[step as keyof typeof stepValidationFields];&#10;        const isValid = await methods.trigger(fieldsToValidate);&#10;        console.log(methods.watch());&#10;&#10;        if (isValid) {&#10;            setStep(s =&gt; Math.min(totalSteps, s + 1));&#10;        } else {&#10;            // react-hook-form will automatically show errors next to the invalid fields.&#10;            // A toast is good for a general notification.&#10;            console.error(&quot;Validation failed for step&quot;, step);&#10;            toast.error(&quot;Please fix the errors before proceeding.&quot;);&#10;        }&#10;    };&#10;&#10;    const onPrev = () =&gt; setStep(s =&gt; Math.max(1, s - 1));&#10;&#10;    const onSubmit = (data: CreateEventFormData) =&gt; {&#10;        console.log(&quot;Final Assembled Form Data:&quot;, data);&#10;        console.log(&quot;Final Cover Files:&quot;, coverFiles);&#10;        // Here you would call your createEvent API action&#10;        toast.success(&quot;Event submitted for approval!&quot;);&#10;    };&#10;&#10;&#10;    const renderStep = () =&gt; {&#10;        switch (step) {&#10;            case 1:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;            case 2:&#10;                return &lt;TiersStep/&gt;;&#10;            // Add cases for other steps here&#10;            case 3:&#10;                return &lt;SchedulingStep/&gt;&#10;            case 4:&#10;                return &lt;SeatingStep/&gt;;&#10;            default:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;        }&#10;    };&#10;&#10;    // Helper function to check if current step has errors&#10;    const hasStepErrors = () =&gt; {&#10;        const fieldsToCheck = stepValidationFields[step as keyof typeof stepValidationFields];&#10;        if (!fieldsToCheck) return false;&#10;&#10;        return fieldsToCheck.some(field =&gt; methods.formState.errors[field]);&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;p-4 md:p-8&quot;&gt;&#10;            &lt;div className=&quot;mb-8&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;h1 className=&quot;text-2xl font-bold&quot;&gt;Create New Event&lt;/h1&gt;&#10;                        &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Step {step} of {totalSteps}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    {hasStepErrors() &amp;&amp; (&#10;                        &lt;div className=&quot;text-sm text-destructive&quot;&gt;&#10;                            Please fix validation errors&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;Progress value={(step / totalSteps) * 100} className=&quot;mt-2&quot;/&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;FormProvider {...methods}&gt;&#10;                &lt;form onSubmit={methods.handleSubmit(onSubmit)}&gt;&#10;                    {renderStep()}&#10;&#10;                    &lt;div className=&quot;flex justify-between mt-8&quot;&gt;&#10;                        &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; onClick={onPrev} disabled={step === 1}&gt;&#10;                            Previous&#10;                        &lt;/Button&gt;&#10;                        {step &lt; totalSteps ? (&#10;                            &lt;Button&#10;                                type=&quot;button&quot;&#10;                                onClick={onNext}&#10;                                disabled={methods.formState.isSubmitting}&#10;                            &gt;&#10;                                {methods.formState.isSubmitting ? 'Validating...' : 'Next'}&#10;                            &lt;/Button&gt;&#10;                        ) : (&#10;                            &lt;Button&#10;                                type=&quot;submit&quot;&#10;                                disabled={methods.formState.isSubmitting}&#10;                            &gt;&#10;                                {methods.formState.isSubmitting ? 'Submitting...' : 'Submit for Approval'}&#10;                            &lt;/Button&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/form&gt;&#10;            &lt;/FormProvider&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {CoreDetailsStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/CoreDetailsStep&quot;;&#10;import {Progress} from &quot;@/components/ui/progress&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {FormProvider, useForm} from &quot;react-hook-form&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {TiersStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/TierStep&quot;;&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {CreateEventFormData, createEventSchema, stepValidationFields} from '@/lib/validators/event';&#10;import {SchedulingStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/SchedulingStep&quot;;&#10;import {SeatingStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/SeratingStep&quot;;&#10;import {useOrganization} from &quot;@/providers/OrganizationProvider&quot;;&#10;&#10;&#10;export default function CreateEventPage() {&#10;    const [step, setStep] = useState(1);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const [inConfigMode, setInConfigMode] = useState(false);&#10;    const {&#10;        organization: activeOrganization,&#10;    } = useOrganization();&#10;    const totalSteps = 5;&#10;&#10;    const methods = useForm&lt;CreateEventFormData&gt;({&#10;        resolver: zodResolver(createEventSchema),&#10;        mode: 'onChange', // Enable real-time validation&#10;        defaultValues: {&#10;            title: 'An Example Event',&#10;            description: 'This is a sample event description.',&#10;            overview: 'An overview of the event goes here.',&#10;            organizationId: activeOrganization?.id || '', // This might be undefined initially&#10;            categoryId: '',&#10;            tiers: [],&#10;            sessions: [],&#10;        },&#10;    });&#10;&#10;    // Update organizationId when activeOrganization becomes available&#10;    useEffect(() =&gt; {&#10;        if (activeOrganization?.id) {&#10;            methods.setValue('organizationId', activeOrganization.id);&#10;        }&#10;    }, [activeOrganization, methods]);&#10;&#10;    const onNext = async () =&gt; {&#10;        const fieldsToValidate = stepValidationFields[step as keyof typeof stepValidationFields];&#10;        const isValid = await methods.trigger(fieldsToValidate);&#10;        console.log(methods.watch());&#10;&#10;        if (isValid) {&#10;            setStep(s =&gt; Math.min(totalSteps, s + 1));&#10;        } else {&#10;            // react-hook-form will automatically show errors next to the invalid fields.&#10;            // A toast is good for a general notification.&#10;            console.error(&quot;Validation failed for step&quot;, step);&#10;            toast.error(&quot;Please fix the errors before proceeding.&quot;);&#10;        }&#10;    };&#10;&#10;    const onPrev = () =&gt; setStep(s =&gt; Math.max(1, s - 1));&#10;&#10;    const onSubmit = (data: CreateEventFormData) =&gt; {&#10;        console.log(&quot;Final Assembled Form Data:&quot;, data);&#10;        console.log(&quot;Final Cover Files:&quot;, coverFiles);&#10;        // Here you would call your createEvent API action&#10;        toast.success(&quot;Event submitted for approval!&quot;);&#10;    };&#10;&#10;&#10;    const renderStep = () =&gt; {&#10;        switch (step) {&#10;            case 1:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;            case 2:&#10;                return &lt;TiersStep/&gt;;&#10;            // Add cases for other steps here&#10;            case 3:&#10;                return &lt;SchedulingStep/&gt;&#10;            case 4:&#10;                return &lt;SeatingStep onConfigModeChange={setInConfigMode} /&gt;;&#10;            default:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;        }&#10;    };&#10;&#10;    // Helper function to check if current step has errors&#10;    const hasStepErrors = () =&gt; {&#10;        const fieldsToCheck = stepValidationFields[step as keyof typeof stepValidationFields];&#10;        if (!fieldsToCheck) return false;&#10;&#10;        return fieldsToCheck.some(field =&gt; methods.formState.errors[field]);&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;p-4 md:p-8&quot;&gt;&#10;            &lt;div className=&quot;mb-8&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;h1 className=&quot;text-2xl font-bold&quot;&gt;Create New Event&lt;/h1&gt;&#10;                        &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Step {step} of {totalSteps}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    {hasStepErrors() &amp;&amp; (&#10;                        &lt;div className=&quot;text-sm text-destructive&quot;&gt;&#10;                            Please fix validation errors&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;Progress value={(step / totalSteps) * 100} className=&quot;mt-2&quot;/&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;FormProvider {...methods}&gt;&#10;                &lt;form onSubmit={methods.handleSubmit(onSubmit)}&gt;&#10;                    {renderStep()}&#10;&#10;                    {/* Hide the Next/Previous buttons when in configuration mode */}&#10;                    {!inConfigMode &amp;&amp; (&#10;                        &lt;div className=&quot;flex justify-between mt-8&quot;&gt;&#10;                            &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; onClick={onPrev} disabled={step === 1}&gt;&#10;                                Previous&#10;                            &lt;/Button&gt;&#10;                            {step &lt; totalSteps ? (&#10;                                &lt;Button&#10;                                    type=&quot;button&quot;&#10;                                    onClick={onNext}&#10;                                    disabled={methods.formState.isSubmitting}&#10;                                &gt;&#10;                                    {methods.formState.isSubmitting ? 'Validating...' : 'Next'}&#10;                                &lt;/Button&gt;&#10;                            ) : (&#10;                                &lt;Button&#10;                                    type=&quot;submit&quot;&#10;                                    disabled={methods.formState.isSubmitting}&#10;                                &gt;&#10;                                    {methods.formState.isSubmitting ? 'Submitting...' : 'Submit for Approval'}&#10;                                &lt;/Button&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/form&gt;&#10;            &lt;/FormProvider&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx.new">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx.new" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useEffect, useState} from 'react';&#10;import {CoreDetailsStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/CoreDetailsStep&quot;;&#10;import {Progress} from &quot;@/components/ui/progress&quot;;&#10;import {CreateEventRequest} from &quot;@/types/event&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {FormProvider, useForm} from &quot;react-hook-form&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {TiersStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/TierStep&quot;;&#10;import {zodResolver} from &quot;@hookform/resolvers/zod&quot;;&#10;import {coreDetailsSchema, tiersSchema} from &quot;@/lib/validators/event&quot;;&#10;import {WizardSidebar} from &quot;../_components/WizardSideBar&quot;;&#10;import {useSidebar} from &quot;@/components/ui/sidebar&quot;;&#10;&#10;// --- Main Wizard Parent Component ---&#10;export default function CreateEventPage() {&#10;    const [step, setStep] = useState(1);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const totalSteps = 5;&#10;    const {setOpen} = useSidebar();&#10;    &#10;    const steps = [&#10;        {number: 1, title: &quot;Core Details&quot;, description: &quot;Name, category, and location&quot;},&#10;        {number: 2, title: &quot;Tiers &amp; Pricing&quot;, description: &quot;Set your ticket prices&quot;},&#10;        {number: 3, title: &quot;Scheduling&quot;, description: &quot;Add dates and times&quot;},&#10;        {number: 4, title: &quot;Seating&quot;, description: &quot;Configure seating maps&quot;},&#10;        {number: 5, title: &quot;Review &amp; Publish&quot;, description: &quot;Final check before submission&quot;},&#10;    ];&#10;&#10;    // Collapse the main sidebar when component mounts&#10;    useEffect(() =&gt; {&#10;        setOpen(false);&#10;    }, [setOpen]);&#10;&#10;    // âœ… The single form instance for the entire wizard is created here.&#10;    const methods = useForm&lt;CreateEventRequest&gt;({&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            organizationId: '', // Should be set from context/params&#10;            categoryId: '',&#10;            isOnline: false,&#10;            tiers: [],&#10;            sessions: [],&#10;        },&#10;        mode: 'onSubmit', // Only validate when explicitly triggered&#10;    });&#10;&#10;    // Update the validation schema based on the current step&#10;    useEffect(() =&gt; {&#10;        if (step === 1) {&#10;            methods.clearErrors();&#10;        } else if (step === 2) {&#10;            methods.clearErrors();&#10;        }&#10;    }, [step, methods]);&#10;&#10;    const validateCoreDetails = async () =&gt; {&#10;        try {&#10;            // Check for cover photos&#10;            if (coverFiles.length === 0) {&#10;                toast.error(&quot;Please upload at least one cover photo.&quot;);&#10;                return false;&#10;            }&#10;            &#10;            // Get form values for core details&#10;            const values = methods.getValues();&#10;            const coreData = {&#10;                title: values.title,&#10;                description: values.description || &quot;&quot;,&#10;                overview: values.overview || &quot;&quot;,&#10;                categoryId: values.categoryId || &quot;&quot;,&#10;                isOnline: values.isOnline || false,&#10;                venueId: values.venueId,&#10;                onlineLink: values.onlineLink,&#10;                locationDescription: values.locationDescription,&#10;            };&#10;            &#10;            // Validate with Zod schema&#10;            const result = coreDetailsSchema.safeParse(coreData);&#10;            &#10;            if (!result.success) {&#10;                // Show validation errors&#10;                result.error.errors.forEach(err =&gt; {&#10;                    toast.error(`${err.path.join('.')}: ${err.message}`);&#10;                });&#10;                &#10;                // Also set form errors for field highlighting&#10;                result.error.errors.forEach(err =&gt; {&#10;                    const path = err.path.join('.') as keyof CreateEventRequest;&#10;                    methods.setError(path, { &#10;                        type: 'manual', &#10;                        message: err.message &#10;                    });&#10;                });&#10;                &#10;                return false;&#10;            }&#10;            &#10;            return true;&#10;        } catch (error: any) {&#10;            console.error(&quot;Validation error:&quot;, error);&#10;            toast.error(&quot;Please check all required fields&quot;);&#10;            return false;&#10;        }&#10;    };&#10;&#10;    const validateTiers = async () =&gt; {&#10;        try {&#10;            // Get tiers data&#10;            const values = methods.getValues();&#10;            const tiersData = { tiers: values.tiers || [] };&#10;            &#10;            // Validate with Zod schema&#10;            const result = tiersSchema.safeParse(tiersData);&#10;            &#10;            if (!result.success) {&#10;                // Show validation errors&#10;                result.error.errors.forEach(err =&gt; {&#10;                    toast.error(`${err.message}`);&#10;                });&#10;                return false;&#10;            }&#10;            &#10;            return true;&#10;        } catch (error: any) {&#10;            console.error(&quot;Tier validation error:&quot;, error);&#10;            toast.error(&quot;Please add at least one tier with valid information&quot;);&#10;            return false;&#10;        }&#10;    };&#10;&#10;    const onNext = async () =&gt; {&#10;        let isValid = false;&#10;        &#10;        if (step === 1) {&#10;            isValid = await validateCoreDetails();&#10;        } else if (step === 2) {&#10;            isValid = await validateTiers();&#10;        } else {&#10;            // For future steps that don't have validation yet&#10;            isValid = true;&#10;        }&#10;&#10;        if (isValid) {&#10;            setStep(s =&gt; Math.min(totalSteps, s + 1));&#10;        }&#10;    };&#10;&#10;    const onPrev = () =&gt; setStep(s =&gt; Math.max(1, s - 1));&#10;&#10;    const onSubmit = async (data: CreateEventRequest) =&gt; {&#10;        // Perform final validation before submission&#10;        let isValid = true;&#10;        &#10;        // Validate the current step first&#10;        if (step === 1) {&#10;            isValid = await validateCoreDetails();&#10;        } else if (step === 2) {&#10;            isValid = await validateTiers();&#10;        }&#10;        &#10;        if (isValid) {&#10;            console.log(&quot;Final Assembled Form Data:&quot;, data);&#10;            console.log(&quot;Final Cover Files:&quot;, coverFiles);&#10;            // Here you would call your createEvent API action&#10;            toast.success(&quot;Event submitted for approval!&quot;);&#10;        }&#10;    };&#10;&#10;    const renderStep = () =&gt; {&#10;        switch (step) {&#10;            case 1:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;            case 2:&#10;                return &lt;TiersStep/&gt;;&#10;            // Add cases for other steps here&#10;            default:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;flex min-h-screen bg-muted/40&quot;&gt;&#10;            &lt;WizardSidebar currentStep={step} steps={steps}/&gt;&#10;            &lt;main className=&quot;flex-1 p-4 md:p-8 overflow-y-auto ml-72&quot;&gt;&#10;                &lt;div className=&quot;max-w-4xl mx-auto&quot;&gt;&#10;                    &lt;div className=&quot;mb-8&quot;&gt;&#10;                        &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Step {step} of {totalSteps}&lt;/p&gt;&#10;                        &lt;Progress value={(step / totalSteps) * 100} className=&quot;mt-2&quot;/&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* âœ… The FormProvider broadcasts the form state to all children */}&#10;                    &lt;FormProvider {...methods}&gt;&#10;                        &lt;form onSubmit={methods.handleSubmit(onSubmit)}&gt;&#10;                            {renderStep()}&#10;&#10;                            &lt;div className=&quot;flex justify-between mt-8&quot;&gt;&#10;                                &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; onClick={onPrev} disabled={step === 1}&gt;&#10;                                    Previous&#10;                                &lt;/Button&gt;&#10;                                {step &lt; totalSteps ? (&#10;                                    &lt;Button type=&quot;button&quot; onClick={onNext}&gt;&#10;                                        Next&#10;                                    &lt;/Button&gt;&#10;                                ) : (&#10;                                    &lt;Button type=&quot;submit&quot;&gt;&#10;                                        Submit for Approval&#10;                                    &lt;/Button&gt;&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        &lt;/form&gt;&#10;                    &lt;/FormProvider&gt;&#10;                &lt;/div&gt;&#10;            &lt;/main&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/providers/LimitProvider.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/providers/LimitProvider.ts" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, {createContext, useContext, useState, useEffect, ReactNode, useMemo} from 'react';&#10;import {useAuth} from '@/providers/AuthProvider';&#10;import {getAppConfiguration} from '@/lib/actions/configActions';&#10;import {AppConfig, TierLimitDetails, TierName} from '@/types/config';&#10;&#10;// Define the shape of the context&#10;interface LimitContextType {&#10;    config: AppConfig | null;&#10;    isLoading: boolean;&#10;    error: string | null;&#10;    currentUserTier: TierName;&#10;    currentUserTierLimits: TierLimitDetails | null;&#10;    getLimitsForTier: (tier: TierName) =&gt; TierLimitDetails | null;&#10;}&#10;&#10;const LimitContext = createContext&lt;LimitContextType | undefined&gt;(undefined);&#10;&#10;export const LimitProvider = ({children}: { children: ReactNode }) =&gt; {&#10;    const {keycloak} = useAuth();&#10;    const [config, setConfig] = useState&lt;AppConfig | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    // Fetch the entire configuration on initial application load&#10;    useEffect(() =&gt; {&#10;        const fetchConfig = async () =&gt; {&#10;            try {&#10;                const appConfig = await getAppConfiguration();&#10;                setConfig(appConfig);&#10;            } catch (err) {&#10;                setError('Failed to load application configuration. Some features may be unavailable.');&#10;                console.error(err);&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;        fetchConfig();&#10;    }, []);&#10;&#10;    // A memoized helper to get the current user's highest tier from their JWT&#10;    const currentUserTier = useMemo((): TierName =&gt; {&#10;        if (!keycloak?.tokenParsed?.user_groups || !Array.isArray(keycloak.tokenParsed.user_groups)) return 'FREE';&#10;&#10;        const userGroups: string[] = keycloak.tokenParsed.user_groups;&#10;        let highestTier: TierName = 'FREE';&#10;        let maxLevel = 0;&#10;&#10;        const tierLevels: Record&lt;TierName, number&gt; = {FREE: 0, PRO: 1, ENTERPRISE: 2};&#10;&#10;        userGroups.forEach(group =&gt; {&#10;            if (group.startsWith('/Tiers/')) {&#10;                const tierName = group.substring('/Tiers/'.length).toUpperCase() as TierName;&#10;                if (tierLevels[tierName] !== undefined &amp;&amp; tierLevels[tierName] &gt; maxLevel) {&#10;                    maxLevel = tierLevels[tierName];&#10;                    highestTier = tierName;&#10;                }&#10;            }&#10;        });&#10;        return highestTier;&#10;    }, [keycloak]);&#10;&#10;    // A memoized value for the current user's specific limits, derived from the full config&#10;    const currentUserTierLimits = useMemo(() =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[currentUserTier] || config.tierLimits.FREE;&#10;    }, [config, currentUserTier]);&#10;&#10;    // A function to get limits for any specified tier (useful for upgrade pages)&#10;    const getLimitsForTier = (tier: TierName): TierLimitDetails | null =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[tier] || null;&#10;    };&#10;&#10;    const value = {config, isLoading, error, currentUserTier, currentUserTierLimits, getLimitsForTier};&#10;&#10;    return (&#10;        &lt;LimitContext.Provider value={value}&gt;&#10;            {children}&#10;        &lt;/LimitContext.Provider&gt;&#10;    );&#10;};&#10;&#10;// The custom hook to easily access the limits from any component&#10;export const useLimits = (): LimitContextType =&gt; {&#10;    const context = useContext(LimitContext);&#10;    if (context === undefined) {&#10;        throw new Error('useLimits must be used within a LimitProvider');&#10;    }&#10;    return context;&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, {createContext, useContext, useState, useEffect, ReactNode, useMemo} from 'react';&#10;import {useAuth} from '@/providers/AuthProvider';&#10;import {getAppConfiguration} from '@/lib/actions/configActions';&#10;import {AppConfig, TierLimitDetails, TierName} from '@/types/config';&#10;&#10;// Define the shape of the context&#10;interface LimitContextType {&#10;    config: AppConfig | null;&#10;    isLoading: boolean;&#10;    error: string | null;&#10;    currentUserTier: TierName;&#10;    currentUserTierLimits: TierLimitDetails | null;&#10;    getLimitsForTier: (tier: TierName) =&gt; TierLimitDetails | null;&#10;}&#10;&#10;const LimitContext = createContext&lt;LimitContextType | undefined&gt;(undefined);&#10;&#10;export const LimitProvider = ({children}: { children: ReactNode }) =&gt; {&#10;    const {keycloak} = useAuth();&#10;    const [config, setConfig] = useState&lt;AppConfig | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    // Fetch the entire configuration on initial application load&#10;    useEffect(() =&gt; {&#10;        const fetchConfig = async () =&gt; {&#10;            try {&#10;                const appConfig = await getAppConfiguration();&#10;                setConfig(appConfig);&#10;            } catch (err) {&#10;                setError('Failed to load application configuration. Some features may be unavailable.');&#10;                console.error(err);&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;        fetchConfig();&#10;    }, []);&#10;&#10;    // A memoized helper to get the current user's highest tier from their JWT&#10;    const currentUserTier = useMemo((): TierName =&gt; {&#10;        if (!keycloak?.tokenParsed?.user_groups || !Array.isArray(keycloak.tokenParsed.user_groups)) return 'FREE';&#10;&#10;        const userGroups: string[] = keycloak.tokenParsed.user_groups;&#10;        let highestTier: TierName = 'FREE';&#10;        let maxLevel = 0;&#10;&#10;        const tierLevels: Record&lt;TierName, number&gt; = {FREE: 0, PRO: 1, ENTERPRISE: 2};&#10;&#10;        userGroups.forEach(group =&gt; {&#10;            if (group.startsWith('/Tiers/')) {&#10;                const tierName = group.substring('/Tiers/'.length).toUpperCase() as TierName;&#10;                if (tierLevels[tierName] !== undefined &amp;&amp; tierLevels[tierName] &gt; maxLevel) {&#10;                    maxLevel = tierLevels[tierName];&#10;                    highestTier = tierName;&#10;                }&#10;            }&#10;        });&#10;        return highestTier;&#10;    }, [keycloak]);&#10;&#10;    // A memoized value for the current user's specific limits, derived from the full config&#10;    const currentUserTierLimits = useMemo(() =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[currentUserTier] || config.tierLimits.FREE;&#10;    }, [config, currentUserTier]);&#10;&#10;    // A function to get limits for any specified tier (useful for upgrade pages)&#10;    const getLimitsForTier = (tier: TierName): TierLimitDetails | null =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[tier] || null;&#10;    };&#10;&#10;    const value = {config, isLoading, error, currentUserTier, currentUserTierLimits, getLimitsForTier};&#10;&#10;    return React.createElement(&#10;        LimitContext.Provider,&#10;        { value },&#10;        children&#10;    );&#10;};&#10;&#10;// The custom hook to easily access the limits from any component&#10;export const useLimits = (): LimitContextType =&gt; {&#10;    const context = useContext(LimitContext);&#10;    if (context === undefined) {&#10;        throw new Error('useLimits must be used within a LimitProvider');&#10;    }&#10;    return context;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>