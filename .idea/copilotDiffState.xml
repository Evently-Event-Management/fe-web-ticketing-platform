<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/LocationConfigDialog.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/LocationConfigDialog.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useFormContext} from 'react-hook-form';&#10;import {CreateEventFormData} from '@/lib/validators/event';&#10;import {toast} from 'sonner';&#10;import {GoogleMap, useJsApiLoader, Marker} from '@react-google-maps/api';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Label} from '@/components/ui/label';&#10;import {Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter} from '@/components/ui/dialog';&#10;import {Tabs, TabsContent, TabsList, TabsTrigger} from '@/components/ui/tabs';&#10;import {FormField, FormItem, FormLabel, FormControl, FormMessage} from '@/components/ui/form';&#10;import {Checkbox} from '@/components/ui/checkbox';&#10;import {Skeleton} from '@/components/ui/skeleton';&#10;&#10;const MAP_CONTAINER_STYLE = {&#10;    width: '100%',&#10;    height: '100%',&#10;    borderRadius: 'var(--radius)',&#10;};&#10;&#10;// Default center for the map (Colombo, Sri Lanka)&#10;const DEFAULT_MAP_CENTER = {&#10;    lat: 6.9271,&#10;    lng: 79.8612,&#10;};&#10;&#10;const LIBRARIES: (&quot;places&quot;)[] = ['places'];&#10;&#10;export function LocationConfigDialog({index, open, setOpenAction}: {&#10;    index: number;&#10;    open: boolean;&#10;    setOpenAction: (open: boolean) =&gt; void&#10;}) {&#10;    const {control, watch, getValues, setValue} = useFormContext&lt;CreateEventFormData&gt;();&#10;    const isOnline = watch(`sessions.${index}.isOnline`);&#10;    const venueDetails = watch(`sessions.${index}.venueDetails`);&#10;&#10;    const [applyToAll, setApplyToAll] = useState(false);&#10;    const [markerPosition, setMarkerPosition] = useState(&#10;        venueDetails?.latitude &amp;&amp; venueDetails?.longitude&#10;            ? {lat: venueDetails.latitude, lng: venueDetails.longitude}&#10;            : DEFAULT_MAP_CENTER&#10;    );&#10;    const autocompleteRef = useRef&lt;google.maps.places.Autocomplete | null&gt;(null);&#10;    const autocompleteInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    const {isLoaded} = useJsApiLoader({&#10;        id: 'google-map-script',&#10;        googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY!,&#10;        libraries: LIBRARIES,&#10;    });&#10;&#10;    // Configure Google Places Autocomplete after loading&#10;    useEffect(() =&gt; {&#10;        if (isLoaded &amp;&amp; autocompleteRef.current &amp;&amp; autocompleteInputRef.current) {&#10;            // Ensure autocomplete suggestions appear above the dialog&#10;            const pacContainers = document.querySelectorAll('.pac-container');&#10;            pacContainers.forEach(container =&gt; {&#10;                (container as HTMLElement).style.zIndex = '9999';&#10;            });&#10;        }&#10;    }, [isLoaded]);&#10;    useEffect(() =&gt; {&#10;        if (venueDetails?.latitude &amp;&amp; venueDetails?.longitude) {&#10;            setMarkerPosition({lat: venueDetails.latitude, lng: venueDetails.longitude});&#10;        }&#10;    }, [venueDetails]);&#10;&#10;    const handleMapClick = (event: google.maps.MapMouseEvent) =&gt; {&#10;        if (event.latLng) {&#10;            const newPos = {lat: event.latLng.lat(), lng: event.latLng.lng()};&#10;            setMarkerPosition(newPos);&#10;            setValue(`sessions.${index}.venueDetails.latitude`, newPos.lat, {shouldValidate: true});&#10;            setValue(`sessions.${index}.venueDetails.longitude`, newPos.lng, {shouldValidate: true});&#10;        }&#10;    };&#10;&#10;    // const onAutocompleteLoad = (autocomplete: google.maps.places.Autocomplete) =&gt; {&#10;    //     autocompleteRef.current = autocomplete;&#10;    // };&#10;    //&#10;    // const onPlaceChanged = () =&gt; {&#10;    //     console.log('Place changed:', autocompleteRef.current?.getPlace());&#10;    //     if (autocompleteRef.current) {&#10;    //         const place = autocompleteRef.current.getPlace();&#10;    //         if (place.geometry?.location) {&#10;    //             const newPos = {&#10;    //                 lat: place.geometry.location.lat(),&#10;    //                 lng: place.geometry.location.lng(),&#10;    //             };&#10;    //             setMarkerPosition(newPos);&#10;    //             setValue(`sessions.${index}.venueDetails.name`, place.name || '', {shouldValidate: true});&#10;    //             setValue(`sessions.${index}.venueDetails.address`, place.formatted_address || '', {shouldValidate: true});&#10;    //             setValue(`sessions.${index}.venueDetails.latitude`, newPos.lat, {shouldValidate: true});&#10;    //             setValue(`sessions.${index}.venueDetails.longitude`, newPos.lng, {shouldValidate: true});&#10;    //         }&#10;    //     }&#10;    // };&#10;&#10;    const handleSave = () =&gt; {&#10;        if (applyToAll) {&#10;            const currentSessionData = getValues(`sessions.${index}`);&#10;            const allSessions = getValues('sessions');&#10;            allSessions.forEach((_, i) =&gt; {&#10;                setValue(`sessions.${i}.isOnline`, currentSessionData.isOnline);&#10;                setValue(`sessions.${i}.onlineLink`, currentSessionData.onlineLink);&#10;                setValue(`sessions.${i}.venueDetails`, currentSessionData.venueDetails);&#10;            });&#10;            toast.success(&quot;Location details applied to all sessions.&quot;);&#10;        }&#10;        setOpenAction(false);&#10;    };&#10;&#10;    return (&#10;        &lt;Dialog open={open} onOpenChange={setOpenAction}&gt;&#10;            {/* ✅ Restructured Dialog for better overflow handling */}&#10;            &lt;DialogContent className=&quot;sm:max-w-6xl p-0 grid grid-rows-[auto_1fr_auto] max-h-[90vh]&quot;&gt;&#10;                &lt;DialogHeader className=&quot;p-6 pb-4 border-b&quot;&gt;&#10;                    &lt;DialogTitle&gt;Configure Location for Session {index + 1}&lt;/DialogTitle&gt;&#10;                &lt;/DialogHeader&gt;&#10;&#10;                {/* ✅ Main content area is now scrollable */}&#10;                &lt;div className=&quot;overflow-y-auto&quot;&gt;&#10;                    &lt;Tabs defaultValue={isOnline ? &quot;online&quot; : &quot;physical&quot;} className=&quot;w-full&quot;&gt;&#10;                        &lt;TabsList className=&quot;mx-6 mt-4&quot;&gt;&#10;                            &lt;TabsTrigger value=&quot;physical&quot;&#10;                                         onClick={() =&gt; setValue(`sessions.${index}.isOnline`, false)}&gt;Physical&lt;/TabsTrigger&gt;&#10;                            &lt;TabsTrigger value=&quot;online&quot;&#10;                                         onClick={() =&gt; setValue(`sessions.${index}.isOnline`, true)}&gt;Online&lt;/TabsTrigger&gt;&#10;                        &lt;/TabsList&gt;&#10;                        &lt;TabsContent value=&quot;physical&quot; className={'px-4 py-0'}&gt;&#10;                            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2&quot;&gt;&#10;                                {/* Left Side - Form Fields */}&#10;                                &lt;div className=&quot;space-y-4 p-6&quot;&gt;&#10;                                    &lt;FormField control={control} name={`sessions.${index}.venueDetails.name`}&#10;                                               render={({field}) =&gt; (&#10;                                                   &lt;FormItem&gt;&lt;FormLabel&gt;Venue Name&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                                       placeholder=&quot;e.g., Grand Hall&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                                    &lt;FormField control={control} name={`sessions.${index}.venueDetails.address`}&#10;                                               render={({field}) =&gt; (&#10;                                                   &lt;FormItem&gt;&lt;FormLabel&gt;Address&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                                       placeholder=&quot;Street, City&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                                    &lt;div className=&quot;text-sm text-muted-foreground pt-4&quot;&gt;&#10;                                        &lt;p&gt;Use the map to locate the venue precisely. You can:&lt;/p&gt;&#10;                                        &lt;ul className=&quot;list-disc pl-5 mt-2 space-y-1&quot;&gt;&#10;                                            &lt;li&gt;Search for a venue using the search box.&lt;/li&gt;&#10;                                            &lt;li&gt;Click on the map to place a marker.&lt;/li&gt;&#10;                                            &lt;li&gt;Drag the marker to fine-tune the location.&lt;/li&gt;&#10;                                        &lt;/ul&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Right Side - Map */}&#10;                                &lt;div className=&quot;flex flex-col md:h-full gap-4&quot;&gt;&#10;                                    {isLoaded ? (&#10;                                        &lt;&gt;&#10;                                            {/*&#10;                                              * Autocomplete functionality temporarily disabled&#10;                                              * TODO: Fix this to properly handle clickable suggestions&#10;                                              */}&#10;                                            {/*&#10;                                            &lt;Autocomplete&#10;                                                onLoad={onAutocompleteLoad}&#10;                                                className={'!z-10'}&#10;                                                onPlaceChanged={() =&gt; {&#10;                                                    console.log('Place changed');&#10;                                                }}&#10;                                            &gt;&#10;                                                &lt;Input&#10;                                                    type=&quot;text&quot;&#10;                                                    placeholder=&quot;Search for a location...&quot;&#10;                                                    className=&quot;w-full shadow-md&quot;&#10;                                                /&gt;&#10;                                            &lt;/Autocomplete&gt;&#10;                                            */}&#10;&#10;                                            {/* Simple input field while autocomplete is disabled */}&#10;                                            &lt;Input&#10;                                                type=&quot;text&quot;&#10;                                                placeholder=&quot;Search functionality coming soon...&quot;&#10;                                                className=&quot;w-full shadow-md opacity-70&quot;&#10;                                                disabled&#10;                                            /&gt;&#10;&#10;                                            &lt;GoogleMap mapContainerStyle={MAP_CONTAINER_STYLE} center={markerPosition}&#10;                                                       zoom={15} onClick={handleMapClick}&gt;&#10;                                                &lt;Marker&#10;                                                    position={markerPosition}&#10;                                                    draggable={true}&#10;                                                    onDragEnd={(e) =&gt; {&#10;                                                        if (e.latLng) {&#10;                                                            const newPos = {lat: e.latLng.lat(), lng: e.latLng.lng()};&#10;                                                            setMarkerPosition(newPos);&#10;                                                            setValue(`sessions.${index}.venueDetails.latitude`, newPos.lat, {shouldValidate: true});&#10;                                                            setValue(`sessions.${index}.venueDetails.longitude`, newPos.lng, {shouldValidate: true});&#10;                                                        }&#10;                                                    }}&#10;                                                /&gt;&#10;                                            &lt;/GoogleMap&gt;&#10;                                        &lt;/&gt;&#10;                                    ) : &lt;Skeleton className=&quot;h-full w-full&quot;/&gt;}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/TabsContent&gt;&#10;                        &lt;TabsContent value=&quot;online&quot; className=&quot;p-6&quot;&gt;&#10;                            &lt;FormField control={control} name={`sessions.${index}.onlineLink`} render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&lt;FormLabel&gt;Online Link&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                    placeholder=&quot;https://zoom.us/...&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                        &lt;/TabsContent&gt;&#10;                    &lt;/Tabs&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;DialogFooter className=&quot;justify-between p-6 border-t&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;Checkbox id=&quot;apply-to-all&quot; checked={applyToAll}&#10;                                  onCheckedChange={(checked) =&gt; setApplyToAll(checked === true)}/&gt;&#10;                        &lt;Label htmlFor=&quot;apply-to-all&quot;&gt;Apply to all sessions&lt;/Label&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Button type=&quot;button&quot; onClick={handleSave}&gt;Save Location&lt;/Button&gt;&#10;                &lt;/DialogFooter&gt;&#10;            &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useFormContext} from 'react-hook-form';&#10;import {CreateEventFormData} from '@/lib/validators/event';&#10;import {toast} from 'sonner';&#10;import {GoogleMap, useJsApiLoader, Marker} from '@react-google-maps/api';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Label} from '@/components/ui/label';&#10;import {Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter} from '@/components/ui/dialog';&#10;import {Tabs, TabsContent, TabsList, TabsTrigger} from '@/components/ui/tabs';&#10;import {FormField, FormItem, FormLabel, FormControl, FormMessage} from '@/components/ui/form';&#10;import {Checkbox} from '@/components/ui/checkbox';&#10;import {Skeleton} from '@/components/ui/skeleton';&#10;&#10;const MAP_CONTAINER_STYLE = {&#10;    width: '100%',&#10;    height: '100%',&#10;    borderRadius: 'var(--radius)',&#10;};&#10;&#10;// Default center for the map (Colombo, Sri Lanka)&#10;const DEFAULT_MAP_CENTER = {&#10;    lat: 6.9271,&#10;    lng: 79.8612,&#10;};&#10;&#10;const LIBRARIES: (&quot;places&quot;)[] = ['places'];&#10;&#10;export function LocationConfigDialog({index, open, setOpenAction}: {&#10;    index: number;&#10;    open: boolean;&#10;    setOpenAction: (open: boolean) =&gt; void&#10;}) {&#10;    const {control, watch, getValues, setValue} = useFormContext&lt;CreateEventFormData&gt;();&#10;    const isOnline = watch(`sessions.${index}.isOnline`);&#10;    const venueDetails = watch(`sessions.${index}.venueDetails`);&#10;&#10;    const [applyToAll, setApplyToAll] = useState(false);&#10;    const [markerPosition, setMarkerPosition] = useState&lt;google.maps.LatLngLiteral&gt;(&#10;        venueDetails?.latitude &amp;&amp; venueDetails?.longitude&#10;            ? {lat: venueDetails.latitude, lng: venueDetails.longitude}&#10;            : DEFAULT_MAP_CENTER&#10;    );&#10;    const autocompleteRef = useRef&lt;google.maps.places.Autocomplete | null&gt;(null);&#10;    const autocompleteInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    const {isLoaded} = useJsApiLoader({&#10;        id: 'google-map-script',&#10;        googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY!,&#10;        libraries: LIBRARIES,&#10;    });&#10;&#10;    // Configure Google Places Autocomplete after loading&#10;    useEffect(() =&gt; {&#10;        if (isLoaded &amp;&amp; autocompleteRef.current &amp;&amp; autocompleteInputRef.current) {&#10;            // Ensure autocomplete suggestions appear above the dialog&#10;            const pacContainers = document.querySelectorAll('.pac-container');&#10;            pacContainers.forEach(container =&gt; {&#10;                (container as HTMLElement).style.zIndex = '9999';&#10;            });&#10;        }&#10;    }, [isLoaded]);&#10;    useEffect(() =&gt; {&#10;        if (venueDetails?.latitude &amp;&amp; venueDetails?.longitude) {&#10;            setMarkerPosition({lat: venueDetails.latitude, lng: venueDetails.longitude});&#10;        }&#10;    }, [venueDetails]);&#10;&#10;    const handleMapClick = (event: google.maps.MapMouseEvent) =&gt; {&#10;        if (event.latLng) {&#10;            const newPos = {lat: event.latLng.lat(), lng: event.latLng.lng()};&#10;            setMarkerPosition(newPos);&#10;&#10;            // Initialize venueDetails object if it doesn't exist&#10;            if (!venueDetails) {&#10;                setValue(`sessions.${index}.venueDetails`, {&#10;                    name: '',&#10;                    address: '',&#10;                    latitude: newPos.lat,&#10;                    longitude: newPos.lng&#10;                }, {shouldValidate: true});&#10;            } else {&#10;                setValue(`sessions.${index}.venueDetails.latitude`, newPos.lat, {shouldValidate: true});&#10;                setValue(`sessions.${index}.venueDetails.longitude`, newPos.lng, {shouldValidate: true});&#10;            }&#10;        }&#10;    };&#10;&#10;    // const onAutocompleteLoad = (autocomplete: google.maps.places.Autocomplete) =&gt; {&#10;    //     autocompleteRef.current = autocomplete;&#10;    // };&#10;    //&#10;    // const onPlaceChanged = () =&gt; {&#10;    //     console.log('Place changed:', autocompleteRef.current?.getPlace());&#10;    //     if (autocompleteRef.current) {&#10;    //         const place = autocompleteRef.current.getPlace();&#10;    //         if (place.geometry?.location) {&#10;    //             const newPos = {&#10;    //                 lat: place.geometry.location.lat(),&#10;    //                 lng: place.geometry.location.lng(),&#10;    //             };&#10;    //             setMarkerPosition(newPos);&#10;    //             setValue(`sessions.${index}.venueDetails.name`, place.name || '', {shouldValidate: true});&#10;    //             setValue(`sessions.${index}.venueDetails.address`, place.formatted_address || '', {shouldValidate: true});&#10;    //             setValue(`sessions.${index}.venueDetails.latitude`, newPos.lat, {shouldValidate: true});&#10;    //             setValue(`sessions.${index}.venueDetails.longitude`, newPos.lng, {shouldValidate: true});&#10;    //         }&#10;    //     }&#10;    // };&#10;&#10;    const handleSave = () =&gt; {&#10;        if (applyToAll) {&#10;            const currentSessionData = getValues(`sessions.${index}`);&#10;            const allSessions = getValues('sessions');&#10;            allSessions.forEach((_, i) =&gt; {&#10;                setValue(`sessions.${i}.isOnline`, currentSessionData.isOnline);&#10;                setValue(`sessions.${i}.onlineLink`, currentSessionData.onlineLink);&#10;                setValue(`sessions.${i}.venueDetails`, currentSessionData.venueDetails);&#10;            });&#10;            toast.success(&quot;Location details applied to all sessions.&quot;);&#10;        }&#10;        setOpenAction(false);&#10;    };&#10;&#10;    return (&#10;        &lt;Dialog open={open} onOpenChange={setOpenAction}&gt;&#10;            {/* ✅ Restructured Dialog for better overflow handling */}&#10;            &lt;DialogContent className=&quot;sm:max-w-6xl p-0 grid grid-rows-[auto_1fr_auto] max-h-[90vh]&quot;&gt;&#10;                &lt;DialogHeader className=&quot;p-6 pb-4 border-b&quot;&gt;&#10;                    &lt;DialogTitle&gt;Configure Location for Session {index + 1}&lt;/DialogTitle&gt;&#10;                &lt;/DialogHeader&gt;&#10;&#10;                {/* ✅ Main content area is now scrollable */}&#10;                &lt;div className=&quot;overflow-y-auto&quot;&gt;&#10;                    &lt;Tabs defaultValue={isOnline ? &quot;online&quot; : &quot;physical&quot;} className=&quot;w-full&quot;&gt;&#10;                        &lt;TabsList className=&quot;mx-6 mt-4&quot;&gt;&#10;                            &lt;TabsTrigger value=&quot;physical&quot;&#10;                                         onClick={() =&gt; {&#10;                                             setValue(`sessions.${index}.isOnline`, false);&#10;                                             // Initialize venueDetails if it doesn't exist&#10;                                             if (!venueDetails) {&#10;                                                 setValue(`sessions.${index}.venueDetails`, {&#10;                                                     name: '',&#10;                                                     address: '',&#10;                                                     latitude: DEFAULT_MAP_CENTER.lat,&#10;                                                     longitude: DEFAULT_MAP_CENTER.lng&#10;                                                 }, {shouldValidate: true});&#10;                                             }&#10;                                         }}&gt;Physical&lt;/TabsTrigger&gt;&#10;                            &lt;TabsTrigger value=&quot;online&quot;&#10;                                         onClick={() =&gt; {&#10;                                             setValue(`sessions.${index}.isOnline`, true);&#10;                                             // Ensure onlineLink is initialized&#10;                                             if (!getValues(`sessions.${index}.onlineLink`)) {&#10;                                                 setValue(`sessions.${index}.onlineLink`, '', {shouldValidate: true});&#10;                                             }&#10;                                         }}&gt;Online&lt;/TabsTrigger&gt;&#10;                        &lt;/TabsList&gt;&#10;                        &lt;TabsContent value=&quot;physical&quot; className={'px-4 py-0'}&gt;&#10;                            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2&quot;&gt;&#10;                                {/* Left Side - Form Fields */}&#10;                                &lt;div className=&quot;space-y-4 p-6&quot;&gt;&#10;                                    &lt;FormField control={control} name={`sessions.${index}.venueDetails.name`}&#10;                                               render={({field}) =&gt; (&#10;                                                   &lt;FormItem&gt;&lt;FormLabel&gt;Venue Name&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                                       placeholder=&quot;e.g., Grand Hall&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                                    &lt;FormField control={control} name={`sessions.${index}.venueDetails.address`}&#10;                                               render={({field}) =&gt; (&#10;                                                   &lt;FormItem&gt;&lt;FormLabel&gt;Address&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                                       placeholder=&quot;Street, City&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                                    &lt;div className=&quot;text-sm text-muted-foreground pt-4&quot;&gt;&#10;                                        &lt;p&gt;Use the map to locate the venue precisely. You can:&lt;/p&gt;&#10;                                        &lt;ul className=&quot;list-disc pl-5 mt-2 space-y-1&quot;&gt;&#10;                                            &lt;li&gt;Search for a venue using the search box.&lt;/li&gt;&#10;                                            &lt;li&gt;Click on the map to place a marker.&lt;/li&gt;&#10;                                            &lt;li&gt;Drag the marker to fine-tune the location.&lt;/li&gt;&#10;                                        &lt;/ul&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                {/* Right Side - Map */}&#10;                                &lt;div className=&quot;flex flex-col md:h-full gap-4&quot;&gt;&#10;                                    {isLoaded ? (&#10;                                        &lt;&gt;&#10;                                            {/*&#10;                                              * Autocomplete functionality temporarily disabled&#10;                                              * TODO: Fix this to properly handle clickable suggestions&#10;                                              */}&#10;                                            {/*&#10;                                            &lt;Autocomplete&#10;                                                onLoad={onAutocompleteLoad}&#10;                                                className={'!z-10'}&#10;                                                onPlaceChanged={() =&gt; {&#10;                                                    console.log('Place changed');&#10;                                                }}&#10;                                            &gt;&#10;                                                &lt;Input&#10;                                                    type=&quot;text&quot;&#10;                                                    placeholder=&quot;Search for a location...&quot;&#10;                                                    className=&quot;w-full shadow-md&quot;&#10;                                                /&gt;&#10;                                            &lt;/Autocomplete&gt;&#10;                                            */}&#10;&#10;                                            {/* Simple input field while autocomplete is disabled */}&#10;                                            &lt;Input&#10;                                                type=&quot;text&quot;&#10;                                                placeholder=&quot;Search functionality coming soon...&quot;&#10;                                                className=&quot;w-full shadow-md opacity-70&quot;&#10;                                                disabled&#10;                                            /&gt;&#10;&#10;                                            &lt;GoogleMap mapContainerStyle={MAP_CONTAINER_STYLE} center={markerPosition}&#10;                                                       zoom={15} onClick={handleMapClick}&gt;&#10;                                                &lt;Marker&#10;                                                    position={markerPosition}&#10;                                                    draggable={true}&#10;                                                    onDragEnd={(e) =&gt; {&#10;                                                        if (e.latLng) {&#10;                                                            const newPos = {lat: e.latLng.lat(), lng: e.latLng.lng()};&#10;                                                            setMarkerPosition(newPos);&#10;                                                            setValue(`sessions.${index}.venueDetails.latitude`, newPos.lat, {shouldValidate: true});&#10;                                                            setValue(`sessions.${index}.venueDetails.longitude`, newPos.lng, {shouldValidate: true});&#10;                                                        }&#10;                                                    }}&#10;                                                /&gt;&#10;                                            &lt;/GoogleMap&gt;&#10;                                        &lt;/&gt;&#10;                                    ) : &lt;Skeleton className=&quot;h-full w-full&quot;/&gt;}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/TabsContent&gt;&#10;                        &lt;TabsContent value=&quot;online&quot; className=&quot;p-6&quot;&gt;&#10;                            &lt;FormField control={control} name={`sessions.${index}.onlineLink`} render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&lt;FormLabel&gt;Online Link&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                    placeholder=&quot;https://zoom.us/...&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                        &lt;/TabsContent&gt;&#10;                    &lt;/Tabs&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;DialogFooter className=&quot;justify-between p-6 border-t&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;Checkbox id=&quot;apply-to-all&quot; checked={applyToAll}&#10;                                  onCheckedChange={(checked) =&gt; setApplyToAll(checked === true)}/&gt;&#10;                        &lt;Label htmlFor=&quot;apply-to-all&quot;&gt;Apply to all sessions&lt;/Label&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Button type=&quot;button&quot; onClick={handleSave}&gt;Save Location&lt;/Button&gt;&#10;                &lt;/DialogFooter&gt;&#10;            &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/SessionListItem.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/SessionListItem.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState} from 'react';&#10;import {useFormContext} from 'react-hook-form';&#10;import {CreateEventFormData, SalesStartRuleType, SessionFormData} from '@/lib/validators/event';&#10;import {Button} from '@/components/ui/button';&#10;import {format, parseISO} from 'date-fns';&#10;import {Badge} from '@/components/ui/badge';&#10;import {TimeConfigDialog} from './TimeConfigDialog'; // Assuming this component exists&#10;import {LocationConfigDialog} from './LocationConfigDialog';&#10;import {LinkIcon, MapPin, Settings, Trash2, Edit, Tag} from 'lucide-react';&#10;&#10;// Helper function to create a descriptive string for the sales rule&#10;const getSalesRuleDescription = (session: SessionFormData): string =&gt; {&#10;    if (!session) return &quot;Sales rule not set&quot;;&#10;    switch (session.salesStartRuleType) {&#10;        case SalesStartRuleType.IMMEDIATE:&#10;            return &quot;On sale immediately&quot;;&#10;        case SalesStartRuleType.FIXED:&#10;            // Check if the date is valid before formatting&#10;            return session.salesStartFixedDatetime&#10;                ? `Sales start on ${format(parseISO(session.salesStartFixedDatetime), 'MMM d, yyyy')}`&#10;                : &quot;Fixed date not set&quot;;&#10;        case SalesStartRuleType.ROLLING:&#10;            return `Sales start ${session.salesStartHoursBefore} hours before`;&#10;        default:&#10;            return &quot;Sales rule not set&quot;;&#10;    }&#10;};&#10;&#10;export function SessionListItem({field, index, onRemoveAction}: {&#10;    field: SessionFormData; // react-hook-form's field type&#10;    index: number;&#10;    onRemoveAction: (index: number) =&gt; void&#10;}) {&#10;    const {watch} = useFormContext&lt;CreateEventFormData&gt;();&#10;    const [isTimeDialogOpen, setIsTimeDialogOpen] = useState(false);&#10;    const [isLocationDialogOpen, setIsLocationDialogOpen] = useState(false);&#10;&#10;    // Watch all relevant fields for this specific session&#10;    const sessionData = watch(`sessions.${index}`);&#10;&#10;    // Gracefully handle case where sessionData might be undefined during a remove operation&#10;    if (!sessionData) {&#10;        return null;&#10;    }&#10;&#10;    const {isOnline, onlineLink, venueDetails} = sessionData;&#10;&#10;    const hasLocation = isOnline ? !!onlineLink : !!venueDetails?.name;&#10;&#10;    const LocationIcon = hasLocation ? (isOnline ? LinkIcon : MapPin) : Settings;&#10;    const locationIconColor = hasLocation ? &quot;text-primary&quot; : &quot;text-destructive&quot;;&#10;&#10;    return (&#10;        &lt;div className=&quot;flex flex-col gap-4 p-4 border rounded-lg&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;                    &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; className={locationIconColor}&#10;                            onClick={() =&gt; setIsLocationDialogOpen(true)}&gt;&#10;                        &lt;LocationIcon className=&quot;h-5 w-5&quot;/&gt;&#10;                    &lt;/Button&gt;&#10;                    &lt;div&gt;&#10;                        &lt;p className=&quot;font-medium&quot;&gt;Session {index + 1}&lt;/p&gt;&#10;                        &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                            {format(parseISO(field.startTime), &quot;PPP p&quot;)}&#10;                        &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    {hasLocation ? (&#10;                        &lt;Badge variant={isOnline ? &quot;default&quot; : &quot;secondary&quot;}&gt;{isOnline ? 'Online' : 'Physical'}&lt;/Badge&gt;&#10;                    ) : (&#10;                        &lt;Badge variant=&quot;destructive&quot;&gt;Location Not Set&lt;/Badge&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; size=&quot;sm&quot; onClick={() =&gt; setIsTimeDialogOpen(true)}&gt;&#10;                        &lt;Edit className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;                        Edit Time&#10;                    &lt;/Button&gt;&#10;                    &lt;Button type=&quot;button&quot; variant=&quot;ghost&quot; size=&quot;icon&quot; onClick={() =&gt; onRemoveAction(index)}&gt;&#10;                        &lt;Trash2 className=&quot;h-4 w-4&quot;/&gt;&#10;                    &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;border-t pt-3 mt-3 text-sm text-muted-foreground space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    &lt;MapPin className=&quot;h-4 w-4&quot;/&gt;&#10;                    &lt;span&gt;Location: {hasLocation ? (isOnline ? onlineLink : venueDetails?.name ?? 'Not set') : 'Not set'}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    &lt;Tag className=&quot;h-4 w-4&quot;/&gt;&#10;                    &lt;span&gt;Sales Rule: {getSalesRuleDescription(sessionData)}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;TimeConfigDialog index={index} open={isTimeDialogOpen} setOpen={setIsTimeDialogOpen}/&gt;&#10;            {/* ✅ Corrected: Changed prop name from setOpenAction to setOpen */}&#10;            &lt;LocationConfigDialog index={index} open={isLocationDialogOpen} setOpenAction={setIsLocationDialogOpen}/&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState} from 'react';&#10;import {useFormContext} from 'react-hook-form';&#10;import {CreateEventFormData, SalesStartRuleType, SessionFormData} from '@/lib/validators/event';&#10;import {Button} from '@/components/ui/button';&#10;import {format, parseISO} from 'date-fns';&#10;import {Badge} from '@/components/ui/badge';&#10;import {TimeConfigDialog} from './TimeConfigDialog'; // Assuming this component exists&#10;import {LocationConfigDialog} from './LocationConfigDialog';&#10;import {LinkIcon, MapPin, Settings, Trash2, Edit, Tag} from 'lucide-react';&#10;&#10;// Helper function to create a descriptive string for the sales rule&#10;const getSalesRuleDescription = (session: SessionFormData): string =&gt; {&#10;    if (!session) return &quot;Sales rule not set&quot;;&#10;    switch (session.salesStartRuleType) {&#10;        case SalesStartRuleType.IMMEDIATE:&#10;            return &quot;On sale immediately&quot;;&#10;        case SalesStartRuleType.FIXED:&#10;            // Check if the date is valid before formatting&#10;            return session.salesStartFixedDatetime&#10;                ? `Sales start on ${format(parseISO(session.salesStartFixedDatetime), 'MMM d, yyyy')}`&#10;                : &quot;Fixed date not set&quot;;&#10;        case SalesStartRuleType.ROLLING:&#10;            return `Sales start ${session.salesStartHoursBefore} hours before`;&#10;        default:&#10;            return &quot;Sales rule not set&quot;;&#10;    }&#10;};&#10;&#10;export function SessionListItem({field, index, onRemoveAction}: {&#10;    field: SessionFormData; // react-hook-form's field type&#10;    index: number;&#10;    onRemoveAction: (index: number) =&gt; void&#10;}) {&#10;    const {watch} = useFormContext&lt;CreateEventFormData&gt;();&#10;    const [isTimeDialogOpen, setIsTimeDialogOpen] = useState(false);&#10;    const [isLocationDialogOpen, setIsLocationDialogOpen] = useState(false);&#10;&#10;    // Watch all relevant fields for this specific session&#10;    const sessionData = watch(`sessions.${index}`);&#10;&#10;    // Gracefully handle case where sessionData might be undefined during a remove operation&#10;    if (!sessionData) {&#10;        return null;&#10;    }&#10;&#10;    const {isOnline, onlineLink, venueDetails} = sessionData;&#10;&#10;    const hasLocation = isOnline ? !!onlineLink : !!venueDetails?.name;&#10;&#10;    const LocationIcon = hasLocation ? (isOnline ? LinkIcon : MapPin) : Settings;&#10;    const locationIconColor = hasLocation &#10;        ? (isOnline &#10;            ? &quot;text-blue-500 dark:text-blue-400&quot; &#10;            : &quot;text-green-500 dark:text-green-400&quot;) &#10;        : &quot;text-destructive&quot;;&#10;&#10;    return (&#10;        &lt;div className=&quot;flex flex-col gap-4 p-4 border rounded-lg&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;                    &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; className={locationIconColor}&#10;                            onClick={() =&gt; setIsLocationDialogOpen(true)}&gt;&#10;                        &lt;LocationIcon className=&quot;h-5 w-5&quot;/&gt;&#10;                    &lt;/Button&gt;&#10;                    &lt;div&gt;&#10;                        &lt;p className=&quot;font-medium&quot;&gt;Session {index + 1}&lt;/p&gt;&#10;                        &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                            {format(parseISO(field.startTime), &quot;PPP p&quot;)}&#10;                        &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    {hasLocation ? (&#10;                        &lt;Badge variant={isOnline ? &quot;default&quot; : &quot;secondary&quot;}&gt;{isOnline ? 'Online' : 'Physical'}&lt;/Badge&gt;&#10;                    ) : (&#10;                        &lt;Badge variant=&quot;destructive&quot;&gt;Location Not Set&lt;/Badge&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; size=&quot;sm&quot; onClick={() =&gt; setIsTimeDialogOpen(true)}&gt;&#10;                        &lt;Edit className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;                        Edit Time&#10;                    &lt;/Button&gt;&#10;                    &lt;Button type=&quot;button&quot; variant=&quot;ghost&quot; size=&quot;icon&quot; onClick={() =&gt; onRemoveAction(index)}&gt;&#10;                        &lt;Trash2 className=&quot;h-4 w-4&quot;/&gt;&#10;                    &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;border-t pt-3 mt-3 text-sm text-muted-foreground space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    {isOnline ? &lt;LinkIcon className=&quot;h-4 w-4&quot;/&gt; : &lt;MapPin className=&quot;h-4 w-4&quot;/&gt;}&#10;                    &lt;span&gt;Location: {hasLocation ? (isOnline ? onlineLink : venueDetails?.name ?? 'Not set') : 'Not set'}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    &lt;Tag className=&quot;h-4 w-4&quot;/&gt;&#10;                    &lt;span&gt;Sales Rule: {getSalesRuleDescription(sessionData)}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;TimeConfigDialog index={index} open={isTimeDialogOpen} setOpen={setIsTimeDialogOpen}/&gt;&#10;            {/* ✅ Corrected: Changed prop name from setOpenAction to setOpen */}&#10;            &lt;LocationConfigDialog index={index} open={isLocationDialogOpen} setOpenAction={setIsLocationDialogOpen}/&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/coreDetailsStep.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/coreDetailsStep.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useForm, FormProvider} from 'react-hook-form';&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {useOrganization} from '@/providers/OrganizationProvider';&#10;import {useLimits} from '@/providers/LimitProvider';&#10;import {CategoryResponse} from '@/types/category';&#10;import {getAllCategories} from '@/lib/actions/categoryActions';&#10;import {coreDetailsSchema, CoreDetailsData} from '@/lib/validators/event';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Textarea} from '@/components/ui/textarea';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;import {&#10;    Select,&#10;    SelectContent,&#10;    SelectItem,&#10;    SelectTrigger,&#10;    SelectValue,&#10;    SelectGroup,&#10;    SelectLabel&#10;} from '@/components/ui/select';&#10;import {Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious} from &quot;@/components/ui/carousel&quot;;&#10;import Image from 'next/image';&#10;import {ImageIcon, X, PlusCircle, Upload} from 'lucide-react';&#10;import {toast} from 'sonner';&#10;import Autoplay from 'embla-carousel-autoplay';&#10;&#10;// --- Step 1: Core Details Component ---&#10;export function CoreDetailsStep({onNextAction}: { onNextAction: () =&gt; void }) {&#10;    const {organization} = useOrganization();&#10;    const {myLimits} = useLimits();&#10;    const [categories, setCategories] = useState&lt;CategoryResponse[]&gt;([]);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    const maxPhotos = myLimits?.eventLimits.maxCoverPhotos || 1;&#10;&#10;    const form = useForm&lt;CoreDetailsData&gt;({&#10;        resolver: zodResolver(coreDetailsSchema),&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            categoryId: '', // Ensure categoryId is present&#10;            isOnline: false,&#10;        },&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        getAllCategories().then(setCategories);&#10;    }, [organization]);&#10;&#10;    const handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        if (e.target.files) {&#10;            const files = Array.from(e.target.files);&#10;            if ((coverFiles.length + files.length) &gt; maxPhotos) {&#10;                toast.error(`You can only upload a maximum of ${maxPhotos} photos.`);&#10;                return;&#10;            }&#10;            setCoverFiles(prev =&gt; [...prev, ...files]);&#10;        }&#10;    };&#10;&#10;    const removeImage = (index: number) =&gt; {&#10;        setCoverFiles(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    };&#10;&#10;    function onSubmit(data: CoreDetailsData) {&#10;        console.log(&quot;Step 1 Data:&quot;, data);&#10;        console.log(&quot;Cover Files:&quot;, coverFiles);&#10;        onNextAction();&#10;    }&#10;&#10;    return (&#10;        &lt;FormProvider {...form}&gt;&#10;            &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt;&#10;                {/* Hero Cover Photos Section */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Cover Photos&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;This is the first thing people will see. Upload up&#10;                            to {maxPhotos} images.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                        {coverFiles.length &gt; 0 ? (&#10;                            &lt;Carousel plugins={[Autoplay({delay: 4000, stopOnInteraction: false})]}&gt;&#10;                                &lt;CarouselContent&gt;&#10;                                    {coverFiles.map((file, index) =&gt; (&#10;                                        &lt;CarouselItem key={index} className=&quot;relative&quot;&gt;&#10;                                            &lt;div className=&quot;aspect-[21/9] w-full relative&quot;&gt;&#10;                                                &lt;Image src={URL.createObjectURL(file)} alt={`Cover photo ${index + 1}`}&#10;                                                       fill className=&quot;object-cover rounded-lg&quot;/&gt;&#10;                                                &lt;Button type=&quot;button&quot; variant=&quot;destructive&quot; size=&quot;icon&quot;&#10;                                                        className=&quot;absolute top-4 right-4 h-8 w-8 z-10&quot;&#10;                                                        onClick={() =&gt; removeImage(index)}&gt;&lt;X&#10;                                                    className=&quot;h-4 w-4&quot;/&gt;&lt;/Button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/CarouselItem&gt;&#10;                                    ))}&#10;                                &lt;/CarouselContent&gt;&#10;                                &lt;CarouselPrevious type=&quot;button&quot;&#10;                                                  className=&quot;absolute left-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                                &lt;CarouselNext type=&quot;button&quot;&#10;                                              className=&quot;absolute right-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                            &lt;/Carousel&gt;&#10;                        ) : (&#10;                            &lt;div&#10;                                className=&quot;flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-12 text-center aspect-[21/9] w-full&quot;&gt;&#10;                                &lt;ImageIcon className=&quot;h-16 w-16 text-muted-foreground&quot;/&gt;&#10;                                &lt;p className=&quot;mt-4 text-lg font-medium&quot;&gt;Add cover photos for your event&lt;/p&gt;&#10;                                &lt;Button type=&quot;button&quot; className=&quot;mt-4&quot;&#10;                                        onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;Upload className=&quot;mr-2 h-4 w-4&quot;/&gt;Upload&#10;                                    Images&lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                        &lt;div className=&quot;mt-4 flex justify-center items-center gap-4&quot;&gt;&#10;                            {coverFiles.length &gt; 0 &amp;&amp; (&lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&#10;                                                               onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;PlusCircle&#10;                                className=&quot;mr-2 h-4 w-4&quot;/&gt;Add More&lt;/Button&gt;)}&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{coverFiles.length} of {maxPhotos} photos&#10;                                selected.&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;Input id=&quot;picture&quot; type=&quot;file&quot; multiple accept=&quot;image/*&quot; onChange={handleFileChange}&#10;                               className=&quot;hidden&quot; ref={fileInputRef}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                {/* Event Details Card with Category dropdown */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Event Details&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;Provide the core information about your event.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                        &lt;FormField control={form.control} name=&quot;title&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Event Title&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                placeholder=&quot;e.g., Annual Tech Conference 2025&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;&#10;                        {/* Category Selector as dropdown */}&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;categoryId&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Category&lt;/FormLabel&gt;&#10;                                    &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#10;                                        &lt;FormControl&gt;&#10;                                            &lt;SelectTrigger&gt;&#10;                                                &lt;SelectValue placeholder=&quot;Select a category for your event&quot;/&gt;&#10;                                            &lt;/SelectTrigger&gt;&#10;                                        &lt;/FormControl&gt;&#10;                                        &lt;SelectContent className=&quot;max-h-100&quot;&gt;&#10;                                            {categories.map((parentCat) =&gt; (&#10;                                                &lt;SelectGroup key={parentCat.id}&gt;&#10;                                                    &lt;SelectLabel&gt;{parentCat.name}&lt;/SelectLabel&gt;&#10;                                                    {parentCat.subCategories.map((subCat) =&gt; (&#10;                                                        &lt;SelectItem key={subCat.id} value={subCat.id}&gt;&#10;                                                            {subCat.name}&#10;                                                        &lt;/SelectItem&gt;&#10;                                                    ))}&#10;                                                &lt;/SelectGroup&gt;&#10;                                            ))}&#10;                                        &lt;/SelectContent&gt;&#10;                                    &lt;/Select&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;FormField control={form.control} name=&quot;description&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Short Description&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;A brief summary of your event.&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                        &lt;FormField control={form.control} name=&quot;overview&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Overview&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;Provide more details like schedule, speakers, etc.&quot;&#10;                                className=&quot;min-h-32&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;                &lt;div className=&quot;flex justify-end mt-8&quot;&gt;&#10;                    &lt;Button type=&quot;submit&quot;&gt;Next: Tiers &amp; Pricing&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/form&gt;&#10;        &lt;/FormProvider&gt;&#10;    )&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useForm, FormProvider} from 'react-hook-form';&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {useOrganization} from '@/providers/OrganizationProvider';&#10;import {useLimits} from '@/providers/LimitProvider';&#10;import {CategoryResponse} from '@/types/category';&#10;import {getAllCategories} from '@/lib/actions/categoryActions';&#10;import {coreDetailsSchema, CoreDetailsData} from '@/lib/validators/event';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Textarea} from '@/components/ui/textarea';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;import {&#10;    Select,&#10;    SelectContent,&#10;    SelectItem,&#10;    SelectTrigger,&#10;    SelectValue,&#10;    SelectGroup,&#10;    SelectLabel&#10;} from '@/components/ui/select';&#10;import {Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious} from &quot;@/components/ui/carousel&quot;;&#10;import Image from 'next/image';&#10;import {ImageIcon, X, PlusCircle, Upload} from 'lucide-react';&#10;import {toast} from 'sonner';&#10;import Autoplay from 'embla-carousel-autoplay';&#10;&#10;// Updated props interface to match the required signature&#10;interface CoreDetailsStepProps {&#10;    coverFiles: File[];&#10;    setCoverFilesAction: React.Dispatch&lt;React.SetStateAction&lt;File[]&gt;&gt;;&#10;    onNextAction?: () =&gt; void;&#10;}&#10;&#10;// --- Step 1: Core Details Component ---&#10;export function CoreDetailsStep({ coverFiles, setCoverFilesAction, onNextAction }: CoreDetailsStepProps) {&#10;    const {organization} = useOrganization();&#10;    const {myLimits} = useLimits();&#10;    const [categories, setCategories] = useState&lt;CategoryResponse[]&gt;([]);&#10;    const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    const maxPhotos = myLimits?.eventLimits.maxCoverPhotos || 1;&#10;&#10;    const form = useForm&lt;CoreDetailsData&gt;({&#10;        resolver: zodResolver(coreDetailsSchema),&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            categoryId: '', // Ensure categoryId is present&#10;            isOnline: false,&#10;        },&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        getAllCategories().then(setCategories);&#10;    }, [organization]);&#10;&#10;    const handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        if (e.target.files) {&#10;            const files = Array.from(e.target.files);&#10;            if ((coverFiles.length + files.length) &gt; maxPhotos) {&#10;                toast.error(`You can only upload a maximum of ${maxPhotos} photos.`);&#10;                return;&#10;            }&#10;            setCoverFilesAction(prev =&gt; [...prev, ...files]);&#10;        }&#10;    };&#10;&#10;    const removeImage = (index: number) =&gt; {&#10;        setCoverFilesAction(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    };&#10;&#10;    function onSubmit(data: CoreDetailsData) {&#10;        console.log(&quot;Step 1 Data:&quot;, data);&#10;        console.log(&quot;Cover Files:&quot;, coverFiles);&#10;        if (onNextAction) onNextAction();&#10;    }&#10;&#10;    return (&#10;        &lt;FormProvider {...form}&gt;&#10;            &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt;&#10;                {/* Hero Cover Photos Section */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Cover Photos&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;This is the first thing people will see. Upload up&#10;                            to {maxPhotos} images.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                        {coverFiles.length &gt; 0 ? (&#10;                            &lt;Carousel plugins={[Autoplay({delay: 4000, stopOnInteraction: false})]}&gt;&#10;                                &lt;CarouselContent&gt;&#10;                                    {coverFiles.map((file, index) =&gt; (&#10;                                        &lt;CarouselItem key={index} className=&quot;relative&quot;&gt;&#10;                                            &lt;div className=&quot;aspect-[21/9] w-full relative&quot;&gt;&#10;                                                &lt;Image src={URL.createObjectURL(file)} alt={`Cover photo ${index + 1}`}&#10;                                                       fill className=&quot;object-cover rounded-lg&quot;/&gt;&#10;                                                &lt;Button type=&quot;button&quot; variant=&quot;destructive&quot; size=&quot;icon&quot;&#10;                                                        className=&quot;absolute top-4 right-4 h-8 w-8 z-10&quot;&#10;                                                        onClick={() =&gt; removeImage(index)}&gt;&lt;X&#10;                                                    className=&quot;h-4 w-4&quot;/&gt;&lt;/Button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/CarouselItem&gt;&#10;                                    ))}&#10;                                &lt;/CarouselContent&gt;&#10;                                &lt;CarouselPrevious type=&quot;button&quot;&#10;                                                  className=&quot;absolute left-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                                &lt;CarouselNext type=&quot;button&quot;&#10;                                              className=&quot;absolute right-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                            &lt;/Carousel&gt;&#10;                        ) : (&#10;                            &lt;div&#10;                                className=&quot;flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-12 text-center aspect-[21/9] w-full&quot;&gt;&#10;                                &lt;ImageIcon className=&quot;h-16 w-16 text-muted-foreground&quot;/&gt;&#10;                                &lt;p className=&quot;mt-4 text-lg font-medium&quot;&gt;Add cover photos for your event&lt;/p&gt;&#10;                                &lt;Button type=&quot;button&quot; className=&quot;mt-4&quot;&#10;                                        onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;Upload className=&quot;mr-2 h-4 w-4&quot;/&gt;Upload&#10;                                    Images&lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                        &lt;div className=&quot;mt-4 flex justify-center items-center gap-4&quot;&gt;&#10;                            {coverFiles.length &gt; 0 &amp;&amp; (&lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&#10;                                                               onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;PlusCircle&#10;                                className=&quot;mr-2 h-4 w-4&quot;/&gt;Add More&lt;/Button&gt;)}&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{coverFiles.length} of {maxPhotos} photos&#10;                                selected.&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;Input id=&quot;picture&quot; type=&quot;file&quot; multiple accept=&quot;image/*&quot; onChange={handleFileChange}&#10;                               className=&quot;hidden&quot; ref={fileInputRef}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                {/* Event Details Card with Category dropdown */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Event Details&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;Provide the core information about your event.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                        &lt;FormField control={form.control} name=&quot;title&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Event Title&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                placeholder=&quot;e.g., Annual Tech Conference 2025&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;&#10;                        {/* Category Selector as dropdown */}&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;categoryId&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Category&lt;/FormLabel&gt;&#10;                                    &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#10;                                        &lt;FormControl&gt;&#10;                                            &lt;SelectTrigger&gt;&#10;                                                &lt;SelectValue placeholder=&quot;Select a category for your event&quot;/&gt;&#10;                                            &lt;/SelectTrigger&gt;&#10;                                        &lt;/FormControl&gt;&#10;                                        &lt;SelectContent className=&quot;max-h-100&quot;&gt;&#10;                                            {categories.map((parentCat) =&gt; (&#10;                                                &lt;SelectGroup key={parentCat.id}&gt;&#10;                                                    &lt;SelectLabel&gt;{parentCat.name}&lt;/SelectLabel&gt;&#10;                                                    {parentCat.subCategories.map((subCat) =&gt; (&#10;                                                        &lt;SelectItem key={subCat.id} value={subCat.id}&gt;&#10;                                                            {subCat.name}&#10;                                                        &lt;/SelectItem&gt;&#10;                                                    ))}&#10;                                                &lt;/SelectGroup&gt;&#10;                                            ))}&#10;                                        &lt;/SelectContent&gt;&#10;                                    &lt;/Select&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;FormField control={form.control} name=&quot;description&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Short Description&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;A brief summary of your event.&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                        &lt;FormField control={form.control} name=&quot;overview&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Overview&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;Provide more details like schedule, speakers, etc.&quot;&#10;                                className=&quot;min-h-32&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;                &lt;div className=&quot;flex justify-end mt-8&quot;&gt;&#10;                    &lt;Button type=&quot;submit&quot;&gt;Next: Tiers &amp; Pricing&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/form&gt;&#10;        &lt;/FormProvider&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx.new">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx.new" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useEffect, useState} from 'react';&#10;import {CoreDetailsStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/CoreDetailsStep&quot;;&#10;import {Progress} from &quot;@/components/ui/progress&quot;;&#10;import {CreateEventRequest} from &quot;@/types/event&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {FormProvider, useForm} from &quot;react-hook-form&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {TiersStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/TierStep&quot;;&#10;import {zodResolver} from &quot;@hookform/resolvers/zod&quot;;&#10;import {coreDetailsSchema, tiersSchema} from &quot;@/lib/validators/event&quot;;&#10;import {WizardSidebar} from &quot;../_components/WizardSideBar&quot;;&#10;import {useSidebar} from &quot;@/components/ui/sidebar&quot;;&#10;&#10;// --- Main Wizard Parent Component ---&#10;export default function CreateEventPage() {&#10;    const [step, setStep] = useState(1);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const totalSteps = 5;&#10;    const {setOpen} = useSidebar();&#10;    &#10;    const steps = [&#10;        {number: 1, title: &quot;Core Details&quot;, description: &quot;Name, category, and location&quot;},&#10;        {number: 2, title: &quot;Tiers &amp; Pricing&quot;, description: &quot;Set your ticket prices&quot;},&#10;        {number: 3, title: &quot;Scheduling&quot;, description: &quot;Add dates and times&quot;},&#10;        {number: 4, title: &quot;Seating&quot;, description: &quot;Configure seating maps&quot;},&#10;        {number: 5, title: &quot;Review &amp; Publish&quot;, description: &quot;Final check before submission&quot;},&#10;    ];&#10;&#10;    // Collapse the main sidebar when component mounts&#10;    useEffect(() =&gt; {&#10;        setOpen(false);&#10;    }, [setOpen]);&#10;&#10;    // ✅ The single form instance for the entire wizard is created here.&#10;    const methods = useForm&lt;CreateEventRequest&gt;({&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            organizationId: '', // Should be set from context/params&#10;            categoryId: '',&#10;            isOnline: false,&#10;            tiers: [],&#10;            sessions: [],&#10;        },&#10;        mode: 'onSubmit', // Only validate when explicitly triggered&#10;    });&#10;&#10;    // Update the validation schema based on the current step&#10;    useEffect(() =&gt; {&#10;        if (step === 1) {&#10;            methods.clearErrors();&#10;        } else if (step === 2) {&#10;            methods.clearErrors();&#10;        }&#10;    }, [step, methods]);&#10;&#10;    const validateCoreDetails = async () =&gt; {&#10;        try {&#10;            // Check for cover photos&#10;            if (coverFiles.length === 0) {&#10;                toast.error(&quot;Please upload at least one cover photo.&quot;);&#10;                return false;&#10;            }&#10;            &#10;            // Get form values for core details&#10;            const values = methods.getValues();&#10;            const coreData = {&#10;                title: values.title,&#10;                description: values.description || &quot;&quot;,&#10;                overview: values.overview || &quot;&quot;,&#10;                categoryId: values.categoryId || &quot;&quot;,&#10;                isOnline: values.isOnline || false,&#10;                venueId: values.venueId,&#10;                onlineLink: values.onlineLink,&#10;                locationDescription: values.locationDescription,&#10;            };&#10;            &#10;            // Validate with Zod schema&#10;            const result = coreDetailsSchema.safeParse(coreData);&#10;            &#10;            if (!result.success) {&#10;                // Show validation errors&#10;                result.error.errors.forEach(err =&gt; {&#10;                    toast.error(`${err.path.join('.')}: ${err.message}`);&#10;                });&#10;                &#10;                // Also set form errors for field highlighting&#10;                result.error.errors.forEach(err =&gt; {&#10;                    const path = err.path.join('.') as keyof CreateEventRequest;&#10;                    methods.setError(path, { &#10;                        type: 'manual', &#10;                        message: err.message &#10;                    });&#10;                });&#10;                &#10;                return false;&#10;            }&#10;            &#10;            return true;&#10;        } catch (error: any) {&#10;            console.error(&quot;Validation error:&quot;, error);&#10;            toast.error(&quot;Please check all required fields&quot;);&#10;            return false;&#10;        }&#10;    };&#10;&#10;    const validateTiers = async () =&gt; {&#10;        try {&#10;            // Get tiers data&#10;            const values = methods.getValues();&#10;            const tiersData = { tiers: values.tiers || [] };&#10;            &#10;            // Validate with Zod schema&#10;            const result = tiersSchema.safeParse(tiersData);&#10;            &#10;            if (!result.success) {&#10;                // Show validation errors&#10;                result.error.errors.forEach(err =&gt; {&#10;                    toast.error(`${err.message}`);&#10;                });&#10;                return false;&#10;            }&#10;            &#10;            return true;&#10;        } catch (error: any) {&#10;            console.error(&quot;Tier validation error:&quot;, error);&#10;            toast.error(&quot;Please add at least one tier with valid information&quot;);&#10;            return false;&#10;        }&#10;    };&#10;&#10;    const onNext = async () =&gt; {&#10;        let isValid = false;&#10;        &#10;        if (step === 1) {&#10;            isValid = await validateCoreDetails();&#10;        } else if (step === 2) {&#10;            isValid = await validateTiers();&#10;        } else {&#10;            // For future steps that don't have validation yet&#10;            isValid = true;&#10;        }&#10;&#10;        if (isValid) {&#10;            setStep(s =&gt; Math.min(totalSteps, s + 1));&#10;        }&#10;    };&#10;&#10;    const onPrev = () =&gt; setStep(s =&gt; Math.max(1, s - 1));&#10;&#10;    const onSubmit = async (data: CreateEventRequest) =&gt; {&#10;        // Perform final validation before submission&#10;        let isValid = true;&#10;        &#10;        // Validate the current step first&#10;        if (step === 1) {&#10;            isValid = await validateCoreDetails();&#10;        } else if (step === 2) {&#10;            isValid = await validateTiers();&#10;        }&#10;        &#10;        if (isValid) {&#10;            console.log(&quot;Final Assembled Form Data:&quot;, data);&#10;            console.log(&quot;Final Cover Files:&quot;, coverFiles);&#10;            // Here you would call your createEvent API action&#10;            toast.success(&quot;Event submitted for approval!&quot;);&#10;        }&#10;    };&#10;&#10;    const renderStep = () =&gt; {&#10;        switch (step) {&#10;            case 1:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;            case 2:&#10;                return &lt;TiersStep/&gt;;&#10;            // Add cases for other steps here&#10;            default:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;flex min-h-screen bg-muted/40&quot;&gt;&#10;            &lt;WizardSidebar currentStep={step} steps={steps}/&gt;&#10;            &lt;main className=&quot;flex-1 p-4 md:p-8 overflow-y-auto ml-72&quot;&gt;&#10;                &lt;div className=&quot;max-w-4xl mx-auto&quot;&gt;&#10;                    &lt;div className=&quot;mb-8&quot;&gt;&#10;                        &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Step {step} of {totalSteps}&lt;/p&gt;&#10;                        &lt;Progress value={(step / totalSteps) * 100} className=&quot;mt-2&quot;/&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* ✅ The FormProvider broadcasts the form state to all children */}&#10;                    &lt;FormProvider {...methods}&gt;&#10;                        &lt;form onSubmit={methods.handleSubmit(onSubmit)}&gt;&#10;                            {renderStep()}&#10;&#10;                            &lt;div className=&quot;flex justify-between mt-8&quot;&gt;&#10;                                &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; onClick={onPrev} disabled={step === 1}&gt;&#10;                                    Previous&#10;                                &lt;/Button&gt;&#10;                                {step &lt; totalSteps ? (&#10;                                    &lt;Button type=&quot;button&quot; onClick={onNext}&gt;&#10;                                        Next&#10;                                    &lt;/Button&gt;&#10;                                ) : (&#10;                                    &lt;Button type=&quot;submit&quot;&gt;&#10;                                        Submit for Approval&#10;                                    &lt;/Button&gt;&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        &lt;/form&gt;&#10;                    &lt;/FormProvider&gt;&#10;                &lt;/div&gt;&#10;            &lt;/main&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/seating/_components/LayoutPreviewCard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/seating/_components/LayoutPreviewCard.tsx" />
              <option name="originalContent" value="import {LayoutBlock, SeatingLayoutTemplateResponse} from &quot;@/types/seatingLayout&quot;;&#10;import {useRouter} from &quot;next/navigation&quot;; // Changed from next/router to next/navigation&#10;import {useEffect, useState} from &quot;react&quot;;&#10;import {Card, CardAction, CardContent, CardDescription, CardHeader, CardTitle} from &quot;@/components/ui/card&quot;;&#10;import {DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger} from &quot;@/components/ui/dropdown-menu&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {formatDistanceToNow} from &quot;date-fns&quot;;&#10;import {Edit, MoreVertical, Trash2} from &quot;lucide-react&quot;;&#10;&#10;interface LayoutPreviewCardProps {&#10;    layout: SeatingLayoutTemplateResponse;&#10;    onDelete: (id: string, name: string) =&gt; void;&#10;}&#10;&#10;interface LayoutPreviewCardProps {&#10;    layout: SeatingLayoutTemplateResponse;&#10;    onDelete: (id: string, name: string) =&gt; void;&#10;}&#10;&#10;function LayoutPreviewCard({layout, onDelete}: LayoutPreviewCardProps) {&#10;    const router = useRouter();&#10;    const [viewBox, setViewBox] = useState('0 0 100 100');&#10;    const [blocks, setBlocks] = useState&lt;LayoutBlock[]&gt;([]);&#10;&#10;    useEffect(() =&gt; {&#10;        const originalBlocks = layout.layoutData.layout.blocks;&#10;        if (originalBlocks.length === 0) return;&#10;&#10;        // ✅ Pre-process blocks to calculate dimensions for seated grids&#10;        const processedBlocks = originalBlocks.map(block =&gt; {&#10;            if (block.type === 'seated_grid') {&#10;                // Estimate size based on rows/columns. Adjust multipliers as needed.&#10;                const estimatedWidth = (block.columns || 10) * 30;&#10;                const estimatedHeight = (block.rows || 5) * 30;&#10;                return {...block, width: estimatedWidth, height: estimatedHeight};&#10;            }&#10;            return block;&#10;        });&#10;&#10;        // Calculate bounding box using the processed blocks&#10;        let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;&#10;&#10;        processedBlocks.forEach(block =&gt; {&#10;            minX = Math.min(minX, block.position.x);&#10;            minY = Math.min(minY, block.position.y);&#10;            maxX = Math.max(maxX, block.position.x + (block.width || 100));&#10;            maxY = Math.max(maxY, block.position.y + (block.height || 50));&#10;        });&#10;&#10;        // Add some padding to the viewbox&#10;        const padding = 20;&#10;        const finalMinX = minX - padding;&#10;        const finalMinY = minY - padding;&#10;        const width = (maxX - minX) + (padding * 2);&#10;        const height = (maxY - minY) + (padding * 2);&#10;&#10;        setViewBox(`${finalMinX} ${finalMinY} ${width} ${height}`);&#10;        setBlocks(processedBlocks);&#10;    }, [layout]);&#10;&#10;    return (&#10;        &lt;Card className=&quot;flex flex-col&quot;&gt;&#10;            &lt;CardHeader&gt;&#10;                &lt;CardTitle&gt;{layout.name}&lt;/CardTitle&gt;&#10;                &lt;CardDescription&gt;&#10;                    Updated {formatDistanceToNow(new Date(layout.updatedAt), {addSuffix: true})}&#10;                &lt;/CardDescription&gt;&#10;                &lt;CardAction&gt;&#10;                    &lt;DropdownMenu&gt;&#10;                        &lt;DropdownMenuTrigger asChild&gt;&#10;                            &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; className=&quot;h-8 w-8&quot;&gt;&#10;                                &lt;MoreVertical className=&quot;h-4 w-4&quot;/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/DropdownMenuTrigger&gt;&#10;                        &lt;DropdownMenuContent align=&quot;end&quot;&gt;&#10;                            &lt;DropdownMenuItem&#10;                                onClick={() =&gt; router.push(`/manage/organization/${layout.organizationId}/seating/${layout.id}`)}&gt;&#10;                                &lt;Edit className=&quot;mr-2 h-4 w-4&quot;/&gt; Edit&#10;                            &lt;/DropdownMenuItem&gt;&#10;                            &lt;DropdownMenuItem&#10;                                className=&quot;text-destructive&quot;&#10;                                onSelect={() =&gt; onDelete(layout.id, layout.name)}&#10;                            &gt;&#10;                                &lt;Trash2 className=&quot;mr-2 h-4 w-4&quot;/&gt; Delete&#10;                            &lt;/DropdownMenuItem&gt;&#10;                        &lt;/DropdownMenuContent&gt;&#10;                    &lt;/DropdownMenu&gt;&#10;                &lt;/CardAction&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;flex-grow flex items-center justify-center bg-muted/50 aspect-video p-4&quot;&gt;&#10;                &lt;svg viewBox={viewBox} className=&quot;w-full h-full&quot;&gt;&#10;                    {blocks.map(block =&gt; (&#10;                        &lt;rect&#10;                            key={block.id}&#10;                            x={block.position.x}&#10;                            y={block.position.y}&#10;                            width={block.width}&#10;                            height={block.height}&#10;                            rx=&quot;4&quot; // Rounded corners for the blocks&#10;                            className=&quot;fill-primary/20 stroke-primary&quot;&#10;                            strokeWidth=&quot;2&quot;&#10;                        /&gt;&#10;                    ))}&#10;                &lt;/svg&gt;&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    );&#10;}&#10;&#10;export default LayoutPreviewCard;" />
              <option name="updatedContent" value="import {LayoutBlock, SeatingLayoutTemplateResponse} from &quot;@/types/seatingLayout&quot;;&#10;import {useRouter} from &quot;next/navigation&quot;; // Changed from next/router to next/navigation&#10;import {useEffect, useState} from &quot;react&quot;;&#10;import {Card, CardAction, CardContent, CardDescription, CardHeader, CardTitle} from &quot;@/components/ui/card&quot;;&#10;import {DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger} from &quot;@/components/ui/dropdown-menu&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {formatDistanceToNow} from &quot;date-fns&quot;;&#10;import {Edit, MoreVertical, Trash2} from &quot;lucide-react&quot;;&#10;&#10;interface LayoutPreviewCardProps {&#10;    layout: SeatingLayoutTemplateResponse;&#10;    onDelete: (id: string, name: string) =&gt; void;&#10;}&#10;&#10;interface LayoutPreviewCardProps {&#10;    layout: SeatingLayoutTemplateResponse;&#10;    onDelete: (id: string, name: string) =&gt; void;&#10;}&#10;&#10;function LayoutPreviewCard({layout, onDelete}: LayoutPreviewCardProps) {&#10;    const router = useRouter();&#10;    const [viewBox, setViewBox] = useState('0 0 100 100');&#10;    const [blocks, setBlocks] = useState&lt;LayoutBlock[]&gt;([]);&#10;&#10;    useEffect(() =&gt; {&#10;        const originalBlocks = layout.layoutData.layout.blocks;&#10;        if (originalBlocks.length === 0) return;&#10;&#10;        // ✅ Pre-process blocks to calculate dimensions for seated grids&#10;        const processedBlocks = originalBlocks.map(block =&gt; {&#10;            if (block.type === 'seated_grid') {&#10;                // Estimate size based on rows/columns. Adjust multipliers as needed.&#10;                const estimatedWidth = (block.columns || 10) * 30;&#10;                const estimatedHeight = (block.rows || 5) * 30;&#10;                return {...block, width: estimatedWidth, height: estimatedHeight};&#10;            }&#10;            return block;&#10;        });&#10;&#10;        // Calculate bounding box using the processed blocks&#10;        let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;&#10;&#10;        processedBlocks.forEach(block =&gt; {&#10;            minX = Math.min(minX, block.position.x);&#10;            minY = Math.min(minY, block.position.y);&#10;            maxX = Math.max(maxX, block.position.x + (block.width || 100));&#10;            maxY = Math.max(maxY, block.position.y + (block.height || 50));&#10;        });&#10;&#10;        // Add some padding to the viewbox&#10;        const padding = 20;&#10;        const finalMinX = minX - padding;&#10;        const finalMinY = minY - padding;&#10;        const width = (maxX - minX) + (padding * 2);&#10;        const height = (maxY - minY) + (padding * 2);&#10;&#10;        setViewBox(`${finalMinX} ${finalMinY} ${width} ${height}`);&#10;        setBlocks(processedBlocks);&#10;    }, [layout]);&#10;&#10;    return (&#10;        &lt;Card className=&quot;flex flex-col&quot;&gt;&#10;            &lt;CardHeader&gt;&#10;                &lt;CardTitle&gt;{layout.name}&lt;/CardTitle&gt;&#10;                &lt;CardDescription&gt;&#10;                    Updated {formatDistanceToNow(new Date(parseInt(String(layout.updatedAt).split('.')[0]) * 1000), {addSuffix: true})}&#10;                &lt;/CardDescription&gt;&#10;                &lt;CardAction&gt;&#10;                    &lt;DropdownMenu&gt;&#10;                        &lt;DropdownMenuTrigger asChild&gt;&#10;                            &lt;Button variant=&quot;ghost&quot; size=&quot;icon&quot; className=&quot;h-8 w-8&quot;&gt;&#10;                                &lt;MoreVertical className=&quot;h-4 w-4&quot;/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/DropdownMenuTrigger&gt;&#10;                        &lt;DropdownMenuContent align=&quot;end&quot;&gt;&#10;                            &lt;DropdownMenuItem&#10;                                onClick={() =&gt; router.push(`/manage/organization/${layout.organizationId}/seating/${layout.id}`)}&gt;&#10;                                &lt;Edit className=&quot;mr-2 h-4 w-4&quot;/&gt; Edit&#10;                            &lt;/DropdownMenuItem&gt;&#10;                            &lt;DropdownMenuItem&#10;                                className=&quot;text-destructive&quot;&#10;                                onSelect={() =&gt; onDelete(layout.id, layout.name)}&#10;                            &gt;&#10;                                &lt;Trash2 className=&quot;mr-2 h-4 w-4&quot;/&gt; Delete&#10;                            &lt;/DropdownMenuItem&gt;&#10;                        &lt;/DropdownMenuContent&gt;&#10;                    &lt;/DropdownMenu&gt;&#10;                &lt;/CardAction&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;flex-grow flex items-center justify-center bg-muted/50 aspect-video p-4&quot;&gt;&#10;                &lt;svg viewBox={viewBox} className=&quot;w-full h-full&quot;&gt;&#10;                    {blocks.map(block =&gt; (&#10;                        &lt;rect&#10;                            key={block.id}&#10;                            x={block.position.x}&#10;                            y={block.position.y}&#10;                            width={block.width}&#10;                            height={block.height}&#10;                            rx=&quot;4&quot; // Rounded corners for the blocks&#10;                            className=&quot;fill-primary/20 stroke-primary&quot;&#10;                            strokeWidth=&quot;2&quot;&#10;                        /&gt;&#10;                    ))}&#10;                &lt;/svg&gt;&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    );&#10;}&#10;&#10;export default LayoutPreviewCard;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/providers/LimitProvider.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/providers/LimitProvider.ts" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, {createContext, useContext, useState, useEffect, ReactNode, useMemo} from 'react';&#10;import {useAuth} from '@/providers/AuthProvider';&#10;import {getAppConfiguration} from '@/lib/actions/configActions';&#10;import {AppConfig, TierLimitDetails, TierName} from '@/types/config';&#10;&#10;// Define the shape of the context&#10;interface LimitContextType {&#10;    config: AppConfig | null;&#10;    isLoading: boolean;&#10;    error: string | null;&#10;    currentUserTier: TierName;&#10;    currentUserTierLimits: TierLimitDetails | null;&#10;    getLimitsForTier: (tier: TierName) =&gt; TierLimitDetails | null;&#10;}&#10;&#10;const LimitContext = createContext&lt;LimitContextType | undefined&gt;(undefined);&#10;&#10;export const LimitProvider = ({children}: { children: ReactNode }) =&gt; {&#10;    const {keycloak} = useAuth();&#10;    const [config, setConfig] = useState&lt;AppConfig | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    // Fetch the entire configuration on initial application load&#10;    useEffect(() =&gt; {&#10;        const fetchConfig = async () =&gt; {&#10;            try {&#10;                const appConfig = await getAppConfiguration();&#10;                setConfig(appConfig);&#10;            } catch (err) {&#10;                setError('Failed to load application configuration. Some features may be unavailable.');&#10;                console.error(err);&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;        fetchConfig();&#10;    }, []);&#10;&#10;    // A memoized helper to get the current user's highest tier from their JWT&#10;    const currentUserTier = useMemo((): TierName =&gt; {&#10;        if (!keycloak?.tokenParsed?.user_groups || !Array.isArray(keycloak.tokenParsed.user_groups)) return 'FREE';&#10;&#10;        const userGroups: string[] = keycloak.tokenParsed.user_groups;&#10;        let highestTier: TierName = 'FREE';&#10;        let maxLevel = 0;&#10;&#10;        const tierLevels: Record&lt;TierName, number&gt; = {FREE: 0, PRO: 1, ENTERPRISE: 2};&#10;&#10;        userGroups.forEach(group =&gt; {&#10;            if (group.startsWith('/Tiers/')) {&#10;                const tierName = group.substring('/Tiers/'.length).toUpperCase() as TierName;&#10;                if (tierLevels[tierName] !== undefined &amp;&amp; tierLevels[tierName] &gt; maxLevel) {&#10;                    maxLevel = tierLevels[tierName];&#10;                    highestTier = tierName;&#10;                }&#10;            }&#10;        });&#10;        return highestTier;&#10;    }, [keycloak]);&#10;&#10;    // A memoized value for the current user's specific limits, derived from the full config&#10;    const currentUserTierLimits = useMemo(() =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[currentUserTier] || config.tierLimits.FREE;&#10;    }, [config, currentUserTier]);&#10;&#10;    // A function to get limits for any specified tier (useful for upgrade pages)&#10;    const getLimitsForTier = (tier: TierName): TierLimitDetails | null =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[tier] || null;&#10;    };&#10;&#10;    const value = {config, isLoading, error, currentUserTier, currentUserTierLimits, getLimitsForTier};&#10;&#10;    return (&#10;        &lt;LimitContext.Provider value={value}&gt;&#10;            {children}&#10;        &lt;/LimitContext.Provider&gt;&#10;    );&#10;};&#10;&#10;// The custom hook to easily access the limits from any component&#10;export const useLimits = (): LimitContextType =&gt; {&#10;    const context = useContext(LimitContext);&#10;    if (context === undefined) {&#10;        throw new Error('useLimits must be used within a LimitProvider');&#10;    }&#10;    return context;&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, {createContext, useContext, useState, useEffect, ReactNode, useMemo} from 'react';&#10;import {useAuth} from '@/providers/AuthProvider';&#10;import {getAppConfiguration} from '@/lib/actions/configActions';&#10;import {AppConfig, TierLimitDetails, TierName} from '@/types/config';&#10;&#10;// Define the shape of the context&#10;interface LimitContextType {&#10;    config: AppConfig | null;&#10;    isLoading: boolean;&#10;    error: string | null;&#10;    currentUserTier: TierName;&#10;    currentUserTierLimits: TierLimitDetails | null;&#10;    getLimitsForTier: (tier: TierName) =&gt; TierLimitDetails | null;&#10;}&#10;&#10;const LimitContext = createContext&lt;LimitContextType | undefined&gt;(undefined);&#10;&#10;export const LimitProvider = ({children}: { children: ReactNode }) =&gt; {&#10;    const {keycloak} = useAuth();&#10;    const [config, setConfig] = useState&lt;AppConfig | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    // Fetch the entire configuration on initial application load&#10;    useEffect(() =&gt; {&#10;        const fetchConfig = async () =&gt; {&#10;            try {&#10;                const appConfig = await getAppConfiguration();&#10;                setConfig(appConfig);&#10;            } catch (err) {&#10;                setError('Failed to load application configuration. Some features may be unavailable.');&#10;                console.error(err);&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;        fetchConfig();&#10;    }, []);&#10;&#10;    // A memoized helper to get the current user's highest tier from their JWT&#10;    const currentUserTier = useMemo((): TierName =&gt; {&#10;        if (!keycloak?.tokenParsed?.user_groups || !Array.isArray(keycloak.tokenParsed.user_groups)) return 'FREE';&#10;&#10;        const userGroups: string[] = keycloak.tokenParsed.user_groups;&#10;        let highestTier: TierName = 'FREE';&#10;        let maxLevel = 0;&#10;&#10;        const tierLevels: Record&lt;TierName, number&gt; = {FREE: 0, PRO: 1, ENTERPRISE: 2};&#10;&#10;        userGroups.forEach(group =&gt; {&#10;            if (group.startsWith('/Tiers/')) {&#10;                const tierName = group.substring('/Tiers/'.length).toUpperCase() as TierName;&#10;                if (tierLevels[tierName] !== undefined &amp;&amp; tierLevels[tierName] &gt; maxLevel) {&#10;                    maxLevel = tierLevels[tierName];&#10;                    highestTier = tierName;&#10;                }&#10;            }&#10;        });&#10;        return highestTier;&#10;    }, [keycloak]);&#10;&#10;    // A memoized value for the current user's specific limits, derived from the full config&#10;    const currentUserTierLimits = useMemo(() =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[currentUserTier] || config.tierLimits.FREE;&#10;    }, [config, currentUserTier]);&#10;&#10;    // A function to get limits for any specified tier (useful for upgrade pages)&#10;    const getLimitsForTier = (tier: TierName): TierLimitDetails | null =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[tier] || null;&#10;    };&#10;&#10;    const value = {config, isLoading, error, currentUserTier, currentUserTierLimits, getLimitsForTier};&#10;&#10;    return React.createElement(&#10;        LimitContext.Provider,&#10;        { value },&#10;        children&#10;    );&#10;};&#10;&#10;// The custom hook to easily access the limits from any component&#10;export const useLimits = (): LimitContextType =&gt; {&#10;    const context = useContext(LimitContext);&#10;    if (context === undefined) {&#10;        throw new Error('useLimits must be used within a LimitProvider');&#10;    }&#10;    return context;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>