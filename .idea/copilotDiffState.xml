<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/next.config.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/next.config.ts" />
              <option name="originalContent" value="import type {NextConfig} from &quot;next&quot;;&#10;&#10;const nextConfig: NextConfig = {&#10;    /* config options here */&#10;    images: {&#10;        remotePatterns: [&#10;            {&#10;                protocol: 'https',&#10;                hostname: 'images.unsplash.com',&#10;            },&#10;            {&#10;                protocol: 'http',&#10;                hostname: 'localhost',&#10;                port: '4566',&#10;                pathname: '/event-seating-uploads/**',&#10;            },&#10;            {&#10;                protocol: 'http',&#10;                hostname: 'event-seating-localstack'&#10;            },&#10;            {&#10;                protocol: 'https',&#10;                hostname: 'ticketly-storage.s3.amazonaws.com'&#10;" />
              <option name="updatedContent" value="import type {NextConfig} from &quot;next&quot;;&#10;&#10;const nextConfig: NextConfig = {&#10;    /* config options here */&#10;    images: {&#10;        remotePatterns: [&#10;            {&#10;                protocol: 'https',&#10;                hostname: 'images.unsplash.com',&#10;            },&#10;            {&#10;                protocol: 'http',&#10;                hostname: 'localhost',&#10;                port: '4566',&#10;                pathname: '/event-seating-uploads/**',&#10;            },&#10;            {&#10;                protocol: 'http',&#10;                hostname: 'event-seating-localstack'&#10;            },&#10;            {&#10;                protocol: 'https',&#10;                hostname: 'ticketly-storage.s3.amazonaws.com'&#10;            },&#10;            {&#10;                protocol: 'https',&#10;                hostname: 'ticketly-storage.s3.us-east-1.amazonaws.com'&#10;            }&#10;        ],&#10;    },&#10;    crossOrigin: 'use-credentials'&#10;};&#10;&#10;export default nextConfig;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/(home-app)/_components/CategorySection.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/(home-app)/_components/CategorySection.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import {CategoryResponseWithParentName} from &quot;@/types/category&quot;;&#10;import {useEffect, useState} from &quot;react&quot;;&#10;import {fetchParentCategories} from &quot;@/lib/actions/public/categoryActions&quot;;&#10;import {&#10;    BookOpen,&#10;    Music,&#10;    Brush, // Using Brush for 'Arts &amp; Theatre'&#10;    Utensils,&#10;    Dumbbell,&#10;    Users,&#10;    PartyPopper, // Example for Nightlife/Holidays&#10;    Briefcase, // Example for Business&#10;    Heart, // Example for Dating&#10;    Gamepad2, // Example for Hobbies&#10;} from &quot;lucide-react&quot;;&#10;    &quot;Nightlife&quot;: {icon: PartyPopper, color: &quot;text-indigo-500&quot;},&#10;    &quot;Holidays&quot;: {icon: PartyPopper, color: &quot;text-red-500&quot;},&#10;    &quot;Business&quot;: {icon: Briefcase, color: &quot;text-gray-600&quot;},&#10;    &quot;Dating&quot;: {icon: Heart, color: &quot;text-rose-500&quot;},&#10;    &quot;Hobbies&quot;: {icon: Gamepad2, color: &quot;text-cyan-500&quot;},&#10;};&#10;&#10;// --- Skeleton Component for a cleaner loading state ---&#10;const CategorySkeleton = () =&gt; (&#10;    &lt;div className=&quot;flex flex-col items-center gap-3 flex-shrink-0&quot;&gt;&#10;        &lt;div className=&quot;w-24 h-24 bg-muted rounded-full&quot;&gt;&lt;/div&gt;&#10;        &lt;div className=&quot;h-4 w-20 bg-muted rounded&quot;&gt;&lt;/div&gt;&#10;    &lt;/div&gt;&#10;);&#10;&#10;export default function CategorySection() {&#10;    const [categories, setCategories] = useState&lt;CategoryResponseWithParentName[]&gt;([]);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;        const loadCategories = async () =&gt; {&#10;                // Simulate network delay to see skeleton&#10;                // await new Promise(resolve =&gt; setTimeout(resolve, 1500));&#10;            } catch (err) {&#10;                console.error(&quot;Failed to fetch categories:&quot;, err);&#10;                setError(&quot;Failed to load categories. Please try again later.&quot;);&#10;            } finally {&#10;        };&#10;&#10;    }, []);&#10;&#10;    const handleCategoryClick = (categoryId: string) =&gt; {&#10;        console.log(&quot;Category clicked:&quot;, categoryId);&#10;    };&#10;        console.log(&quot;Category clicked:&quot;, categoryId);&#10;        // This can be extended later to navigate to category page or filter events&#10;        return (&#10;        console.log(&quot;Category clicked:&quot;, categoryId);&#10;                &lt;div className=&quot;container&quot;&gt;&#10;                    &lt;div className=&quot;flex gap-6 md:gap-8 overflow-x-auto pb-4 animate-pulse&quot;&gt;&#10;        console.log(&quot;Category clicked:&quot;, categoryId);&#10;                        ))}&#10;        console.log(&quot;Category clicked:&quot;, categoryId);&#10;        // This can be extended later to navigate to category page or filter events&#10;                &lt;/div&gt;&#10;            &lt;/section&gt;&#10;        console.log(&quot;Category clicked:&quot;, categoryId);&#10;    }&#10;        console.log(&quot;Category clicked:&quot;, categoryId);&#10;        // This can be extended later to navigate to category page or filter events&#10;    if (error) {&#10;        // This can be extended later to navigate to category page or filter events&#10;            &lt;section className=&quot;py-8&quot;&gt;&#10;                &lt;div className=&quot;container&quot;&gt;&#10;                    &lt;p className=&quot;text-center text-red-500&quot;&gt;{error}&lt;/p&gt;&#10;        console.log(&quot;Category clicked:&quot;, categoryId);&#10;            &lt;/section&gt;&#10;        );&#10;        console.log(&quot;Category clicked:&quot;, categoryId);&#10;        // This can be extended later to navigate to category page or filter events&#10;&#10;    // Note: You might need a scrollbar hiding plugin for Tailwind if you want to hide it completely&#10;        console.log(&quot;Category clicked:&quot;, categoryId);&#10;        // This can be extended later to navigate to category page or filter events&#10;    return (&#10;        console.log(&quot;Category clicked:&quot;, categoryId);&#10;        // This can be extended later to navigate to category page or filter events&#10;            &lt;div className=&quot;container&quot;&gt;&#10;        console.log(&quot;Category clicked:&quot;, categoryId);&#10;        // This can be extended later to navigate to category page or filter events&#10;                    {categories.map((category) =&gt; {&#10;        console.log(&quot;Category clicked:&quot;, categoryId);&#10;        // This can be extended later to navigate to category page or filter events&#10;        console.log(&quot;Category clicked:&quot;, categoryId);&#10;        // This can be extended later to navigate to category page or filter events&#10;        console.log(&quot;Category clicked:&quot;, categoryId);&#10;        // This can be extended later to navigate to category page or filter events&#10;                        };&#10;                        const IconComponent = config.icon;&#10;&#10;                        return (&#10;                            &lt;div&#10;                                key={category.id}&#10;                                className=&quot;flex flex-col items-center justify-start gap-3 group cursor-pointer&quot;&#10;                                onClick={() =&gt; handleCategoryClick(category.id)}&#10;                            &gt;&#10;                                &lt;div&#10;                                    className=&quot;w-24 h-24 rounded-full bg-slate-100 dark:bg-muted/50 border border-transparent&#10;                                               flex items-center justify-center transition-all duration-300 ease-in-out&#10;                                               group-hover:scale-110 group-hover:shadow-md group-hover:border-slate-200 dark:group-hover:border-muted&quot;&#10;                                &gt;&#10;                                    &lt;IconComponent className={`w-10 h-10 transition-colors ${config.color}`} /&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;h3 className=&quot;text-sm font-medium text-muted-foreground transition-colors group-hover:text-primary&quot;&gt;&#10;                                    {category.name}&#10;                                &lt;/h3&gt;&#10;                            &lt;/div&gt;&#10;                        );&#10;                    })}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/section&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import {CategoryResponseWithParentName} from &quot;@/types/category&quot;;&#10;import {useEffect, useState} from &quot;react&quot;;&#10;import {fetchParentCategories} from &quot;@/lib/actions/public/categoryActions&quot;;&#10;import {&#10;    BookOpen,&#10;    Music,&#10;    Brush, // Using Brush for 'Arts &amp; Theatre'&#10;    Utensils,&#10;    Dumbbell,&#10;    Users,&#10;    PartyPopper, // Example for Nightlife/Holidays&#10;    Briefcase, // Example for Business&#10;    Heart, // Example for Dating&#10;    Gamepad2, // Example for Hobbies&#10;} from &quot;lucide-react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;&#10;// --- Enhanced CATEGORY_CONFIG to better match the visual style ---&#10;// I've added more icons to demonstrate flexibility.&#10;// You can map your actual category names to these.&#10;const CATEGORY_CONFIG: Record&lt;string, { icon: React.ElementType; color: string }&gt; = {&#10;    // Keep your existing ones&#10;    &quot;Workshops &amp; Education&quot;: {icon: BookOpen, color: &quot;text-blue-500&quot;},&#10;    &quot;Music&quot;: {icon: Music, color: &quot;text-purple-500&quot;},&#10;    &quot;Arts &amp; Theatre&quot;: {icon: Brush, color: &quot;text-pink-500&quot;},&#10;    &quot;Performing &amp; Visual Arts&quot;: {icon: Brush, color: &quot;text-pink-500&quot;}, // Alias for consistency&#10;    &quot;Food &amp; Drink&quot;: {icon: Utensils, color: &quot;text-amber-500&quot;},&#10;    &quot;Sports &amp; Fitness&quot;: {icon: Dumbbell, color: &quot;text-green-500&quot;},&#10;    &quot;Community &amp; Social&quot;: {icon: Users, color: &quot;text-teal-500&quot;},&#10;&#10;    // Adding more based on common categories, similar to your image&#10;    &quot;Nightlife&quot;: {icon: PartyPopper, color: &quot;text-indigo-500&quot;},&#10;    &quot;Holidays&quot;: {icon: PartyPopper, color: &quot;text-red-500&quot;},&#10;    &quot;Business&quot;: {icon: Briefcase, color: &quot;text-gray-600&quot;},&#10;    &quot;Dating&quot;: {icon: Heart, color: &quot;text-rose-500&quot;},&#10;    &quot;Hobbies&quot;: {icon: Gamepad2, color: &quot;text-cyan-500&quot;},&#10;};&#10;&#10;// --- Skeleton Component for a cleaner loading state ---&#10;const CategorySkeleton = () =&gt; (&#10;    &lt;div className=&quot;flex flex-col items-center gap-3 flex-shrink-0&quot;&gt;&#10;        &lt;div className=&quot;w-24 h-24 bg-muted rounded-full&quot;&gt;&lt;/div&gt;&#10;        &lt;div className=&quot;h-4 w-20 bg-muted rounded&quot;&gt;&lt;/div&gt;&#10;    &lt;/div&gt;&#10;);&#10;&#10;export default function CategorySection() {&#10;    const [categories, setCategories] = useState&lt;CategoryResponseWithParentName[]&gt;([]);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;    const router = useRouter();&#10;&#10;    useEffect(() =&gt; {&#10;        const loadCategories = async () =&gt; {&#10;            try {&#10;                // Simulate network delay to see skeleton&#10;                // await new Promise(resolve =&gt; setTimeout(resolve, 1500));&#10;                const data = await fetchParentCategories();&#10;                setCategories(data);&#10;            } catch (err) {&#10;                console.error(&quot;Failed to fetch categories:&quot;, err);&#10;                setError(&quot;Failed to load categories. Please try again later.&quot;);&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;&#10;        loadCategories().then();&#10;    }, []);&#10;&#10;    const handleCategoryClick = (categoryId: string) =&gt; {&#10;        router.push(`/events?categoryId=${categoryId}`);&#10;    };&#10;&#10;    if (isLoading) {&#10;        return (&#10;            &lt;section className=&quot;py-8&quot;&gt;&#10;                &lt;div className=&quot;container&quot;&gt;&#10;                    &lt;div className=&quot;flex gap-6 md:gap-8 overflow-x-auto pb-4 animate-pulse&quot;&gt;&#10;                        {[...Array(8)].map((_, i) =&gt; (&#10;                            &lt;CategorySkeleton key={i} /&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/section&gt;&#10;        );&#10;    }&#10;&#10;    if (error) {&#10;        return (&#10;            &lt;section className=&quot;py-8&quot;&gt;&#10;                &lt;div className=&quot;container&quot;&gt;&#10;                    &lt;p className=&quot;text-center text-red-500&quot;&gt;{error}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/section&gt;&#10;        );&#10;    }&#10;&#10;    // Note: You might need a scrollbar hiding plugin for Tailwind if you want to hide it completely&#10;    // e.g., `tailwind-scrollbar-hide` and then add the `scrollbar-hide` class to the div below.&#10;    return (&#10;        &lt;section className=&quot;py-8&quot;&gt;&#10;            &lt;div className=&quot;container&quot;&gt;&#10;                &lt;div className=&quot;flex gap-4 md:gap-6 justify-center&quot;&gt;&#10;                    {categories.map((category) =&gt; {&#10;                        const config = CATEGORY_CONFIG[category.name] || {&#10;                            icon: BookOpen, // A sensible default&#10;                            color: &quot;text-gray-500&quot;&#10;                        };&#10;                        const IconComponent = config.icon;&#10;&#10;                        return (&#10;                            &lt;div&#10;                                key={category.id}&#10;                                className=&quot;flex flex-col items-center justify-start gap-3 group cursor-pointer&quot;&#10;                                onClick={() =&gt; handleCategoryClick(category.id)}&#10;                            &gt;&#10;                                &lt;div&#10;                                    className=&quot;w-24 h-24 rounded-full bg-slate-100 dark:bg-muted/50 border border-transparent&#10;                                               flex items-center justify-center transition-all duration-300 ease-in-out&#10;                                               group-hover:scale-110 group-hover:shadow-md group-hover:border-slate-200 dark:group-hover:border-muted&quot;&#10;                                &gt;&#10;                                    &lt;IconComponent className={`w-10 h-10 transition-colors ${config.color}`} /&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;h3 className=&quot;text-sm font-medium text-muted-foreground transition-colors group-hover:text-primary&quot;&gt;&#10;                                    {category.name}&#10;                                &lt;/h3&gt;&#10;                            &lt;/div&gt;&#10;                        );&#10;                    })}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/section&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/(home-app)/_utils/locations.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/(home-app)/_utils/locations.ts" />
              <option name="originalContent" value="export interface Location {&#10;    name: string;&#10;    latitude: number;&#10;    longitude: number;&#10;    imageUrl?: string;&#10;}&#10;&#10;// Expanded list of Sri Lankan locations with relevant images&#10;export const sriLankaLocations: Location[] = [&#10;    {&#10;        name: &quot;Colombo&quot;,&#10;        latitude: 6.9271,&#10;        longitude: 79.8612,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1546656495-fc838de15e5c?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8Y29sb21ib3xlbnwwfHwwfHx8MA%3D%3D&quot;&#10;    },&#10;    {&#10;        name: &quot;Kandy&quot;,&#10;        latitude: 7.2906,&#10;        longitude: 80.6337,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1665849050332-8d5d7e59afb6?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8a2FuZHl8ZW58MHx8MHx8fDA%3D&quot;&#10;    },&#10;    {&#10;        name: &quot;Galle&quot;,&#10;        latitude: 6.0535,&#10;        longitude: 80.2210,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1579989197111-928f586796a3?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8R2FsbGV8ZW58MHx8MHx8fDA%3D&quot;&#10;    },&#10;    {&#10;        name: &quot;Jaffna&quot;,&#10;        latitude: 9.6615,&#10;        longitude: 80.0255,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1725773682183-f0c885081ce5?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8NHx8SmFmZm5hfGVufDB8fDB8fHww&quot;&#10;    },&#10;    {&#10;        name: &quot;Nuwara Eliya&quot;,&#10;        latitude: 6.9497,&#10;        longitude: 80.7891,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1619974643633-12acfdcedd16?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8TnV3YXJhJTIwZWxpeWF8ZW58MHx8MHx8fDA%3D&quot;&#10;    },&#10;    {&#10;        name: &quot;Anuradhapura&quot;,&#10;        latitude: 8.3114,&#10;        longitude: 80.4037,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1712746547176-3a4812c63da8?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8QW51cmFkaGFwdXJhfGVufDB8fDB8fHww&quot;&#10;    },&#10;    {&#10;        name: &quot;Trincomalee&quot;,&#10;        latitude: 8.5874,&#10;        longitude: 81.2152,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1558446791-ac5fec3caddf?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8VHJpbmNvbWFsZWV8ZW58MHx8MHx8fDA%3D&quot;&#10;    },&#10;    {&#10;        name: &quot;Matara&quot;,&#10;        latitude: 5.9549,&#10;        longitude: 80.5550,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1607672996533-98ec2fb71625?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8TWF0YXJhfGVufDB8fDB8fHww&quot;&#10;    },&#10;    {&#10;        name: &quot;Ella&quot;,&#10;        latitude: 6.8667,&#10;        longitude: 81.0466,&#10;    },&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="export interface Location {&#10;    name: string;&#10;    latitude: number;&#10;    longitude: number;&#10;    imageUrl?: string;&#10;}&#10;&#10;// Expanded list of Sri Lankan locations with relevant images&#10;export const sriLankaLocations: Location[] = [&#10;    {&#10;        name: &quot;Colombo&quot;,&#10;        latitude: 6.9271,&#10;        longitude: 79.8612,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1546656495-fc838de15e5c?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8Y29sb21ib3xlbnwwfHwwfHx8MA%3D%3D&quot;&#10;    },&#10;    {&#10;        name: &quot;Kandy&quot;,&#10;        latitude: 7.2906,&#10;        longitude: 80.6337,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1665849050332-8d5d7e59afb6?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8a2FuZHl8ZW58MHx8MHx8fDA%3D&quot;&#10;    },&#10;    {&#10;        name: &quot;Galle&quot;,&#10;        latitude: 6.0535,&#10;        longitude: 80.2210,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1579989197111-928f586796a3?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8R2FsbGV8ZW58MHx8MHx8fDA%3D&quot;&#10;    },&#10;    {&#10;        name: &quot;Jaffna&quot;,&#10;        latitude: 9.6615,&#10;        longitude: 80.0255,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1725773682183-f0c885081ce5?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8NHx8SmFmZm5hfGVufDB8fDB8fHww&quot;&#10;    },&#10;    {&#10;        name: &quot;Nuwara Eliya&quot;,&#10;        latitude: 6.9497,&#10;        longitude: 80.7891,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1619974643633-12acfdcedd16?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8TnV3YXJhJTIwZWxpeWF8ZW58MHx8MHx8fDA%3D&quot;&#10;    },&#10;    {&#10;        name: &quot;Anuradhapura&quot;,&#10;        latitude: 8.3114,&#10;        longitude: 80.4037,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1712746547176-3a4812c63da8?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8QW51cmFkaGFwdXJhfGVufDB8fDB8fHww&quot;&#10;    },&#10;    {&#10;        name: &quot;Trincomalee&quot;,&#10;        latitude: 8.5874,&#10;        longitude: 81.2152,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1558446791-ac5fec3caddf?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8VHJpbmNvbWFsZWV8ZW58MHx8MHx8fDA%3D&quot;&#10;    },&#10;    {&#10;        name: &quot;Matara&quot;,&#10;        latitude: 5.9549,&#10;        longitude: 80.5550,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1607672996533-98ec2fb71625?w=600&amp;auto=format&amp;fit=crop&amp;q=60&amp;ixlib=rb-4.1.0&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8TWF0YXJhfGVufDB8fDB8fHww&quot;&#10;    },&#10;    {&#10;        name: &quot;Ella&quot;,&#10;        latitude: 6.8667,&#10;        longitude: 81.0466,&#10;    },&#10;    {&#10;        name: &quot;Ampara&quot;,&#10;        latitude: 7.2918,&#10;        longitude: 81.6720,&#10;    },&#10;    {&#10;        name: &quot;Badulla&quot;,&#10;        latitude: 6.9894,&#10;        longitude: 81.0550,&#10;    },&#10;    {&#10;        name: &quot;Batticaloa&quot;,&#10;        latitude: 7.7102,&#10;        longitude: 81.6924,&#10;    },&#10;    {&#10;        name: &quot;Gampaha&quot;,&#10;        latitude: 7.0917,&#10;        longitude: 80.0144,&#10;    },&#10;    {&#10;        name: &quot;Hambantota&quot;,&#10;        latitude: 6.1246,&#10;        longitude: 81.1185,&#10;    },&#10;    {&#10;        name: &quot;Kalutara&quot;,&#10;        latitude: 6.5836,&#10;        longitude: 79.9607,&#10;    },&#10;    {&#10;        name: &quot;Kegalle&quot;,&#10;        latitude: 7.2513,&#10;        longitude: 80.3464,&#10;    },&#10;    {&#10;        name: &quot;Kilinochchi&quot;,&#10;        latitude: 9.3932,&#10;        longitude: 80.3982,&#10;    },&#10;    {&#10;        name: &quot;Kurunegala&quot;,&#10;        latitude: 7.4863,&#10;        longitude: 80.3647,&#10;    },&#10;    {&#10;        name: &quot;Mannar&quot;,&#10;        latitude: 8.9770,&#10;        longitude: 79.9042,&#10;    },&#10;    {&#10;        name: &quot;Monaragala&quot;,&#10;        latitude: 6.8807,&#10;        longitude: 81.3452,&#10;    },&#10;    {&#10;        name: &quot;Mullaitivu&quot;,&#10;        latitude: 9.2671,&#10;        longitude: 80.8145,&#10;    },&#10;    {&#10;        name: &quot;Polonnaruwa&quot;,&#10;        latitude: 7.9403,&#10;        longitude: 81.0188,&#10;    },&#10;    {&#10;        name: &quot;Puttalam&quot;,&#10;        latitude: 8.0366,&#10;        longitude: 79.8286,&#10;    },&#10;    {&#10;        name: &quot;Ratnapura&quot;,&#10;        latitude: 6.6828,&#10;        longitude: 80.3992,&#10;    },&#10;    {&#10;        name: &quot;Vavuniya&quot;,&#10;        latitude: 8.7512,&#10;        longitude: 80.4982,&#10;    },&#10;];" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/(home-app)/events/[event_id]/[session_id]/_components/NonSellableBlock.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/(home-app)/events/[event_id]/[session_id]/_components/NonSellableBlock.tsx" />
              <option name="updatedContent" value="import {SeatingBlockDTO} from &quot;@/types/event&quot;;&#10;&#10;export const NonSellableBlock = ({block}: {block: SeatingBlockDTO}) =&gt; (&#10;    &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;        &lt;p className=&quot;text-sm text-muted-foreground font-medium&quot;&gt;{block.name}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;);&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/(home-app)/events/[event_id]/[session_id]/_components/SeatedGridBlock.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/(home-app)/events/[event_id]/[session_id]/_components/SeatedGridBlock.tsx" />
              <option name="updatedContent" value="import {SeatDTO, SeatingBlockDTO} from &quot;@/types/event&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {Badge} from &quot;@/components/ui/badge&quot;;&#10;import {cn} from &quot;@/lib/utils&quot;;&#10;import {ReadModelSeatStatus} from &quot;@/lib/validators/enums&quot;;&#10;import {SelectedSeat} from &quot;./SessionBooking&quot;;&#10;import {TooltipContent, TooltipTrigger, Tooltip} from &quot;@/components/ui/tooltip&quot;;&#10;&#10;export const SeatedGridBlock = ({block, selectedSeats, onSeatSelect}: {&#10;    block: SeatingBlockDTO;&#10;    selectedSeats?: SelectedSeat[];&#10;    onSeatSelect?: (seat: SeatDTO, blockName: string) =&gt; void;&#10;}) =&gt; (&#10;    &lt;&gt;&#10;        &lt;div className=&quot;text-sm font-medium mb-2 text-center text-foreground&quot;&gt;{block.name}&lt;/div&gt;&#10;        &lt;div&#10;            className=&quot;grid gap-1.5&quot;&#10;            style={{gridTemplateColumns: `repeat(${block.rows?.[0]?.seats?.length || 1}, minmax(0, 1fr))`}}&#10;        &gt;&#10;            {block.rows?.map(row =&gt;&#10;                row.seats.map(seat =&gt; {&#10;                    const seatStatus = seat.status || ReadModelSeatStatus.AVAILABLE;&#10;                    const isDisabled = seatStatus !== ReadModelSeatStatus.AVAILABLE;&#10;                    const isSelected = !!selectedSeats?.some(s =&gt; s.id === seat.id);&#10;&#10;                    return (&#10;                        &lt;Tooltip key={seat.id}&gt;&#10;                            &lt;TooltipTrigger asChild&gt;&#10;                                &lt;Button&#10;                                    type=&quot;button&quot;&#10;                                    variant=&quot;ghost&quot;&#10;                                    className={cn(&#10;                                        &quot;h-6 w-6 p-0 rounded-full text-xs font-mono transition-transform duration-200 hover:scale-110&quot;,&#10;                                        isDisabled ? &quot;opacity-30 cursor-not-allowed&quot; : &quot;cursor-pointer hover:brightness-105&quot;,&#10;                                        isSelected &amp;&amp; &quot;ring-2 ring-offset-2 ring-offset-background ring-primary&quot;&#10;                                    )}&#10;                                    style={{backgroundColor: seat.tier ? `${seat.tier.color}80` : undefined}}&#10;                                    disabled={isDisabled || !onSeatSelect}&#10;                                    onClick={() =&gt; onSeatSelect?.(seat, block.name)}&#10;                                &gt;&#10;                                    {seat.label}&#10;                                &lt;/Button&gt;&#10;                            &lt;/TooltipTrigger&gt;&#10;                            &lt;TooltipContent side=&quot;top&quot;&#10;                                            className=&quot;p-2 shadow-md border-border bg-popover&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                    &lt;Badge&#10;                                        variant={isDisabled ? 'destructive' : 'outline'}&#10;                                        className=&quot;text-xs px-1&quot;&#10;                                    &gt;&#10;                                        {seatStatus.replace('_', ' ')}&#10;                                    &lt;/Badge&gt;&#10;                                    {seat.tier &amp;&amp; (&#10;                                        &lt;&gt;&#10;                                            &lt;div className=&quot;flex items-center gap-1&quot;&gt;&#10;                                                &lt;div className=&quot;h-2 w-2 rounded-full&quot;&#10;                                                     style={{backgroundColor: seat.tier.color}}/&gt;&#10;                                                &lt;span className=&quot;text-xs&quot;&gt;{seat.tier.name}&lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;span&#10;                                                className=&quot;text-xs font-medium&quot;&gt;{new Intl.NumberFormat('en-LK', {&#10;                                                style: 'currency',&#10;                                                currency: 'LKR'&#10;                                            }).format(seat.tier.price)}&lt;/span&gt;&#10;                                        &lt;/&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            &lt;/TooltipContent&gt;&#10;                        &lt;/Tooltip&gt;&#10;                    );&#10;                })&#10;            )}&#10;        &lt;/div&gt;&#10;    &lt;/&gt;&#10;);&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/(home-app)/events/[event_id]/[session_id]/_components/SessionDetailsHeader.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/(home-app)/events/[event_id]/[session_id]/_components/SessionDetailsHeader.tsx" />
              <option name="originalContent" value="import {SessionInfoBasicDTO} from '@/types/event';&#10;import {Calendar, Clock, MapPin, ArrowLeft} from 'lucide-react';&#10;import Link from 'next/link';&#10;import {Button} from '@/components/ui/button';&#10;&#10;export const SessionDetailsHeader = ({session, eventId}: { session: SessionInfoBasicDTO, eventId?: string }) =&gt; {&#10;&#10;    const formatDate = (iso: string) =&gt; new Date(iso).toLocaleDateString(&quot;en-US&quot;, {&#10;        weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'&#10;    });&#10;    const formatTime = (iso: string) =&gt; new Date(iso).toLocaleTimeString(&quot;en-US&quot;, {&#10;        hour: '2-digit', minute: '2-digit', hour12: true&#10;    });&#10;&#10;    return (&#10;        &lt;div&gt;&#10;            {eventId &amp;&amp;&#10;                &lt;div className=&quot;flex items-center mb-2&quot;&gt;&#10;                    &lt;Link href={`/events/${eventId}`} passHref&gt;&#10;                        &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; className=&quot;gap-1 px-2 h-8&quot;&gt;&#10;                            &lt;ArrowLeft className=&quot;h-4 w-4&quot;/&gt;&#10;                            &lt;span&gt;All Sessions&lt;/span&gt;&#10;                        &lt;/Button&gt;&#10;                    &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;            }&#10;            &lt;h1 className=&quot;text-2xl sm:text-3xl font-bold tracking-tight text-foreground&quot;&gt;{'Session Details'}&lt;/h1&gt;&#10;            &lt;div className=&quot;mt-2 flex flex-wrap items-center gap-x-6 gap-y-2 text-muted-foreground&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&lt;Calendar&#10;                    className=&quot;h-4 w-4&quot;/&gt;&lt;span&gt;{formatDate(session.startTime)}&lt;/span&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&lt;Clock&#10;                    className=&quot;h-4 w-4&quot;/&gt;&lt;span&gt;{formatTime(session.startTime)} - {formatTime(session.endTime)}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                {session.sessionType === 'PHYSICAL' &amp;&amp;&#10;                    &lt;div className=&quot;flex items-center gap-2&quot;&gt;&lt;MapPin&#10;                        className=&quot;h-4 w-4&quot;/&gt;&lt;span&gt;{session.venueDetails.name}&lt;/span&gt;&lt;/div&gt;&#10;                }&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};" />
              <option name="updatedContent" value="import {SessionInfoBasicDTO} from '@/types/event';&#10;import {Calendar, Clock, MapPin, ArrowLeft} from 'lucide-react';&#10;import Link from 'next/link';&#10;import {Button} from '@/components/ui/button';&#10;import {SessionMap} from '@/app/(home-app)/events/[event_id]/_components/SessionMap';&#10;&#10;export const SessionDetailsHeader = ({session, eventId}: { session: SessionInfoBasicDTO, eventId?: string }) =&gt; {&#10;&#10;    const formatDate = (iso: string) =&gt; new Date(iso).toLocaleDateString(&quot;en-US&quot;, {&#10;        weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'&#10;    });&#10;    const formatTime = (iso: string) =&gt; new Date(iso).toLocaleTimeString(&quot;en-US&quot;, {&#10;        hour: '2-digit', minute: '2-digit', hour12: true&#10;    });&#10;&#10;    return (&#10;        &lt;div&gt;&#10;            {eventId &amp;&amp;&#10;                &lt;div className=&quot;flex items-center mb-2&quot;&gt;&#10;                    &lt;Link href={`/events/${eventId}`} passHref&gt;&#10;                        &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; className=&quot;gap-1 px-2 h-8&quot;&gt;&#10;                            &lt;ArrowLeft className=&quot;h-4 w-4&quot;/&gt;&#10;                            &lt;span&gt;All Sessions&lt;/span&gt;&#10;                        &lt;/Button&gt;&#10;                    &lt;/Link&gt;&#10;                &lt;/div&gt;&#10;            }&#10;            &lt;h1 className=&quot;text-2xl sm:text-3xl font-bold tracking-tight text-foreground&quot;&gt;{'Session Details'}&lt;/h1&gt;&#10;            &lt;div className=&quot;mt-2 flex flex-wrap items-center gap-x-6 gap-y-2 text-muted-foreground&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&lt;Calendar&#10;                    className=&quot;h-4 w-4&quot;/&gt;&lt;span&gt;{formatDate(session.startTime)}&lt;/span&gt;&lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&lt;Clock&#10;                    className=&quot;h-4 w-4&quot;/&gt;&lt;span&gt;{formatTime(session.startTime)} - {formatTime(session.endTime)}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                {session.sessionType === 'PHYSICAL' &amp;&amp;&#10;                    &lt;div className=&quot;flex items-center gap-2&quot;&gt;&lt;MapPin&#10;                        className=&quot;h-4 w-4&quot;/&gt;&lt;span&gt;{session.venueDetails.name}&lt;/span&gt;&lt;/div&gt;&#10;                }&#10;            &lt;/div&gt;&#10;&#10;            {/* Add map for physical events */}&#10;            {session.sessionType === 'PHYSICAL' &amp;&amp; session.venueDetails.location &amp;&amp; (&#10;                &lt;div className=&quot;mt-4 h-64 rounded-md overflow-hidden border&quot;&gt;&#10;                    &lt;SessionMap location={session.venueDetails.location} /&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/(home-app)/events/[event_id]/[session_id]/_components/StandingCapacityBlock.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/(home-app)/events/[event_id]/[session_id]/_components/StandingCapacityBlock.tsx" />
              <option name="updatedContent" value="import {SeatingBlockDTO, SeatDTO} from &quot;@/types/event&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {PlusIcon} from &quot;lucide-react&quot;;&#10;import {SelectedSeat} from &quot;./SessionBooking&quot;;&#10;import {ReadModelSeatStatus} from &quot;@/lib/validators/enums&quot;;&#10;&#10;function getAvailabilityPercentage(block: SeatingBlockDTO) {&#10;    if (block.type !== 'standing_capacity' || !block.capacity) return 100;&#10;    const reservedCount = block.seats?.filter(seat =&gt;&#10;        seat.status === 'RESERVED' ||&#10;        seat.status === 'BOOKED' ||&#10;        seat.status === 'LOCKED'&#10;    ).length || 0;&#10;    return Math.max(0, Math.min(100, ((block.capacity - reservedCount) / block.capacity) * 100));&#10;}&#10;&#10;function getStandingAreaTierColor(block: SeatingBlockDTO) {&#10;    if (block.type !== 'standing_capacity') return undefined;&#10;    return block.seats?.[0]?.tier?.color;&#10;}&#10;&#10;export const StandingCapacityBlock = ({block, selectedSeats, onSeatSelect}: {&#10;    block: SeatingBlockDTO;&#10;    selectedSeats?: SelectedSeat[];&#10;    onSeatSelect?: (seat: SeatDTO, blockName: string) =&gt; void;&#10;}) =&gt; {&#10;    const availabilityPercentage = getAvailabilityPercentage(block);&#10;    const tierColor = getStandingAreaTierColor(block);&#10;    const availableSeats = block.seats?.filter(seat =&gt;&#10;        (!seat.status || seat.status === ReadModelSeatStatus.AVAILABLE) &amp;&amp;&#10;        !selectedSeats?.some(s =&gt; s.id === seat.id)&#10;    ) || [];&#10;    const isDisabled = availableSeats.length === 0 || !onSeatSelect;&#10;    const handleQuickPick = () =&gt; {&#10;        if (isDisabled) return;&#10;        const randomIndex = Math.floor(Math.random() * availableSeats.length);&#10;        const randomSeat = availableSeats[randomIndex];&#10;        onSeatSelect?.(randomSeat, block.name);&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;relative flex flex-col items-center justify-between h-full w-full p-3&quot;&gt;&#10;            &lt;div className=&quot;absolute top-0 right-0&quot;&gt;&#10;                &lt;Button&#10;                    type=&quot;button&quot;&#10;                    size=&quot;icon&quot;&#10;                    variant=&quot;default&quot;&#10;                    className=&quot;h-8 w-8 shadow-xl&quot;&#10;                    disabled={isDisabled}&#10;                    onClick={handleQuickPick}&#10;                &gt;&#10;                    &lt;PlusIcon className=&quot;h-5 w-5&quot; /&gt;&#10;                &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;text-center mt-2&quot;&gt;&#10;                &lt;p className=&quot;font-medium text-foreground&quot;&gt;{block.name}&lt;/p&gt;&#10;                &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Capacity: {block.capacity || 0}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;w-full my-3 text-center&quot;&gt;&#10;                &lt;div className=&quot;w-full bg-muted rounded-full h-2.5&quot;&gt;&#10;                    &lt;div&#10;                        className=&quot;h-2.5 rounded-full transition-all&quot;&#10;                        style={{&#10;                            width: `${availabilityPercentage}%`,&#10;                            backgroundColor: tierColor || 'hsl(var(--primary))'&#10;                        }}&#10;                    /&gt;&#10;                &lt;/div&gt;&#10;                &lt;p className=&quot;text-xs mt-1 text-muted-foreground&quot;&gt;&#10;                    {availabilityPercentage &gt; 0 ? `${availabilityPercentage.toFixed(0)}% Available` : 'Sold Out'}&#10;                &lt;/p&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/(home-app)/events/[event_id]/_components/Hero.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/(home-app)/events/[event_id]/_components/Hero.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import Image from 'next/image';&#10;import {Tag} from 'lucide-react';&#10;import {Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious} from &quot;@/components/ui/carousel&quot;;&#10;import Autoplay from 'embla-carousel-autoplay';&#10;import {OrganizationResponse} from &quot;@/types/oraganizations&quot;;&#10;import {Avatar, AvatarFallback, AvatarImage} from &quot;@/components/ui/avatar&quot;;&#10;import {EventBasicInfoDTO} from &quot;@/types/event&quot;;&#10;&#10;export const ReviewEventHero: React.FC&lt;EventBasicInfoDTO&gt; = ({&#10;                                                                    title,&#10;                                                                    categoryName,&#10;                                                                    organization,&#10;                                                                    coverFiles&#10;                                                                }) =&gt; {&#10;&#10;    // Helper function to get image URL&#10;    const getImageUrl = (file: File | string): string =&gt; {&#10;        if (typeof file === 'string') {&#10;            return file; // Assuming it's already a URL&#10;        }&#10;        return URL.createObjectURL(file); // Create a local URL for the file&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            {coverFiles.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;w-full rounded-xl overflow-hidden&quot;&gt;&#10;                    &lt;Carousel plugins={[Autoplay({delay: 4000, stopOnInteraction: false})]}&gt;&#10;                        &lt;CarouselContent&gt;&#10;                            {coverFiles.map((file, index) =&gt; (&#10;                                &lt;CarouselItem key={index}&gt;&#10;                                    &lt;div className=&quot;aspect-[21/9] w-full relative&quot;&gt;&#10;                                        &lt;Image&#10;                                            src={getImageUrl(file)}&#10;                                            alt={`Cover photo ${index + 1}`}&#10;                                            fill&#10;                                            className=&quot;object-cover rounded-lg&quot;&#10;                                        /&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/CarouselItem&gt;&#10;                            ))}&#10;                        &lt;/CarouselContent&gt;&#10;                        &lt;CarouselPrevious className=&quot;absolute left-4&quot;/&gt;&#10;                        &lt;CarouselNext className=&quot;absolute right-4&quot;/&gt;&#10;                    &lt;/Carousel&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;&#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;                &lt;h1 className=&quot;text-4xl font-bold tracking-tight&quot;&gt;{title}&lt;/h1&gt;&#10;&#10;                &lt;div className=&quot;flex flex-wrap items-center gap-4 text-sm&quot;&gt;&#10;&#10;                    {organization?.name &amp;&amp; (&#10;                        &lt;div className=&quot;flex items-center gap-1&quot;&gt;&#10;                            &lt;Avatar className=&quot;h-6 w-6&quot;&gt;&#10;                                &lt;AvatarImage src={organization.logoUrl} alt={organization.name}/&gt;&#10;                                &lt;AvatarFallback&gt; {organization.name.charAt(0).toUpperCase()} &lt;/AvatarFallback&gt;&#10;                            &lt;/Avatar&gt;&#10;                            &lt;span&gt;By {organization.name}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;&#10;                    {categoryName &amp;&amp; (&#10;                        &lt;div className=&quot;flex items-center gap-1&quot;&gt;&#10;                            &lt;Tag className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                            &lt;span&gt;{categoryName}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import Image from 'next/image';&#10;import {Tag} from 'lucide-react';&#10;import {Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious} from &quot;@/components/ui/carousel&quot;;&#10;import Autoplay from 'embla-carousel-autoplay';&#10;import {Avatar, AvatarFallback, AvatarImage} from &quot;@/components/ui/avatar&quot;;&#10;import {EventBasicInfoDTO} from &quot;@/types/event&quot;;&#10;&#10;function getImageUrl(url: string) {&#10;    // If the URL is already absolute, use it directly&#10;    if (url.startsWith('http')) return url;&#10;    // Otherwise, treat as relative to public&#10;    return `/${url}`;&#10;}&#10;&#10;export const ReviewEventHero: React.FC&lt;{ event: EventBasicInfoDTO }&gt; = ({ event }) =&gt; {&#10;    const { title, overview, coverPhotos, organization, category } = event;&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            {coverPhotos &amp;&amp; coverPhotos.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;w-full rounded-xl overflow-hidden&quot;&gt;&#10;                    &lt;Carousel plugins={[Autoplay({delay: 4000, stopOnInteraction: false})]}&gt;&#10;                        &lt;CarouselContent&gt;&#10;                            {coverPhotos.map((url, index) =&gt; (&#10;                                &lt;CarouselItem key={index}&gt;&#10;                                    &lt;div className=&quot;aspect-[21/9] w-full relative&quot;&gt;&#10;                                        &lt;Image&#10;                                            src={getImageUrl(url)}&#10;                                            alt={`Cover photo ${index + 1}`}&#10;                                            fill&#10;                                            className=&quot;object-cover rounded-lg&quot;&#10;                                        /&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/CarouselItem&gt;&#10;                            ))}&#10;                        &lt;/CarouselContent&gt;&#10;                        &lt;CarouselPrevious className=&quot;absolute left-4&quot;/&gt;&#10;                        &lt;CarouselNext className=&quot;absolute right-4&quot;/&gt;&#10;                    &lt;/Carousel&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;            &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;                {organization &amp;&amp; (&#10;                    &lt;Avatar className=&quot;h-12 w-12 border flex-shrink-0&quot;&gt;&#10;                        &lt;AvatarImage src={organization.logoUrl || ''} alt={organization.name}/&gt;&#10;                        &lt;AvatarFallback&gt;{organization.name?.charAt(0).toUpperCase()}&lt;/AvatarFallback&gt;&#10;                    &lt;/Avatar&gt;&#10;                )}&#10;                &lt;div className=&quot;flex flex-col gap-1 min-w-0&quot;&gt;&#10;                    &lt;h1 className=&quot;text-2xl md:text-3xl font-bold truncate&quot;&gt;{title}&lt;/h1&gt;&#10;                    {category &amp;&amp; (&#10;                        &lt;div className=&quot;flex items-center gap-2 text-muted-foreground text-sm&quot;&gt;&#10;                            &lt;Tag className=&quot;w-4 h-4&quot;/&gt;&#10;                            &lt;span&gt;{category.name}&lt;/span&gt;&#10;                            {category.parentName &amp;&amp; &lt;span className=&quot;ml-2 text-xs&quot;&gt;({category.parentName})&lt;/span&gt;}&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            {overview &amp;&amp; (&#10;                &lt;div className=&quot;prose max-w-2xl text-muted-foreground&quot;&gt;&#10;                    {overview}&#10;                &lt;/div&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/(home-app)/events/[event_id]/_components/SeatingLayout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/(home-app)/events/[event_id]/_components/SeatingLayout.tsx" />
              <option name="originalContent" value="import {SeatDTO, SessionSeatingMapDTO} from &quot;@/types/event&quot;;&#10;import {SeatingBlock, SeatingBlockPreview} from &quot;@/app/(home-app)/events/[event_id]/_components/SeatingBlock&quot;;&#10;import {SelectedSeat} from &quot;@/app/(home-app)/events/[event_id]/_components/SessionBookingPage&quot;;&#10;&#10;&#10;export const SeatingLayoutPreview = ({seatingMap}: { seatingMap: SessionSeatingMapDTO }) =&gt; {&#10;    return (&#10;        &lt;div className=&quot;border rounded-lg p-4 bg-card&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold mb-4 text-foreground&quot;&gt;Seating Layout: {seatingMap.name}&lt;/h3&gt;&#10;            &lt;div&#10;                className=&quot;relative min-h-[400px] p-4 rounded-lg overflow-auto&quot;&#10;                // Elegant dot-grid background&#10;                style={{&#10;                    backgroundImage: 'radial-gradient(circle at 1px 1px, hsl(var(--muted)) 1px, transparent 0)',&#10;                    backgroundSize: '20px 20px'&#10;                }}&#10;            &gt;&#10;                {seatingMap.layout.blocks.map(block =&gt; (&#10;                    &lt;SeatingBlockPreview key={block.id} block={block}/&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export const SeatingLayout = ({&#10;                                  seatingMap,&#10;                                  selectedSeats,&#10;                                  onSeatSelect,&#10;                              }: {&#10;    seatingMap: SessionSeatingMapDTO;&#10;    selectedSeats?: SelectedSeat[]; // Make optional for reuse&#10;    onSeatSelect?: (seat: SeatDTO, blockName: string, rowLabel: string) =&gt; void; // Make optional for reuse&#10;}) =&gt; {&#10;    return (&#10;        &lt;div className=&quot;border rounded-lg p-4 bg-background/50&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold mb-4 text-foreground&quot;&gt;Seating Layout: {seatingMap.name}&lt;/h3&gt;&#10;            &lt;div&#10;                className=&quot;relative flex p-4 rounded-lg&quot;&#10;                style={{&#10;                    backgroundImage: 'radial-gradient(circle at 1px 1px, hsl(var(--muted)) 1px, transparent 0)',&#10;                    backgroundSize: '20px 20px',&#10;                }}&#10;            &gt;&#10;                {seatingMap.layout.blocks.map(block =&gt; (&#10;                    &lt;SeatingBlock&#10;                        key={block.id}&#10;                        block={block}&#10;                        selectedSeats={selectedSeats}&#10;                        onSeatSelect={onSeatSelect}&#10;                    /&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;" />
              <option name="updatedContent" value="import {SeatDTO, SessionSeatingMapDTO} from &quot;@/types/event&quot;;&#10;import {SeatingBlock, SeatingBlockPreview} from &quot;@/app/(home-app)/events/[event_id]/_components/SeatingBlock&quot;;&#10;import {SelectedSeat} from &quot;@/app/(home-app)/events/[event_id]/_components/SessionBookingPage&quot;;&#10;&#10;&#10;export const SeatingLayoutPreview = ({seatingMap}: { seatingMap: SessionSeatingMapDTO }) =&gt; {&#10;    return (&#10;        &lt;div className=&quot;border rounded-lg p-4 bg-card&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold mb-4 text-foreground&quot;&gt;Seating Layout: {seatingMap.name}&lt;/h3&gt;&#10;            &lt;div&#10;                className=&quot;relative p-4 rounded-lg overflow-auto&quot;&#10;                // Elegant dot-grid background&#10;                style={{&#10;                    backgroundImage: 'radial-gradient(circle at 1px 1px, hsl(var(--muted)) 1px, transparent 0)',&#10;                    backgroundSize: '20px 20px',&#10;                    height: 'auto',&#10;                    minHeight: '400px'&#10;                }}&#10;            &gt;&#10;                {seatingMap.layout.blocks.map(block =&gt; (&#10;                    &lt;SeatingBlockPreview key={block.id} block={block}/&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export const SeatingLayout = ({&#10;                                  seatingMap,&#10;                                  selectedSeats,&#10;                                  onSeatSelect,&#10;                              }: {&#10;    seatingMap: SessionSeatingMapDTO;&#10;    selectedSeats?: SelectedSeat[]; // Make optional for reuse&#10;    onSeatSelect?: (seat: SeatDTO, blockName: string, rowLabel: string) =&gt; void; // Make optional for reuse&#10;}) =&gt; {&#10;    // Find the furthest y coordinate plus the height of the block to determine the container height&#10;    const calculateRequiredHeight = () =&gt; {&#10;        let maxBottom = 0;&#10;        seatingMap.layout.blocks.forEach(block =&gt; {&#10;            const bottom = block.position.y + (block.height || 0);&#10;            if (bottom &gt; maxBottom) {&#10;                maxBottom = bottom;&#10;            }&#10;        });&#10;        // Add padding to ensure blocks aren't cut off&#10;        return maxBottom + 50;&#10;    };&#10;&#10;    const containerHeight = calculateRequiredHeight();&#10;&#10;    return (&#10;        &lt;div className=&quot;border rounded-lg p-4 bg-background/50&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold mb-4 text-foreground&quot;&gt;Seating Layout: {seatingMap.name}&lt;/h3&gt;&#10;            &lt;div&#10;                className=&quot;relative p-4 rounded-lg overflow-x-auto&quot;&#10;                style={{&#10;                    backgroundImage: 'radial-gradient(circle at 1px 1px, hsl(var(--muted)) 1px, transparent 0)',&#10;                    backgroundSize: '20px 20px',&#10;                    height: `${containerHeight}px`,&#10;                    overflowY: 'hidden'&#10;                }}&#10;            &gt;&#10;                {seatingMap.layout.blocks.map(block =&gt; (&#10;                    &lt;SeatingBlock&#10;                        key={block.id}&#10;                        block={block}&#10;                        selectedSeats={selectedSeats}&#10;                        onSeatSelect={onSeatSelect}&#10;                    /&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/(home-app)/events/[event_id]/_components/SessionMap.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/(home-app)/events/[event_id]/_components/SessionMap.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import React from 'react';&#10;import { MapContainer, TileLayer, Marker, Popup } from &quot;react-leaflet&quot;;&#10;import { Skeleton } from &quot;@/components/ui/skeleton&quot;;&#10;import &quot;leaflet/dist/leaflet.css&quot;;&#10;import L from &quot;leaflet&quot;;&#10;&#10;// Fix default marker icons (Leaflet requires this in React/Next.js setups)&#10;const defaultIcon = new L.Icon({&#10;    iconUrl:&#10;        &quot;https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png&quot;,&#10;    iconRetinaUrl:&#10;        &quot;https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png&quot;,&#10;    shadowUrl:&#10;        &quot;https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png&quot;,&#10;    iconSize: [25, 41],&#10;    iconAnchor: [12, 41],&#10;});&#10;L.Marker.prototype.options.icon = defaultIcon;&#10;&#10;export const SessionMap = ({ location }: { location: { coordinates: [number, number] } }) =&gt; {&#10;    // Handle SSR - don't render the map during server-side rendering&#10;    const [isMounted, setIsMounted] = React.useState(false);&#10;&#10;    React.useEffect(() =&gt; {&#10;        setIsMounted(true);&#10;    }, []);&#10;&#10;    if (!isMounted) {&#10;        return &lt;Skeleton className=&quot;h-64 w-full rounded-md&quot; /&gt;;&#10;    }&#10;&#10;    // Convert coordinates to Leaflet format [lat, lng]&#10;    // GeoJSON uses [longitude, latitude], but Leaflet uses [latitude, longitude]&#10;    const position: [number, number] = [location.coordinates[1], location.coordinates[0]];&#10;&#10;    return (&#10;        &lt;div className=&quot;h-full w-full rounded-md overflow-hidden z-0&quot;&gt;&#10;            &lt;MapContainer&#10;                center={position}&#10;                zoom={13}&#10;                scrollWheelZoom={false}&#10;                style={{ height: '100%', width: '100%' }}&#10;            &gt;&#10;                &lt;TileLayer&#10;                    attribution='&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors'&#10;                    url=&quot;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&quot;&#10;                /&gt;&#10;                &lt;Marker position={position}&gt;&#10;                    &lt;Popup&gt;Event Location&lt;/Popup&gt;&#10;                &lt;/Marker&gt;&#10;            &lt;/MapContainer&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;" />
              <option name="updatedContent" value="'use client'&#10;&#10;import React from 'react';&#10;import { MapContainer, TileLayer, Marker, Popup } from &quot;react-leaflet&quot;;&#10;import { Skeleton } from &quot;@/components/ui/skeleton&quot;;&#10;import &quot;leaflet/dist/leaflet.css&quot;;&#10;import L from &quot;leaflet&quot;;&#10;import { useTheme } from &quot;next-themes&quot;;&#10;&#10;// Fix default marker icons (Leaflet requires this in React/Next.js setups)&#10;const defaultIcon = new L.Icon({&#10;    iconUrl:&#10;        &quot;https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png&quot;,&#10;    iconRetinaUrl:&#10;        &quot;https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png&quot;,&#10;    shadowUrl:&#10;        &quot;https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png&quot;,&#10;    iconSize: [25, 41],&#10;    iconAnchor: [12, 41],&#10;});&#10;L.Marker.prototype.options.icon = defaultIcon;&#10;&#10;export const SessionMap = ({ location }: { location: { coordinates: [number, number] } }) =&gt; {&#10;    // Handle SSR - don't render the map during server-side rendering&#10;    const [isMounted, setIsMounted] = React.useState(false);&#10;    const { theme } = useTheme();&#10;    const isDarkMode = theme === &quot;dark&quot;;&#10;&#10;    React.useEffect(() =&gt; {&#10;        setIsMounted(true);&#10;    }, []);&#10;&#10;    if (!isMounted) {&#10;        return &lt;Skeleton className=&quot;h-64 w-full rounded-md&quot; /&gt;;&#10;    }&#10;&#10;    // Convert coordinates to Leaflet format [lat, lng]&#10;    // GeoJSON uses [longitude, latitude], but Leaflet uses [latitude, longitude]&#10;    const position: [number, number] = [location.coordinates[1], location.coordinates[0]];&#10;&#10;    // Dark mode tile layer from CartoDB&#10;    const darkTileUrl = &quot;https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png&quot;;&#10;    const darkAttribution = '&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors &amp;copy; &lt;a href=&quot;https://carto.com/attributions&quot;&gt;CARTO&lt;/a&gt;';&#10;    &#10;    // Light mode tile layer (default OpenStreetMap)&#10;    const lightTileUrl = &quot;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&quot;;&#10;    const lightAttribution = '&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors';&#10;&#10;    return (&#10;        &lt;div className=&quot;h-full w-full rounded-md overflow-hidden z-0&quot;&gt;&#10;            &lt;MapContainer&#10;                center={position}&#10;                zoom={13}&#10;                scrollWheelZoom={false}&#10;                style={{ height: '100%', width: '100%' }}&#10;            &gt;&#10;                &lt;TileLayer&#10;                    attribution={isDarkMode ? darkAttribution : lightAttribution}&#10;                    url={isDarkMode ? darkTileUrl : lightTileUrl}&#10;                /&gt;&#10;                &lt;Marker position={position}&gt;&#10;                    &lt;Popup&gt;Event Location&lt;/Popup&gt;&#10;                &lt;/Marker&gt;&#10;            &lt;/MapContainer&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/(home-app)/events/[event_id]/_components/SessionsNoPagination.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/(home-app)/events/[event_id]/_components/SessionsNoPagination.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useEffect, useState } from 'react';&#10;import { SessionInfoBasicDTO } from &quot;@/types/event&quot;;&#10;import { getEventSessionsInRange } from '@/lib/actions/public/eventActions';&#10;import { CalendarIcon } from &quot;lucide-react&quot;;&#10;import { SessionItem } from &quot;@/app/(home-app)/events/[event_id]/_components/SessionItem&quot;;&#10;&#10;const SessionsNoPagination = ({ eventId }: { eventId: string }) =&gt; {&#10;    const [sessions, setSessions] = useState&lt;SessionInfoBasicDTO[] | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;&#10;    useEffect(() =&gt; {&#10;        const fetchSessions = async () =&gt; {&#10;            setIsLoading(true);&#10;            &#10;            // Get current date and a date one month from now&#10;            const fromDate = new Date().toISOString();&#10;            const toDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString();&#10;            &#10;            try {&#10;                const data = await getEventSessionsInRange({ eventId, fromDate, toDate });&#10;                setSessions(data);&#10;            } catch (error) {&#10;                console.error(&quot;Failed to fetch sessions&quot;, error);&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;        &#10;        fetchSessions();&#10;    }, [eventId]);&#10;&#10;    return (&#10;        &lt;div id=&quot;sessions-section&quot; className=&quot;max-w-7xl mx-auto space-y-4 scroll-mt-16&quot;&gt;&#10;            &lt;h2 className=&quot;text-2xl font-bold text-foreground flex items-center gap-2&quot;&gt;&#10;                &lt;CalendarIcon className=&quot;w-6 h-6&quot;/&gt; Available Sessions&#10;            &lt;/h2&gt;&#10;            {isLoading ? (&#10;                &lt;div&gt;Loading sessions...&lt;/div&gt;&#10;            ) : sessions &amp;&amp; sessions.length &gt; 0 ? (&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {sessions.map(session =&gt; (&#10;                        &lt;SessionItem key={session.id} session={session} /&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;            ) : (&#10;                &lt;div&gt;No upcoming sessions available.&lt;/div&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export default SessionsNoPagination;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/_components/review/ReviewTicketTiers.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/_components/review/ReviewTicketTiers.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {Card, CardContent, CardTitle} from '@/components/ui/card';&#10;import {Tier} from '@/lib/validators/event';&#10;&#10;interface ReviewTicketTiersProps {&#10;    tiers: Tier[];&#10;}&#10;&#10;export const ReviewTicketTiers: React.FC&lt;ReviewTicketTiersProps&gt; = ({tiers}) =&gt; {&#10;    if (tiers.length === 0) return null;&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;h2 className=&quot;text-2xl font-semibold&quot;&gt;Ticket Options&lt;/h2&gt;&#10;            &lt;div className=&quot;grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3&quot;&gt;&#10;                {tiers.map(tier =&gt; (&#10;                    &lt;TicketTierCard key={tier.id} tier={tier}/&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;interface TicketTierCardProps {&#10;    tier: Tier;&#10;}&#10;&#10;export const TicketTierCard: React.FC&lt;TicketTierCardProps&gt; = ({tier}) =&gt; {&#10;    return (&#10;        &lt;Card className=&quot;overflow-hidden&quot;&gt;&#10;            &lt;div&#10;                className=&quot;h-2&quot;&#10;                style={{backgroundColor: tier.color || '#6b7280'}}&#10;            /&gt;&#10;            &lt;CardContent className=&quot;p-6&quot;&gt;&#10;                &lt;CardTitle className=&quot;mb-2&quot;&gt;{tier.name}&lt;/CardTitle&gt;&#10;                &lt;div className=&quot;flex justify-between items-center mt-4&quot;&gt;&#10;                    &lt;span className=&quot;text-2xl font-bold&quot;&gt;${tier.price.toFixed(2)}&lt;/span&gt;&#10;                    {/*&lt;Button variant=&quot;secondary&quot; size=&quot;sm&quot; disabled&gt;Select&lt;/Button&gt;*/}&#10;                &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    );&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {Card, CardContent, CardTitle} from '@/components/ui/card';&#10;import {Tier} from '@/lib/validators/event';&#10;&#10;interface ReviewTicketTiersProps {&#10;    tiers: Tier[];&#10;}&#10;&#10;export const ReviewTicketTiers: React.FC&lt;ReviewTicketTiersProps&gt; = ({tiers}) =&gt; {&#10;    if (tiers.length === 0) return null;&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;h2 className=&quot;text-2xl font-semibold&quot;&gt;Ticket Options&lt;/h2&gt;&#10;            &lt;div className=&quot;grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3&quot;&gt;&#10;                {tiers.map(tier =&gt; (&#10;                    &lt;TicketTierCard key={tier.id} tier={tier}/&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;interface TicketTierCardProps {&#10;    tier: Tier;&#10;}&#10;&#10;export const TicketTierCard: React.FC&lt;TicketTierCardProps&gt; = ({tier}) =&gt; {&#10;    return (&#10;        &lt;Card className=&quot;overflow-hidden&quot;&gt;&#10;            &lt;div&#10;                className=&quot;h-2&quot;&#10;                style={{backgroundColor: tier.color || '#6b7280'}}&#10;            /&gt;&#10;            &lt;CardContent className=&quot;p-6&quot;&gt;&#10;                &lt;CardTitle className=&quot;mb-2&quot;&gt;{tier.name}&lt;/CardTitle&gt;&#10;                &lt;div className=&quot;flex justify-between items-center mt-4&quot;&gt;&#10;                    &lt;span className=&quot;text-2xl font-bold&quot;&gt;LKR {tier.price.toFixed(2)}&lt;/span&gt;&#10;                    {/*&lt;Button variant=&quot;secondary&quot; size=&quot;sm&quot; disabled&gt;Select&lt;/Button&gt;*/}&#10;                &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/edit/_components/LogoManagementCard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/edit/_components/LogoManagementCard.tsx" />
              <option name="originalContent" value="import {useOrganization} from &quot;@/providers/OrganizationProvider&quot;;&#10;import {useRef} from &quot;react&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from &quot;@/components/ui/card&quot;;&#10;import {Avatar, AvatarFallback, AvatarImage} from &quot;@/components/ui/avatar&quot;;&#10;import {Building, Trash2, Upload} from &quot;lucide-react&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {OrganizationResponse} from &quot;@/types/oraganizations&quot;;&#10;import {Input} from &quot;@/components/ui/input&quot;;&#10;import {compressImage} from &quot;@/lib/imageUtils&quot;;&#10;&#10;interface LogoManagementCardProps {&#10;    organization: OrganizationResponse;&#10;    onUpdate: () =&gt; void;&#10;}&#10;&#10;function LogoManagementCard({organization, onUpdate}: LogoManagementCardProps) {&#10;    const {uploadLogo, removeLogo} = useOrganization();&#10;    const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    const handleUploadClick = () =&gt; {&#10;        fileInputRef.current?.click();&#10;    };&#10;&#10;    const handleFileChange = async (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        const file = event.target.files?.[0];&#10;        if (!file) return;&#10;&#10;        // Basic file validation&#10;        if (file.size &gt; 5 * 1024 * 1024) { // 5MB limit&#10;            toast.error('File size must be less than 5MB');&#10;            return;&#10;        }&#10;&#10;        try {&#10;            // Logo-specific compression options&#10;            const logoCompressionOptions = {&#10;                maxSizeMB: 0.3,           // Lower size limit for logos (300KB)&#10;                maxWidthOrHeight: 512,    // Smaller dimensions suitable for logos&#10;                useWebWorker: true,&#10;                // Preserve PNG format for transparency if the uploaded file is PNG&#10;                fileType: file.type === 'image/png' ? 'image/png' : 'image/jpeg'&#10;            };&#10;&#10;            // Compress the image with logo-specific options&#10;            const compressedFile = await compressImage(file, logoCompressionOptions);&#10;&#10;            toast.promise(uploadLogo(organization.id, compressedFile), {&#10;                loading: 'Uploading logo...',&#10;                success: ( ) =&gt; {&#10;                    onUpdate();&#10;                    return 'Logo uploaded successfully!';&#10;                },&#10;                error: (err) =&gt; err.message || 'Failed to upload logo.',&#10;            });&#10;        } finally {&#10;            // Reset file input&#10;            if (fileInputRef.current) {&#10;                fileInputRef.current.value = '';&#10;            }&#10;        }&#10;    };&#10;&#10;    const handleRemoveLogo = async () =&gt; {&#10;        toast.promise(removeLogo(organization.id), {&#10;            loading: 'Removing logo...',&#10;            success: () =&gt; {&#10;                onUpdate();&#10;                return 'Logo removed successfully.';&#10;            },&#10;            error: (err) =&gt; err.message || 'Failed to remove logo.',&#10;        });&#10;    };&#10;&#10;    const getInitials = (name: string) =&gt; {&#10;        return name&#10;            .split(' ')&#10;            .map(word =&gt; word.charAt(0))&#10;            .join('')&#10;            .toUpperCase()&#10;            .slice(0, 2);&#10;    };&#10;&#10;    return (&#10;        &lt;Card className=&quot;w-full max-w-md&quot;&gt;&#10;            &lt;CardHeader className=&quot;text-center pb-4&quot;&gt;&#10;                &lt;CardTitle className=&quot;text-lg&quot;&gt;Organization Logo&lt;/CardTitle&gt;&#10;                &lt;CardDescription&gt;&#10;                    Upload a logo to represent your organization&#10;                &lt;/CardDescription&gt;&#10;            &lt;/CardHeader&gt;&#10;&#10;            &lt;CardContent className=&quot;flex flex-col items-center space-y-6&quot;&gt;&#10;                &lt;div className=&quot;relative group&quot;&gt;&#10;                    &lt;Avatar&#10;                        className=&quot;h-24 w-24 ring-2 ring-border ring-offset-2 transition-all group-hover:ring-primary/50&quot;&gt;&#10;                        &lt;AvatarImage&#10;                            src={organization.logoUrl || undefined}&#10;                            alt={`${organization.name} logo`}&#10;                            className=&quot;object-cover&quot;&#10;                        /&gt;&#10;                        &lt;AvatarFallback className=&quot;bg-muted text-muted-foreground text-lg font-medium&quot;&gt;&#10;                            {organization.logoUrl ? (&#10;                                &lt;Building className=&quot;h-8 w-8&quot;/&gt;&#10;                            ) : (&#10;                                getInitials(organization.name)&#10;                            )}&#10;                        &lt;/AvatarFallback&gt;&#10;                    &lt;/Avatar&gt;&#10;&#10;                    {/* Optional: Upload overlay on hover */}&#10;                    &lt;div&#10;                        className=&quot;absolute inset-0 flex items-center justify-center bg-black/50 rounded-full opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer&quot;&#10;                        onClick={handleUploadClick}&gt;&#10;                        &lt;Upload className=&quot;h-6 w-6 text-white&quot;/&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex flex-col justify-center sm:flex-row items-center gap-3 w-full&quot;&gt;&#10;                    &lt;Input&#10;                        type=&quot;file&quot;&#10;                        ref={fileInputRef}&#10;                        onChange={handleFileChange}&#10;                        className=&quot;hidden&quot;&#10;                        accept=&quot;image/png,image/jpeg,image/jpg,image/webp&quot;&#10;                    /&gt;&#10;&#10;                    &lt;Button&#10;                        variant=&quot;outline&quot;&#10;                        onClick={handleUploadClick}&#10;                        className=&quot;w-full sm:w-auto&quot;&#10;                    &gt;&#10;                        &lt;Upload className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;                        {organization.logoUrl ? 'Change Logo' : 'Upload Logo'}&#10;                    &lt;/Button&gt;&#10;&#10;                    {organization.logoUrl &amp;&amp; (&#10;                        &lt;Button&#10;                            variant=&quot;ghost&quot;&#10;                            size=&quot;sm&quot;&#10;                            className=&quot;text-destructive hover:text-destructive hover:bg-destructive/10 w-full sm:w-auto&quot;&#10;                            onClick={handleRemoveLogo}&#10;                        &gt;&#10;                            &lt;Trash2 className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;                            Remove&#10;                        &lt;/Button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;p className=&quot;text-xs text-muted-foreground text-center&quot;&gt;&#10;                    Supports PNG, JPG, JPEG, WebP. Max file size: 5MB (will be compressed to ~1MB)&#10;                &lt;/p&gt;&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    );&#10;}&#10;&#10;export {LogoManagementCard};" />
              <option name="updatedContent" value="import {useOrganization} from &quot;@/providers/OrganizationProvider&quot;;&#10;import {useRef} from &quot;react&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from &quot;@/components/ui/card&quot;;&#10;import {Avatar, AvatarFallback, AvatarImage} from &quot;@/components/ui/avatar&quot;;&#10;import {Building, Trash2, Upload} from &quot;lucide-react&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {OrganizationResponse} from &quot;@/types/oraganizations&quot;;&#10;import {Input} from &quot;@/components/ui/input&quot;;&#10;import {compressImage} from &quot;@/lib/imageUtils&quot;;&#10;&#10;interface LogoManagementCardProps {&#10;    organization: OrganizationResponse;&#10;    onUpdate: () =&gt; void;&#10;}&#10;&#10;function LogoManagementCard({organization, onUpdate}: LogoManagementCardProps) {&#10;    const {uploadLogo, removeLogo} = useOrganization();&#10;    const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    const handleUploadClick = () =&gt; {&#10;        fileInputRef.current?.click();&#10;    };&#10;&#10;    const handleFileChange = async (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        const file = event.target.files?.[0];&#10;        if (!file) return;&#10;&#10;        // Basic file validation&#10;        if (file.size &gt; 5 * 1024 * 1024) { // 5MB limit&#10;            toast.error('File size must be less than 5MB');&#10;            return;&#10;        }&#10;&#10;        try {&#10;            // Logo-specific compression options&#10;            const logoCompressionOptions = {&#10;                maxSizeMB: 0.3,           // Lower size limit for logos (300KB)&#10;                maxWidthOrHeight: 512,    // Smaller dimensions suitable for logos&#10;                useWebWorker: true,&#10;                // Preserve PNG format for transparency if the uploaded file is PNG&#10;                fileType: file.type === 'image/png' ? 'image/png' : 'image/jpeg'&#10;            };&#10;            &#10;            // Compress the image with logo-specific options&#10;            const compressedFile = await compressImage(file, logoCompressionOptions);&#10;            &#10;            toast.promise(uploadLogo(organization.id, compressedFile), {&#10;                loading: 'Uploading logo...',&#10;                success: ( ) =&gt; {&#10;                    onUpdate();&#10;                    return 'Logo uploaded successfully!';&#10;                },&#10;                error: (err) =&gt; err.message || 'Failed to upload logo.',&#10;            });&#10;        } finally {&#10;            // Reset file input&#10;            if (fileInputRef.current) {&#10;                fileInputRef.current.value = '';&#10;            }&#10;        }&#10;    };&#10;&#10;    const handleRemoveLogo = async () =&gt; {&#10;        toast.promise(removeLogo(organization.id), {&#10;            loading: 'Removing logo...',&#10;            success: () =&gt; {&#10;                onUpdate();&#10;                return 'Logo removed successfully.';&#10;            },&#10;            error: (err) =&gt; err.message || 'Failed to remove logo.',&#10;        });&#10;    };&#10;&#10;    const getInitials = (name: string) =&gt; {&#10;        return name&#10;            .split(' ')&#10;            .map(word =&gt; word.charAt(0))&#10;            .join('')&#10;            .toUpperCase()&#10;            .slice(0, 2);&#10;    };&#10;&#10;    return (&#10;        &lt;Card className=&quot;w-full max-w-md&quot;&gt;&#10;            &lt;CardHeader className=&quot;text-center pb-4&quot;&gt;&#10;                &lt;CardTitle className=&quot;text-lg&quot;&gt;Organization Logo&lt;/CardTitle&gt;&#10;                &lt;CardDescription&gt;&#10;                    Upload a logo to represent your organization&#10;                &lt;/CardDescription&gt;&#10;            &lt;/CardHeader&gt;&#10;&#10;            &lt;CardContent className=&quot;flex flex-col items-center space-y-6&quot;&gt;&#10;                &lt;div className=&quot;relative group&quot;&gt;&#10;                    &lt;Avatar&#10;                        className=&quot;h-24 w-24 ring-2 ring-border ring-offset-2 transition-all group-hover:ring-primary/50&quot;&gt;&#10;                        &lt;AvatarImage&#10;                            src={organization.logoUrl || undefined}&#10;                            alt={`${organization.name} logo`}&#10;                            className=&quot;object-cover&quot;&#10;                        /&gt;&#10;                        &lt;AvatarFallback className=&quot;bg-muted text-muted-foreground text-lg font-medium&quot;&gt;&#10;                            {organization.logoUrl ? (&#10;                                &lt;Building className=&quot;h-8 w-8&quot;/&gt;&#10;                            ) : (&#10;                                getInitials(organization.name)&#10;                            )}&#10;                        &lt;/AvatarFallback&gt;&#10;                    &lt;/Avatar&gt;&#10;&#10;                    {/* Optional: Upload overlay on hover */}&#10;                    &lt;div&#10;                        className=&quot;absolute inset-0 flex items-center justify-center bg-black/50 rounded-full opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer&quot;&#10;                        onClick={handleUploadClick}&gt;&#10;                        &lt;Upload className=&quot;h-6 w-6 text-white&quot;/&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex flex-col justify-center sm:flex-row items-center gap-3 w-full&quot;&gt;&#10;                    &lt;Input&#10;                        type=&quot;file&quot;&#10;                        ref={fileInputRef}&#10;                        onChange={handleFileChange}&#10;                        className=&quot;hidden&quot;&#10;                        accept=&quot;image/png,image/jpeg,image/jpg,image/webp&quot;&#10;                    /&gt;&#10;&#10;                    &lt;Button&#10;                        variant=&quot;outline&quot;&#10;                        onClick={handleUploadClick}&#10;                        className=&quot;w-full sm:w-auto&quot;&#10;                    &gt;&#10;                        &lt;Upload className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;                        {organization.logoUrl ? 'Change Logo' : 'Upload Logo'}&#10;                    &lt;/Button&gt;&#10;&#10;                    {organization.logoUrl &amp;&amp; (&#10;                        &lt;Button&#10;                            variant=&quot;ghost&quot;&#10;                            size=&quot;sm&quot;&#10;                            className=&quot;text-destructive hover:text-destructive hover:bg-destructive/10 w-full sm:w-auto&quot;&#10;                            onClick={handleRemoveLogo}&#10;                        &gt;&#10;                            &lt;Trash2 className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;                            Remove&#10;                        &lt;/Button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;p className=&quot;text-xs text-muted-foreground text-center&quot;&gt;&#10;                    Supports PNG, JPG, JPEG, WebP. Max file size: 5MB (will be compressed to ~300KB)&#10;                &lt;/p&gt;&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    );&#10;}&#10;&#10;export {LogoManagementCard};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/CoreDetailsStep.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/CoreDetailsStep.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useFormContext} from 'react-hook-form'; // Use context instead of creating new form&#10;import {useOrganization} from '@/providers/OrganizationProvider';&#10;import {useLimits} from '@/providers/LimitProvider';&#10;import {CategoryResponse} from '@/types/category';&#10;import {getAllCategories} from '@/lib/actions/categoryActions';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Textarea} from '@/components/ui/textarea';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;import {&#10;    Select,&#10;    SelectContent,&#10;    SelectItem,&#10;    SelectTrigger,&#10;    SelectValue,&#10;    SelectGroup,&#10;    SelectLabel&#10;} from '@/components/ui/select';&#10;import {Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious} from &quot;@/components/ui/carousel&quot;;&#10;import Image from 'next/image';&#10;import {ImageIcon, X, PlusCircle, Upload} from 'lucide-react';&#10;import {toast} from 'sonner';&#10;import Autoplay from 'embla-carousel-autoplay';&#10;import {CreateEventFormData} from &quot;@/lib/validators/event&quot;;&#10;&#10;interface CoreDetailsStepProps {&#10;    coverFiles: File[];&#10;    setCoverFilesAction: React.Dispatch&lt;React.SetStateAction&lt;File[]&gt;&gt;&#10;}&#10;&#10;export function CoreDetailsStep({coverFiles, setCoverFilesAction}: CoreDetailsStepProps) {&#10;    const {organization} = useOrganization();&#10;    const {myLimits} = useLimits();&#10;    const [categories, setCategories] = useState&lt;CategoryResponse[]&gt;([]);&#10;    const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    // ✅ Use the form context from parent instead of creating a new form&#10;    const {control, setValue} = useFormContext&lt;CreateEventFormData&gt;();&#10;&#10;    const maxPhotos = myLimits?.eventLimits.maxCoverPhotos || 1;&#10;&#10;    useEffect(() =&gt; {&#10;        getAllCategories().then(setCategories);&#10;    }, [organization]);&#10;&#10;    const handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        if (e.target.files) {&#10;            const files = Array.from(e.target.files);&#10;            if ((coverFiles.length + files.length) &gt; maxPhotos) {&#10;                toast.error(`You can only upload a maximum of ${maxPhotos} photos.`);&#10;                return;&#10;            }&#10;            setCoverFilesAction(prev =&gt; [...prev, ...files]);&#10;        }&#10;    };&#10;&#10;    const removeImage = (index: number) =&gt; {&#10;        setCoverFilesAction(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-8&quot;&gt;&#10;            {/* Hero Cover Photos Section */}&#10;            &lt;Card&gt;&#10;                &lt;CardHeader&gt;&#10;                    &lt;CardTitle&gt;Cover Photos&lt;/CardTitle&gt;&#10;                    &lt;CardDescription&gt;This is the first thing people will see. Upload up&#10;                        to {maxPhotos} images.&lt;/CardDescription&gt;&#10;                &lt;/CardHeader&gt;&#10;                &lt;CardContent&gt;&#10;                    {coverFiles.length &gt; 0 ? (&#10;                        &lt;Carousel plugins={[Autoplay({delay: 4000, stopOnInteraction: false})]}&gt;&#10;                            &lt;CarouselContent&gt;&#10;                                {coverFiles.map((file, index) =&gt; (&#10;                                    &lt;CarouselItem key={index} className=&quot;relative&quot;&gt;&#10;                                        &lt;div className=&quot;aspect-[21/9] w-full relative&quot;&gt;&#10;                                            &lt;Image src={URL.createObjectURL(file)} alt={`Cover photo ${index + 1}`}&#10;                                                   fill className=&quot;object-cover rounded-lg&quot;/&gt;&#10;                                            &lt;Button type=&quot;button&quot; variant=&quot;destructive&quot; size=&quot;icon&quot;&#10;                                                    className=&quot;absolute top-4 right-4 h-8 w-8 z-10&quot;&#10;                                                    onClick={() =&gt; removeImage(index)}&gt;&lt;X&#10;                                                className=&quot;h-4 w-4&quot;/&gt;&lt;/Button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/CarouselItem&gt;&#10;                                ))}&#10;                            &lt;/CarouselContent&gt;&#10;                            &lt;CarouselPrevious type=&quot;button&quot;&#10;                                              className=&quot;absolute left-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                            &lt;CarouselNext type=&quot;button&quot;&#10;                                          className=&quot;absolute right-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                        &lt;/Carousel&gt;&#10;                    ) : (&#10;                        &lt;div&#10;                            className=&quot;flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-12 text-center aspect-[21/9] w-full&quot;&gt;&#10;                            &lt;ImageIcon className=&quot;h-16 w-16 text-muted-foreground&quot;/&gt;&#10;                            &lt;p className=&quot;mt-4 text-lg font-medium&quot;&gt;Add cover photos for your event&lt;/p&gt;&#10;                            &lt;Button type=&quot;button&quot; className=&quot;mt-4&quot;&#10;                                    onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;Upload className=&quot;mr-2 h-4 w-4&quot;/&gt;Upload&#10;                                Images&lt;/Button&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                    &lt;div className=&quot;mt-4 flex justify-center items-center gap-4&quot;&gt;&#10;                        {coverFiles.length &gt; 0 &amp;&amp; (&lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&#10;                                                           onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;PlusCircle&#10;                            className=&quot;mr-2 h-4 w-4&quot;/&gt;Add More&lt;/Button&gt;)}&#10;                        &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{coverFiles.length} of {maxPhotos} photos&#10;                            selected.&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Input id=&quot;picture&quot; type=&quot;file&quot; multiple accept=&quot;image/*&quot; onChange={handleFileChange}&#10;                           className=&quot;hidden&quot; ref={fileInputRef}/&gt;&#10;                &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;&#10;            {/* Event Details Card with Category dropdown */}&#10;            &lt;Card&gt;&#10;                &lt;CardHeader&gt;&#10;                    &lt;CardTitle&gt;Event Details&lt;/CardTitle&gt;&#10;                    &lt;CardDescription&gt;Provide the core information about your event.&lt;/CardDescription&gt;&#10;                &lt;/CardHeader&gt;&#10;                &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                    &lt;FormField control={control} name=&quot;title&quot; render={({field}) =&gt; (&#10;                        &lt;FormItem&gt;&lt;FormLabel&gt;Event Title&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                            placeholder=&quot;e.g., Annual Tech Conference 2025&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                    &lt;FormField control={control} name=&quot;categoryId&quot; render={({field}) =&gt; (&#10;                        &lt;FormItem&gt;&#10;                            &lt;FormLabel&gt;Category&lt;/FormLabel&gt;&#10;                            &lt;Select&#10;                                onValueChange={(value) =&gt; {&#10;                                    // ✅ Find the full category object to get its name&#10;                                    let selectedCategoryName: string | undefined;&#10;                                    for (const parentCat of categories) {&#10;                                        const subCat = parentCat.subCategories.find(sc =&gt; sc.id === value);&#10;                                        if (subCat) {&#10;                                            selectedCategoryName = subCat.name;&#10;                                            break;&#10;                                        }&#10;                                    }&#10;                                    // ✅ Set both the ID and the name in the form state&#10;                                    field.onChange(value);&#10;                                    setValue('categoryName', selectedCategoryName);&#10;                                }}&#10;                                defaultValue={field.value}&#10;                            &gt;&#10;                                &lt;FormControl&gt;&lt;SelectTrigger&gt;&lt;SelectValue&#10;                                    placeholder=&quot;Select a category for your event&quot;/&gt;&lt;/SelectTrigger&gt;&lt;/FormControl&gt;&#10;                                &lt;SelectContent&gt;&#10;                                    {categories.map((parentCat) =&gt; (&#10;                                        &lt;SelectGroup key={parentCat.id}&gt;&#10;                                            &lt;SelectLabel&gt;{parentCat.name}&lt;/SelectLabel&gt;&#10;                                            {parentCat.subCategories.map((subCat) =&gt; (&#10;                                                &lt;SelectItem key={subCat.id} value={subCat.id}&gt;{subCat.name}&lt;/SelectItem&gt;&#10;                                            ))}&#10;                                        &lt;/SelectGroup&gt;&#10;                                    ))}&#10;                                &lt;/SelectContent&gt;&#10;                            &lt;/Select&gt;&#10;                            &lt;FormMessage/&gt;&#10;                        &lt;/FormItem&gt;&#10;                    )}/&gt;&#10;                    &lt;FormField control={control} name=&quot;description&quot; render={({field}) =&gt; (&#10;                        &lt;FormItem&gt;&lt;FormLabel&gt;Short Description&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                            placeholder=&quot;A brief summary of your event.&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                    &lt;FormField control={control} name=&quot;overview&quot; render={({field}) =&gt; (&#10;                        &lt;FormItem&gt;&lt;FormLabel&gt;Overview&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                            placeholder=&quot;Provide more details like schedule, speakers, etc.&quot;&#10;                            className=&quot;min-h-32&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useFormContext} from 'react-hook-form'; // Use context instead of creating new form&#10;import {useOrganization} from '@/providers/OrganizationProvider';&#10;import {useLimits} from '@/providers/LimitProvider';&#10;import {CategoryResponse} from '@/types/category';&#10;import {getAllCategories} from '@/lib/actions/categoryActions';&#10;import {compressImage} from '@/lib/imageUtils';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Textarea} from '@/components/ui/textarea';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;import {&#10;    Select,&#10;    SelectContent,&#10;    SelectItem,&#10;    SelectTrigger,&#10;    SelectValue,&#10;    SelectGroup,&#10;    SelectLabel&#10;} from '@/components/ui/select';&#10;import {Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious} from &quot;@/components/ui/carousel&quot;;&#10;import Image from 'next/image';&#10;import {ImageIcon, X, PlusCircle, Upload} from 'lucide-react';&#10;import {toast} from 'sonner';&#10;import Autoplay from 'embla-carousel-autoplay';&#10;import {CreateEventFormData} from &quot;@/lib/validators/event&quot;;&#10;&#10;interface CoreDetailsStepProps {&#10;    coverFiles: File[];&#10;    setCoverFilesAction: React.Dispatch&lt;React.SetStateAction&lt;File[]&gt;&gt;&#10;}&#10;&#10;export function CoreDetailsStep({coverFiles, setCoverFilesAction}: CoreDetailsStepProps) {&#10;    const {organization} = useOrganization();&#10;    const {myLimits} = useLimits();&#10;    const [categories, setCategories] = useState&lt;CategoryResponse[]&gt;([]);&#10;    const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    // ✅ Use the form context from parent instead of creating a new form&#10;    const {control, setValue} = useFormContext&lt;CreateEventFormData&gt;();&#10;&#10;    const maxPhotos = myLimits?.eventLimits.maxCoverPhotos || 1;&#10;&#10;    useEffect(() =&gt; {&#10;        getAllCategories().then(setCategories);&#10;    }, [organization]);&#10;&#10;    const handleFileChange = async (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        if (e.target.files) {&#10;            const selectedFiles = Array.from(e.target.files);&#10;            &#10;            // Check if adding these files would exceed the maximum allowed&#10;            if ((coverFiles.length + selectedFiles.length) &gt; maxPhotos) {&#10;                toast.error(`You can only upload a maximum of ${maxPhotos} photos.`);&#10;                return;&#10;            }&#10;            &#10;            // Define compression options for cover photos&#10;            const coverPhotoCompressionOptions = {&#10;                maxSizeMB: 1.5,            // Slightly larger than logos to maintain quality&#10;                maxWidthOrHeight: 1920,    // HD resolution is good for cover photos&#10;                useWebWorker: true,&#10;                fileType: 'image/jpeg'     // JPEG works well for cover photos&#10;            };&#10;            &#10;            // Show loading toast for long operations&#10;            toast.loading('Processing images...');&#10;            &#10;            try {&#10;                // Process files one by one with compression&#10;                const processedFiles = await Promise.all(&#10;                    selectedFiles.map(async (file) =&gt; {&#10;                        return await compressImage(file, coverPhotoCompressionOptions);&#10;                    })&#10;                );&#10;                &#10;                // Add the compressed files to the state&#10;                setCoverFilesAction(prev =&gt; [...prev, ...processedFiles]);&#10;                toast.dismiss();&#10;                toast.success(`${processedFiles.length} image(s) added successfully`);&#10;            } catch (error) {&#10;                console.error('Error processing images:', error);&#10;                toast.dismiss();&#10;                toast.error('Error processing images');&#10;            }&#10;        }&#10;    };&#10;&#10;    const removeImage = (index: number) =&gt; {&#10;        setCoverFilesAction(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-8&quot;&gt;&#10;            {/* Hero Cover Photos Section */}&#10;            &lt;Card&gt;&#10;                &lt;CardHeader&gt;&#10;                    &lt;CardTitle&gt;Cover Photos&lt;/CardTitle&gt;&#10;                    &lt;CardDescription&gt;This is the first thing people will see. Upload up&#10;                        to {maxPhotos} images.&lt;/CardDescription&gt;&#10;                &lt;/CardHeader&gt;&#10;                &lt;CardContent&gt;&#10;                    {coverFiles.length &gt; 0 ? (&#10;                        &lt;Carousel plugins={[Autoplay({delay: 4000, stopOnInteraction: false})]}&gt;&#10;                            &lt;CarouselContent&gt;&#10;                                {coverFiles.map((file, index) =&gt; (&#10;                                    &lt;CarouselItem key={index} className=&quot;relative&quot;&gt;&#10;                                        &lt;div className=&quot;aspect-[21/9] w-full relative&quot;&gt;&#10;                                            &lt;Image src={URL.createObjectURL(file)} alt={`Cover photo ${index + 1}`}&#10;                                                   fill className=&quot;object-cover rounded-lg&quot;/&gt;&#10;                                            &lt;Button type=&quot;button&quot; variant=&quot;destructive&quot; size=&quot;icon&quot;&#10;                                                    className=&quot;absolute top-4 right-4 h-8 w-8 z-10&quot;&#10;                                                    onClick={() =&gt; removeImage(index)}&gt;&lt;X&#10;                                                className=&quot;h-4 w-4&quot;/&gt;&lt;/Button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/CarouselItem&gt;&#10;                                ))}&#10;                            &lt;/CarouselContent&gt;&#10;                            &lt;CarouselPrevious type=&quot;button&quot;&#10;                                              className=&quot;absolute left-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                            &lt;CarouselNext type=&quot;button&quot;&#10;                                          className=&quot;absolute right-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                        &lt;/Carousel&gt;&#10;                    ) : (&#10;                        &lt;div&#10;                            className=&quot;flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-12 text-center aspect-[21/9] w-full&quot;&gt;&#10;                            &lt;ImageIcon className=&quot;h-16 w-16 text-muted-foreground&quot;/&gt;&#10;                            &lt;p className=&quot;mt-4 text-lg font-medium&quot;&gt;Add cover photos for your event&lt;/p&gt;&#10;                            &lt;Button type=&quot;button&quot; className=&quot;mt-4&quot;&#10;                                    onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;Upload className=&quot;mr-2 h-4 w-4&quot;/&gt;Upload&#10;                                Images&lt;/Button&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                    &lt;div className=&quot;mt-4 flex justify-center items-center gap-4&quot;&gt;&#10;                        {coverFiles.length &gt; 0 &amp;&amp; (&lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&#10;                                                           onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;PlusCircle&#10;                            className=&quot;mr-2 h-4 w-4&quot;/&gt;Add More&lt;/Button&gt;)}&#10;                        &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{coverFiles.length} of {maxPhotos} photos&#10;                            selected.&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Input id=&quot;picture&quot; type=&quot;file&quot; multiple accept=&quot;image/*&quot; onChange={handleFileChange}&#10;                           className=&quot;hidden&quot; ref={fileInputRef}/&gt;&#10;                &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;&#10;            {/* Event Details Card with Category dropdown */}&#10;            &lt;Card&gt;&#10;                &lt;CardHeader&gt;&#10;                    &lt;CardTitle&gt;Event Details&lt;/CardTitle&gt;&#10;                    &lt;CardDescription&gt;Provide the core information about your event.&lt;/CardDescription&gt;&#10;                &lt;/CardHeader&gt;&#10;                &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                    &lt;FormField control={control} name=&quot;title&quot; render={({field}) =&gt; (&#10;                        &lt;FormItem&gt;&lt;FormLabel&gt;Event Title&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                            placeholder=&quot;e.g., Annual Tech Conference 2025&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                    &lt;FormField control={control} name=&quot;categoryId&quot; render={({field}) =&gt; (&#10;                        &lt;FormItem&gt;&#10;                            &lt;FormLabel&gt;Category&lt;/FormLabel&gt;&#10;                            &lt;Select&#10;                                onValueChange={(value) =&gt; {&#10;                                    // ✅ Find the full category object to get its name&#10;                                    let selectedCategoryName: string | undefined;&#10;                                    for (const parentCat of categories) {&#10;                                        const subCat = parentCat.subCategories.find(sc =&gt; sc.id === value);&#10;                                        if (subCat) {&#10;                                            selectedCategoryName = subCat.name;&#10;                                            break;&#10;                                        }&#10;                                    }&#10;                                    // ✅ Set both the ID and the name in the form state&#10;                                    field.onChange(value);&#10;                                    setValue('categoryName', selectedCategoryName);&#10;                                }}&#10;                                defaultValue={field.value}&#10;                            &gt;&#10;                                &lt;FormControl&gt;&lt;SelectTrigger&gt;&lt;SelectValue&#10;                                    placeholder=&quot;Select a category for your event&quot;/&gt;&lt;/SelectTrigger&gt;&lt;/FormControl&gt;&#10;                                &lt;SelectContent&gt;&#10;                                    {categories.map((parentCat) =&gt; (&#10;                                        &lt;SelectGroup key={parentCat.id}&gt;&#10;                                            &lt;SelectLabel&gt;{parentCat.name}&lt;/SelectLabel&gt;&#10;                                            {parentCat.subCategories.map((subCat) =&gt; (&#10;                                                &lt;SelectItem key={subCat.id} value={subCat.id}&gt;{subCat.name}&lt;/SelectItem&gt;&#10;                                            ))}&#10;                                        &lt;/SelectGroup&gt;&#10;                                    ))}&#10;                                &lt;/SelectContent&gt;&#10;                            &lt;/Select&gt;&#10;                            &lt;FormMessage/&gt;&#10;                        &lt;/FormItem&gt;&#10;                    )}/&gt;&#10;                    &lt;FormField control={control} name=&quot;description&quot; render={({field}) =&gt; (&#10;                        &lt;FormItem&gt;&lt;FormLabel&gt;Short Description&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                            placeholder=&quot;A brief summary of your event.&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                    &lt;FormField control={control} name=&quot;overview&quot; render={({field}) =&gt; (&#10;                        &lt;FormItem&gt;&lt;FormLabel&gt;Overview&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                            placeholder=&quot;Provide more details like schedule, speakers, etc.&quot;&#10;                            className=&quot;min-h-32&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/InteractiveBlocks.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/InteractiveBlocks.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useDraggable} from '@dnd-kit/core';&#10;import {Block, Tier} from '@/lib/validators/event';&#10;import {cn} from '@/lib/utils';&#10;import {Button} from '@/components/ui/button';&#10;&#10;// --- Interactive Draggable Block for Seated Grids ---&#10;interface DraggableBlockProps {&#10;    block: Block;&#10;    tiers: Tier[];&#10;    onSeatClick: (blockId: string, rowId: string, seatId: string) =&gt; void;&#10;    onApplyToAllSeats?: (blockId: string) =&gt; void;  // New prop for handling apply to all&#10;}&#10;&#10;export function InteractiveDraggableBlock({block, tiers, onSeatClick, onApplyToAllSeats}: DraggableBlockProps) {&#10;    const {setNodeRef} = useDraggable({&#10;        id: block.id,&#10;        disabled: true, // Dragging is disabled in assignment mode&#10;    });&#10;&#10;    const style = {&#10;        // No transform needed as blocks are static in this editor&#10;        left: block.position.x,&#10;        top: block.position.y,&#10;    };&#10;&#10;    const getTierColor = (tierId?: string) =&gt; {&#10;        if (tierId === 'RESERVED') return 'hsla(var(--muted-foreground), 0.5)'; // Added opacity&#10;        if (!tierId) return undefined;&#10;        const tier = tiers.find(t =&gt; t.id === tierId);&#10;        // Add opacity to the color&#10;        if (tier?.color) {&#10;            // Handle HSL color format&#10;            if (tier.color.startsWith('hsl')) {&#10;                return tier.color.replace('hsl', 'hsla').replace(')', ', 0.5)');&#10;            }&#10;            // Handle hex or other formats by adding opacity suffix&#10;            return `${tier.color}80`; // 80 is equivalent to 50% opacity in hex&#10;        }&#10;        return 'hsla(var(--primary), 0.5)'; // Added opacity&#10;    };&#10;&#10;    return (&#10;        &lt;div ref={setNodeRef} style={style} className=&quot;absolute p-3 bg-card border rounded-lg&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col text-center relative&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between w-full mb-2&quot;&gt;&#10;                    &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#10;                    {onApplyToAllSeats &amp;&amp; (&#10;                        &lt;Button&#10;                            size=&quot;sm&quot;&#10;                            variant=&quot;outline&quot;&#10;                            type={'button'}&#10;                            className=&quot;text-xs py-0 h-6&quot;&#10;                            onClick={(e) =&gt; {&#10;                                e.stopPropagation();&#10;                                onApplyToAllSeats(block.id);&#10;                            }}&#10;                        &gt;&#10;                            Apply to All&#10;                        &lt;/Button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;grid gap-1.5&quot;&#10;                     style={{gridTemplateColumns: `repeat(${block.rows?.[0]?.seats?.length || 1}, 1fr)`}}&gt;&#10;                    {block.rows?.map(row =&gt;&#10;                        row.seats.map(seat =&gt; (&#10;                            &lt;button&#10;                                key={seat.id}&#10;                                type=&quot;button&quot;&#10;                                onClick={() =&gt; onSeatClick(block.id, row.id, seat.id)}&#10;                                className={cn(&#10;                                    &quot;h-6 w-6 rounded-full border text-xs font-mono transition-all hover:scale-110 flex items-center justify-center&quot;,&#10;                                    seat.status === 'RESERVED' &amp;&amp; &quot;bg-muted-foreground/50 text-primary-foreground line-through border-destructive border-2&quot;&#10;                                )}&#10;                                style={{backgroundColor: seat.tierId &amp;&amp; seat.status !== 'RESERVED' ? getTierColor(seat.tierId) : undefined}}&#10;                            &gt;&#10;                                {seat.label}&#10;                            &lt;/button&gt;&#10;                        ))&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;// --- Interactive Resizable Block for Standing Capacity ---&#10;interface ResizableBlockProps {&#10;    block: Block;&#10;    tiers: Tier[];&#10;    onClick: (blockId: string) =&gt; void;&#10;}&#10;&#10;export function InteractiveResizableBlock({block, tiers, onClick}: ResizableBlockProps) {&#10;    const {setNodeRef} = useDraggable({&#10;        id: block.id,&#10;        disabled: true,&#10;    });&#10;&#10;    const style = {&#10;        width: block.width,&#10;        width: block.width,&#10;        width: block.width,&#10;        height: block.height,&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useDraggable} from '@dnd-kit/core';&#10;import {Block, Tier} from '@/lib/validators/event';&#10;import {cn} from '@/lib/utils';&#10;import {Button} from '@/components/ui/button';&#10;&#10;// --- Interactive Draggable Block for Seated Grids ---&#10;interface DraggableBlockProps {&#10;    block: Block;&#10;    tiers: Tier[];&#10;    onSeatClick: (blockId: string, rowId: string, seatId: string) =&gt; void;&#10;    onApplyToAllSeats?: (blockId: string) =&gt; void;  // New prop for handling apply to all&#10;}&#10;&#10;export function InteractiveDraggableBlock({block, tiers, onSeatClick, onApplyToAllSeats}: DraggableBlockProps) {&#10;    const {setNodeRef} = useDraggable({&#10;        id: block.id,&#10;        disabled: true, // Dragging is disabled in assignment mode&#10;    });&#10;&#10;    const style = {&#10;        // No transform needed as blocks are static in this editor&#10;        left: block.position.x,&#10;        top: block.position.y,&#10;    };&#10;&#10;    const getTierColor = (tierId?: string) =&gt; {&#10;        if (tierId === 'RESERVED') return 'hsla(var(--muted-foreground), 0.5)'; // Added opacity&#10;        if (!tierId) return undefined;&#10;        const tier = tiers.find(t =&gt; t.id === tierId);&#10;        // Add opacity to the color&#10;        if (tier?.color) {&#10;            // Handle HSL color format&#10;            if (tier.color.startsWith('hsl')) {&#10;                return tier.color.replace('hsl', 'hsla').replace(')', ', 0.5)');&#10;            }&#10;            // Handle hex or other formats by adding opacity suffix&#10;            return `${tier.color}80`; // 80 is equivalent to 50% opacity in hex&#10;        }&#10;        return 'hsla(var(--primary), 0.5)'; // Added opacity&#10;    };&#10;&#10;    return (&#10;        &lt;div ref={setNodeRef} style={style} className=&quot;absolute p-3 bg-card border rounded-lg&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col text-center relative&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between w-full mb-2&quot;&gt;&#10;                    &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#10;                    {onApplyToAllSeats &amp;&amp; (&#10;                        &lt;Button&#10;                            size=&quot;sm&quot;&#10;                            variant=&quot;outline&quot;&#10;                            type={'button'}&#10;                            className=&quot;text-xs py-0 h-6&quot;&#10;                            onClick={(e) =&gt; {&#10;                                e.stopPropagation();&#10;                                onApplyToAllSeats(block.id);&#10;                            }}&#10;                        &gt;&#10;                            Apply to All&#10;                        &lt;/Button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;grid gap-1.5&quot;&#10;                     style={{gridTemplateColumns: `repeat(${block.rows?.[0]?.seats?.length || 1}, 1fr)`}}&gt;&#10;                    {block.rows?.map(row =&gt;&#10;                        row.seats.map(seat =&gt; (&#10;                            &lt;button&#10;                                key={seat.id}&#10;                                type=&quot;button&quot;&#10;                                onClick={() =&gt; onSeatClick(block.id, row.id, seat.id)}&#10;                                className={cn(&#10;                                    &quot;h-6 w-6 rounded-full border text-xs font-mono transition-all hover:scale-110 flex items-center justify-center&quot;,&#10;                                    seat.status === 'RESERVED' &amp;&amp; &quot;bg-muted-foreground/50 text-primary-foreground line-through border-destructive border-2&quot;&#10;                                )}&#10;                                style={{backgroundColor: seat.tierId &amp;&amp; seat.status !== 'RESERVED' ? getTierColor(seat.tierId) : undefined}}&#10;                            &gt;&#10;                                {seat.label}&#10;                            &lt;/button&gt;&#10;                        ))&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;// --- Interactive Resizable Block for Standing Capacity ---&#10;interface ResizableBlockProps {&#10;    block: Block;&#10;    tiers: Tier[];&#10;    onClick: (blockId: string) =&gt; void;&#10;}&#10;&#10;export function InteractiveResizableBlock({block, tiers, onClick}: ResizableBlockProps) {&#10;    const {setNodeRef} = useDraggable({&#10;        id: block.id,&#10;        disabled: true,&#10;    });&#10;&#10;    // Fix the TypeScript error by ensuring width and height are valid CSS values&#10;    const style: React.CSSProperties = {&#10;        left: block.position.x,&#10;        top: block.position.y,&#10;        width: block.width ?? undefined,&#10;        height: block.height ?? undefined,&#10;    };&#10;&#10;    // Determine the background color based on the tier of the seats inside the block&#10;    // with 50% opacity&#10;    const getBlockTierColor = () =&gt; {&#10;        const firstTieredSeat = block.seats?.find(s =&gt; s.tierId);&#10;        if (!firstTieredSeat || !firstTieredSeat.tierId) return undefined;&#10;        const tier = tiers.find(t =&gt; t.id === firstTieredSeat.tierId);&#10;&#10;        // Add opacity to the color&#10;        if (tier?.color) {&#10;            // Handle HSL color format&#10;            if (tier.color.startsWith('hsl')) {&#10;                return tier.color.replace('hsl', 'hsla').replace(')', ', 0.5)');&#10;            }&#10;            // Handle hex or other formats by adding opacity suffix&#10;            return `${tier.color}80`; // 80 is equivalent to 50% opacity in hex&#10;        }&#10;        return undefined;&#10;    };&#10;&#10;    return (&#10;        &lt;div ref={setNodeRef} style={style} className=&quot;absolute&quot;&gt;&#10;            &lt;div&#10;                onClick={() =&gt; onClick(block.id)}&#10;                className=&quot;p-2 bg-card border rounded-lg shadow-md box-border flex flex-col relative cursor-pointer h-full w-full&quot;&#10;                style={{backgroundColor: getBlockTierColor()}}&#10;            &gt;&#10;                &lt;div className=&quot;flex items-center gap-2 flex-grow&quot;&gt;&#10;                    &lt;div className=&quot;flex flex-col text-center flex-grow&quot;&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;{block.name}&lt;/span&gt;&#10;                        &lt;span className=&quot;text-xs text-muted-foreground&quot;&gt;{block.capacity} capacity&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/RecurringSessionsDialog.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/RecurringSessionsDialog.tsx" />
              <option name="originalContent" value="import {Controller, useForm} from &quot;react-hook-form&quot;;&#10;import {addDays, addWeeks, format, setHours, setMinutes, subDays, subHours} from &quot;date-fns&quot;;&#10;import {&#10;    Dialog,&#10;    DialogContent,&#10;    DialogDescription,&#10;    DialogFooter,&#10;    DialogHeader,&#10;    DialogTitle&#10;} from &quot;@/components/ui/dialog&quot;;&#10;import {FormControl, FormItem, FormLabel} from &quot;@/components/ui/form&quot;;&#10;import {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from &quot;@/components/ui/select&quot;;&#10;import {Input} from &quot;@/components/ui/input&quot;;&#10;import {Popover, PopoverContent, PopoverTrigger} from &quot;@/components/ui/popover&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {Calendar as CalendarIcon} from &quot;lucide-react&quot;;&#10;import {Calendar} from &quot;@/components/ui/calendar&quot;;&#10;import * as React from &quot;react&quot;;&#10;import {SessionFormData} from &quot;@/lib/validators/event&quot;;&#10;import {Switch} from &quot;@/components/ui/switch&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {Enums, SessionType} from &quot;@/lib/validators/enums&quot;;&#10;&#10;interface RecurringSessionFormValues {&#10;    frequency: 'daily' | 'weekly';&#10;    interval: number;&#10;    count: number;&#10;    startDate: Date;&#10;    startTime: string;&#10;    durationHours: number;&#10;    salesStartRuleType: Enums;&#10;    salesStartHoursBefore: number;&#10;    salesStartFixedDatetime: Date;&#10;    salesStartFixedTime: string; // Added field for fixed time&#10;    isDaysNotHours: boolean;&#10;}&#10;&#10;export function RecurringSessionsDialog({open, setOpen, onGenerate, currentSessionCount, maxSessions}: {&#10;    open: boolean,&#10;    setOpen: (open: boolean) =&gt; void,&#10;    onGenerate: (sessions: SessionFormData[]) =&gt; void,&#10;    currentSessionCount: number,&#10;    maxSessions: number&#10;}) {&#10;    const {control, handleSubmit, watch, setValue} = useForm&lt;RecurringSessionFormValues&gt;({&#10;        defaultValues: {&#10;            frequency: 'weekly',&#10;            interval: 1,&#10;            count: 5,&#10;            startDate: new Date(),&#10;            startTime: '19:00',&#10;            durationHours: 2,&#10;            salesStartRuleType: Enums.ROLLING,&#10;            salesStartHoursBefore: 168,&#10;            salesStartFixedDatetime: new Date(),&#10;            salesStartFixedTime: '12:00', // Default fixed time&#10;            isDaysNotHours: true,&#10;        }&#10;    });&#10;&#10;    const salesStartHoursBefore = watch('salesStartHoursBefore');&#10;    const isDaysNotHours = watch('isDaysNotHours');&#10;&#10;    // Handle toggling between days and hours&#10;    const handleUnitToggle = (checked: boolean) =&gt; {&#10;        setValue('isDaysNotHours', checked);&#10;        if (checked) {&#10;            // Converting hours to days (rounded)&#10;            setValue('salesStartHoursBefore', Math.round(salesStartHoursBefore / 24) * 24);&#10;        } else {&#10;            // Converting days to hours&#10;            setValue('salesStartHoursBefore', Math.round(salesStartHoursBefore / 24));&#10;        }&#10;    };&#10;&#10;    const onSubmit = (data: RecurringSessionFormValues) =&gt; {&#10;        // Check if adding these sessions would exceed the limit&#10;        if (currentSessionCount + data.count &gt; maxSessions) {&#10;            toast.error(`Cannot add ${data.count} sessions. You are limited to ${maxSessions} total sessions (${currentSessionCount} already added).`);&#10;            return;&#10;        }&#10;&#10;        const newSessions: SessionFormData[] = [];&#10;        let currentStartTime = setMinutes(&#10;            setHours(&#10;                new Date(data.startDate), // Ensure we have a fresh Date object&#10;                parseInt(data.startTime.split(':')[0])&#10;            ),&#10;            parseInt(data.startTime.split(':')[1])&#10;        );&#10;&#10;        // For fixed sales start, calculate the datetime once&#10;        let fixedSalesStartTime: Date | undefined;&#10;&#10;        if (data.salesStartRuleType === Enums.FIXED) {&#10;            const [hours, minutes] = data.salesStartFixedTime.split(':').map(num =&gt; parseInt(num));&#10;            fixedSalesStartTime = setMinutes(&#10;                setHours(&#10;                    new Date(data.salesStartFixedDatetime),&#10;                    hours&#10;                ),&#10;                minutes&#10;            );&#10;&#10;            // Validate that sales start time is before the first event start time&#10;            if (fixedSalesStartTime &gt;= currentStartTime) {&#10;                toast.error(&quot;Sales start time must be before the first event start time&quot;);&#10;                return;&#10;            }&#10;        }&#10;&#10;        for (let i = 0; i &lt; data.count; i++) {&#10;            const endTime = new Date(currentStartTime.getTime() + data.durationHours * 60 * 60 * 1000);&#10;&#10;            // Calculate sales start time based on the rule type default to seven days before start&#10;            let salesStartTime = new Date(subDays(currentStartTime, 7)).toISOString();&#10;&#10;            if (data.salesStartRuleType === Enums.IMMEDIATE) {&#10;                // For immediate sales, use current time&#10;                salesStartTime = new Date().toISOString();&#10;            } else if (data.salesStartRuleType === Enums.ROLLING) {&#10;                // For rolling sales, subtract the specified hours from each event start time&#10;                salesStartTime = subHours(currentStartTime, data.salesStartHoursBefore).toISOString();&#10;            } else if (data.salesStartRuleType === Enums.FIXED &amp;&amp; fixedSalesStartTime) {&#10;                // For fixed date, use the pre-calculated time (same for all sessions)&#10;                salesStartTime = fixedSalesStartTime.toISOString();&#10;            }&#10;&#10;            newSessions.push({&#10;                startTime: currentStartTime.toISOString(),&#10;                sessionType: SessionType.PHYSICAL,&#10;                endTime: endTime.toISOString(),&#10;                salesStartTime: salesStartTime,&#10;                layoutData: {name: null, layout: {blocks: []}},&#10;            });&#10;&#10;            if (data.frequency === 'daily') {&#10;                currentStartTime = addDays(currentStartTime, data.interval);&#10;            } else if (data.frequency === 'weekly') {&#10;                currentStartTime = addWeeks(currentStartTime, data.interval);&#10;            }&#10;        }&#10;&#10;        console.log(&quot;Generated sessions:&quot;, newSessions);&#10;        onGenerate(newSessions);&#10;        setOpen(false);&#10;    };&#10;&#10;    return (&#10;        &lt;Dialog open={open} onOpenChange={setOpen}&gt;&#10;            &lt;DialogContent&gt;&#10;                &lt;DialogHeader&gt;&#10;                    &lt;DialogTitle&gt;Add Recurring Sessions&lt;/DialogTitle&gt;&#10;                    &lt;DialogDescription&gt;&#10;                        Generate a series of sessions based on a recurring pattern.&#10;                        {maxSessions &gt; 0 &amp;&amp; (&#10;                            &lt;span className=&quot;block mt-1 text-sm text-muted-foreground&quot;&gt;&#10;                                Limit: {currentSessionCount}/{maxSessions} sessions used.&#10;                            &lt;/span&gt;&#10;                        )}&#10;                    &lt;/DialogDescription&gt;&#10;                &lt;/DialogHeader&gt;&#10;                &lt;form onSubmit={handleSubmit(onSubmit)} className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;Controller name=&quot;frequency&quot; control={control} render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Frequency&lt;/FormLabel&gt;&lt;Select onValueChange={field.onChange}&#10;                                                                              defaultValue={field.value}&gt;&lt;FormControl&gt;&lt;SelectTrigger&gt;&lt;SelectValue/&gt;&lt;/SelectTrigger&gt;&lt;/FormControl&gt;&lt;SelectContent&gt;&lt;SelectItem&#10;                                value=&quot;daily&quot;&gt;Daily&lt;/SelectItem&gt;&lt;SelectItem&#10;                                value=&quot;weekly&quot;&gt;Weekly&lt;/SelectItem&gt;&lt;/SelectContent&gt;&lt;/Select&gt;&lt;/FormItem&gt;&#10;                        )}/&gt;&#10;                        &lt;Controller name=&quot;interval&quot; control={control} render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Repeat Every&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input type=&quot;number&quot;&#10;                                                                                             min=&quot;1&quot; {...field}&#10;                                                                                             onChange={e =&gt; field.onChange(parseInt(e.target.value))}/&gt;&lt;/FormControl&gt;&lt;/FormItem&gt;&#10;                        )}/&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Controller name=&quot;count&quot; control={control} render={({field}) =&gt; (&#10;                        &lt;FormItem&gt;&lt;FormLabel&gt;Number of Sessions&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input type=&quot;number&quot; min=&quot;1&quot;&#10;                                                                                               max=&quot;52&quot; {...field}&#10;                                                                                               onChange={e =&gt; field.onChange(parseInt(e.target.value))}/&gt;&lt;/FormControl&gt;&lt;/FormItem&gt;&#10;                    )}/&gt;&#10;                    &lt;Controller name=&quot;startDate&quot; control={control} render={({field}) =&gt; (&#10;                        &lt;FormItem&gt;&lt;FormLabel&gt;Start Date&lt;/FormLabel&gt;&lt;Popover&gt;&lt;PopoverTrigger asChild&gt;&lt;Button&#10;                            variant=&quot;outline&quot; className=&quot;w-full justify-start font-normal&quot;&gt;&lt;CalendarIcon&#10;                            className=&quot;mr-2 h-4 w-4&quot;/&gt;{field.value ? format(field.value, 'PPP') :&#10;                            &lt;span&gt;Pick a date&lt;/span&gt;}&lt;/Button&gt;&lt;/PopoverTrigger&gt;&lt;PopoverContent&#10;                            className=&quot;w-auto p-0&quot;&gt;&lt;Calendar mode=&quot;single&quot; selected={field.value}&#10;                                                             onSelect={field.onChange}&#10;                                                             autoFocus/&gt;&lt;/PopoverContent&gt;&lt;/Popover&gt;&lt;/FormItem&gt;&#10;                    )}/&gt;&#10;                    &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;Controller name=&quot;startTime&quot; control={control} render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Start Time&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                type=&quot;time&quot; {...field}/&gt;&lt;/FormControl&gt;&lt;/FormItem&gt;&#10;                        )}/&gt;&#10;                        &lt;Controller name=&quot;durationHours&quot; control={control} render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Duration (hours)&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input type=&quot;number&quot; min=&quot;0.5&quot;&#10;                                                                                                 step=&quot;0.5&quot; {...field}&#10;                                                                                                 onChange={e =&gt; field.onChange(parseFloat(e.target.value))}/&gt;&lt;/FormControl&gt;&lt;/FormItem&gt;&#10;                        )}/&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;Controller name=&quot;salesStartRuleType&quot; control={control} render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&#10;                                &lt;FormLabel&gt;Sales Start Rule&lt;/FormLabel&gt;&#10;                                &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#10;                                    &lt;FormControl&gt;&#10;                                        &lt;SelectTrigger&gt;&#10;                                            &lt;SelectValue/&gt;&#10;                                        &lt;/SelectTrigger&gt;&#10;                                    &lt;/FormControl&gt;&#10;                                    &lt;SelectContent&gt;&#10;                                        &lt;SelectItem value=&quot;IMMEDIATE&quot;&gt;Immediate&lt;/SelectItem&gt;&#10;                                        &lt;SelectItem value=&quot;ROLLING&quot;&gt;Rolling (Before Event)&lt;/SelectItem&gt;&#10;                                        &lt;SelectItem value=&quot;FIXED&quot;&gt;Fixed Datetime&lt;/SelectItem&gt;&#10;                                    &lt;/SelectContent&gt;&#10;                                &lt;/Select&gt;&#10;                            &lt;/FormItem&gt;&#10;                        )}/&gt;&#10;&#10;&#10;                        {watch('salesStartRuleType') === 'ROLLING' &amp;&amp; (&#10;                            &lt;div className=&quot;space-y-2&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                                    &lt;FormLabel&gt;Unit&lt;/FormLabel&gt;&#10;                                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                                        &lt;span className=&quot;text-sm text-muted-foreground&quot;&gt;Hours&lt;/span&gt;&#10;                                        &lt;Controller&#10;                                            name=&quot;isDaysNotHours&quot;&#10;                                            control={control}&#10;                                            render={({field}) =&gt; (&#10;                                                &lt;Switch&#10;                                                    checked={field.value}&#10;                                                    onCheckedChange={handleUnitToggle}&#10;                                                /&gt;&#10;                                            )}&#10;                                        /&gt;&#10;                                        &lt;span className=&quot;text-sm text-muted-foreground&quot;&gt;Days&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;Controller&#10;                                    name=&quot;salesStartHoursBefore&quot;&#10;                                    control={control}&#10;                                    render={({field}) =&gt; (&#10;                                        &lt;FormItem&gt;&#10;                                            &lt;FormLabel&gt;&#10;                                                {isDaysNotHours ? 'Days before event' : 'Hours before event'}&#10;                                            &lt;/FormLabel&gt;&#10;                                            &lt;FormControl&gt;&#10;                                                &lt;Input&#10;                                                    type=&quot;number&quot;&#10;                                                    min=&quot;1&quot;&#10;                                                    {...field}&#10;                                                    value={isDaysNotHours ? Math.round(field.value / 24) : field.value}&#10;                                                    onChange={(e) =&gt; {&#10;                                                        const value = parseInt(e.target.value);&#10;                                                        if (isDaysNotHours) {&#10;                                                            // If days, store as hours in the form data&#10;                                                            field.onChange(value * 24);&#10;                                                        } else {&#10;                                                            field.onChange(value);&#10;                                                        }&#10;                                                    }}&#10;                                                /&gt;&#10;                                            &lt;/FormControl&gt;&#10;                                        &lt;/FormItem&gt;&#10;                                    )}&#10;                                /&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {watch('salesStartRuleType') === 'FIXED' &amp;&amp; (&#10;                            &lt;&gt;&#10;                                &lt;Controller name=&quot;salesStartFixedDatetime&quot; control={control} render={({field}) =&gt; (&#10;                                    &lt;FormItem&gt;&#10;                                        &lt;FormLabel&gt;Sales Start Date&lt;/FormLabel&gt;&#10;                                        &lt;Popover&gt;&#10;                                            &lt;PopoverTrigger asChild&gt;&#10;                                                &lt;Button variant=&quot;outline&quot; className=&quot;w-full justify-start font-normal&quot;&gt;&#10;                                                    &lt;CalendarIcon className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;                                                    {field.value ? format(field.value, 'PPP') :&#10;                                                        &lt;span&gt;Pick a date&lt;/span&gt;}&#10;                                                &lt;/Button&gt;&#10;                                            &lt;/PopoverTrigger&gt;&#10;                                            &lt;PopoverContent className=&quot;w-auto p-0&quot;&gt;&#10;                                                &lt;Calendar&#10;                                                    mode=&quot;single&quot;&#10;                                                    selected={field.value}&#10;                                                    onSelect={field.onChange}&#10;                                                    autoFocus&#10;                                                /&gt;&#10;                                            &lt;/PopoverContent&gt;&#10;                                        &lt;/Popover&gt;&#10;                                    &lt;/FormItem&gt;&#10;                                )}/&gt;&#10;                                &lt;Controller name=&quot;salesStartFixedTime&quot; control={control} render={({field}) =&gt; (&#10;                                    &lt;FormItem&gt;&#10;                                        &lt;FormLabel&gt;Sales Start Time&lt;/FormLabel&gt;&#10;                                        &lt;FormControl&gt;&#10;                                            &lt;Input type=&quot;time&quot; {...field} /&gt;&#10;                                        &lt;/FormControl&gt;&#10;                                    &lt;/FormItem&gt;&#10;                                )}/&gt;&#10;                            &lt;/&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;DialogFooter&gt;&#10;                        &lt;Button type=&quot;submit&quot;&gt;Generate Sessions&lt;/Button&gt;&#10;                    &lt;/DialogFooter&gt;&#10;                &lt;/form&gt;&#10;            &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;    );&#10;}&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="import {Controller, useForm} from &quot;react-hook-form&quot;;&#13;&#10;import {addDays, addWeeks, format, setHours, setMinutes, subDays, subHours} from &quot;date-fns&quot;;&#13;&#10;import {&#13;&#10;    Dialog,&#13;&#10;    DialogContent,&#13;&#10;    DialogDescription,&#13;&#10;    DialogFooter,&#13;&#10;    DialogHeader,&#13;&#10;    DialogTitle&#13;&#10;} from &quot;@/components/ui/dialog&quot;;&#13;&#10;import {FormControl, FormItem, FormLabel} from &quot;@/components/ui/form&quot;;&#13;&#10;import {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from &quot;@/components/ui/select&quot;;&#13;&#10;import {Input} from &quot;@/components/ui/input&quot;;&#13;&#10;import {Popover, PopoverContent, PopoverTrigger} from &quot;@/components/ui/popover&quot;;&#13;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#13;&#10;import {Calendar as CalendarIcon} from &quot;lucide-react&quot;;&#13;&#10;import {Calendar} from &quot;@/components/ui/calendar&quot;;&#13;&#10;import * as React from &quot;react&quot;;&#13;&#10;import {SessionFormData} from &quot;@/lib/validators/event&quot;;&#13;&#10;import {Switch} from &quot;@/components/ui/switch&quot;;&#13;&#10;import {toast} from &quot;sonner&quot;;&#13;&#10;import {Enums, SessionType} from &quot;@/lib/validators/enums&quot;;&#13;&#10;&#13;&#10;interface RecurringSessionFormValues {&#13;&#10;    frequency: 'daily' | 'weekly';&#13;&#10;    interval: number;&#13;&#10;    count: number;&#13;&#10;    startDate: Date;&#13;&#10;    startTime: string;&#13;&#10;    durationHours: number;&#13;&#10;    salesStartRuleType: Enums;&#13;&#10;    salesStartHoursBefore: number;&#13;&#10;    salesStartFixedDatetime: Date;&#13;&#10;    salesStartFixedTime: string; // Added field for fixed time&#13;&#10;    isDaysNotHours: boolean;&#13;&#10;}&#13;&#10;&#13;&#10;export function RecurringSessionsDialog({open, setOpen, onGenerate, currentSessionCount, maxSessions}: {&#13;&#10;    open: boolean,&#13;&#10;    setOpen: (open: boolean) =&gt; void,&#13;&#10;    onGenerate: (sessions: SessionFormData[]) =&gt; void,&#13;&#10;    currentSessionCount: number,&#13;&#10;    maxSessions: number&#13;&#10;}) {&#13;&#10;    const {control, handleSubmit, watch, setValue} = useForm&lt;RecurringSessionFormValues&gt;({&#13;&#10;        defaultValues: {&#13;&#10;            frequency: 'weekly',&#13;&#10;            interval: 1,&#13;&#10;            count: 5,&#13;&#10;            startDate: new Date(),&#13;&#10;            startTime: '19:00',&#13;&#10;            durationHours: 2,&#13;&#10;            salesStartRuleType: Enums.ROLLING,&#13;&#10;            salesStartHoursBefore: 168,&#13;&#10;            salesStartFixedDatetime: new Date(),&#13;&#10;            salesStartFixedTime: '12:00', // Default fixed time&#13;&#10;            isDaysNotHours: true,&#13;&#10;        }&#13;&#10;    });&#13;&#10;&#13;&#10;    const salesStartHoursBefore = watch('salesStartHoursBefore');&#13;&#10;    const isDaysNotHours = watch('isDaysNotHours');&#13;&#10;&#13;&#10;    // Handle toggling between days and hours&#13;&#10;    const handleUnitToggle = (checked: boolean) =&gt; {&#13;&#10;        setValue('isDaysNotHours', checked);&#13;&#10;        if (checked) {&#13;&#10;            // Converting hours to days (rounded)&#13;&#10;            setValue('salesStartHoursBefore', Math.round(salesStartHoursBefore / 24) * 24);&#13;&#10;        } else {&#13;&#10;            // Converting days to hours&#13;&#10;            setValue('salesStartHoursBefore', Math.round(salesStartHoursBefore / 24));&#13;&#10;        }&#13;&#10;    };&#13;&#10;&#13;&#10;    const onSubmit = (data: RecurringSessionFormValues) =&gt; {&#13;&#10;        // Check if adding these sessions would exceed the limit&#13;&#10;        if (currentSessionCount + data.count &gt; maxSessions) {&#13;&#10;            toast.error(`Cannot add ${data.count} sessions. You are limited to ${maxSessions} total sessions (${currentSessionCount} already added).`);&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        const newSessions: SessionFormData[] = [];&#13;&#10;        let currentStartTime = setMinutes(&#13;&#10;            setHours(&#13;&#10;                new Date(data.startDate), // Ensure we have a fresh Date object&#13;&#10;                parseInt(data.startTime.split(':')[0])&#13;&#10;            ),&#13;&#10;            parseInt(data.startTime.split(':')[1])&#13;&#10;        );&#13;&#10;&#13;&#10;        // For fixed sales start, calculate the datetime once&#13;&#10;        let fixedSalesStartTime: Date | undefined;&#13;&#10;&#13;&#10;        if (data.salesStartRuleType === Enums.FIXED) {&#13;&#10;            const [hours, minutes] = data.salesStartFixedTime.split(':').map(num =&gt; parseInt(num));&#13;&#10;            fixedSalesStartTime = setMinutes(&#13;&#10;                setHours(&#13;&#10;                    new Date(data.salesStartFixedDatetime),&#13;&#10;                    hours&#13;&#10;                ),&#13;&#10;                minutes&#13;&#10;            );&#13;&#10;&#13;&#10;            // Validate that sales start time is before the first event start time&#13;&#10;            if (fixedSalesStartTime &gt;= currentStartTime) {&#13;&#10;                toast.error(&quot;Sales start time must be before the first event start time&quot;);&#13;&#10;                return;&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        for (let i = 0; i &lt; data.count; i++) {&#13;&#10;            const endTime = new Date(currentStartTime.getTime() + data.durationHours * 60 * 60 * 1000);&#13;&#10;&#13;&#10;            // Calculate sales start time based on the rule type default to seven days before start&#13;&#10;            let salesStartTime = new Date(subDays(currentStartTime, 7)).toISOString();&#13;&#10;&#13;&#10;            if (data.salesStartRuleType === Enums.IMMEDIATE) {&#13;&#10;                // For immediate sales, use current time&#13;&#10;                salesStartTime = new Date().toISOString();&#13;&#10;            } else if (data.salesStartRuleType === Enums.ROLLING) {&#13;&#10;                // For rolling sales, subtract the specified hours from each event start time&#13;&#10;                salesStartTime = subHours(currentStartTime, data.salesStartHoursBefore).toISOString();&#13;&#10;            } else if (data.salesStartRuleType === Enums.FIXED &amp;&amp; fixedSalesStartTime) {&#13;&#10;                // For fixed date, use the pre-calculated time (same for all sessions)&#13;&#10;                salesStartTime = fixedSalesStartTime.toISOString();&#13;&#10;            }&#13;&#10;&#13;&#10;            newSessions.push({&#13;&#10;                startTime: currentStartTime.toISOString(),&#13;&#10;                sessionType: SessionType.PHYSICAL,&#13;&#10;                endTime: endTime.toISOString(),&#13;&#10;                salesStartTime: salesStartTime,&#13;&#10;                layoutData: {name: null, layout: {blocks: []}},&#13;&#10;            });&#13;&#10;&#13;&#10;            if (data.frequency === 'daily') {&#13;&#10;                currentStartTime = addDays(currentStartTime, data.interval);&#13;&#10;            } else if (data.frequency === 'weekly') {&#13;&#10;                currentStartTime = addWeeks(currentStartTime, data.interval);&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        console.log(&quot;Generated sessions:&quot;, newSessions);&#13;&#10;        onGenerate(newSessions);&#13;&#10;        setOpen(false);&#13;&#10;    };&#13;&#10;&#13;&#10;    return (&#13;&#10;        &lt;Dialog open={open} onOpenChange={setOpen}&gt;&#13;&#10;            &lt;DialogContent&gt;&#13;&#10;                &lt;DialogHeader&gt;&#13;&#10;                    &lt;DialogTitle&gt;Add Recurring Sessions&lt;/DialogTitle&gt;&#13;&#10;                    &lt;DialogDescription&gt;&#13;&#10;                        Generate a series of sessions based on a recurring pattern.&#13;&#10;                        {maxSessions &gt; 0 &amp;&amp; (&#13;&#10;                            &lt;span className=&quot;block mt-1 text-sm text-muted-foreground&quot;&gt;&#13;&#10;                                Limit: {currentSessionCount}/{maxSessions} sessions used.&#13;&#10;                            &lt;/span&gt;&#13;&#10;                        )}&#13;&#10;                    &lt;/DialogDescription&gt;&#13;&#10;                &lt;/DialogHeader&gt;&#13;&#10;                &lt;form onSubmit={handleSubmit(onSubmit)} className=&quot;space-y-4&quot;&gt;&#13;&#10;                    &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#13;&#10;                        &lt;Controller name=&quot;frequency&quot; control={control} render={({field}) =&gt; (&#13;&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Frequency&lt;/FormLabel&gt;&lt;Select onValueChange={field.onChange}&#13;&#10;                                                                              defaultValue={field.value}&gt;&lt;FormControl&gt;&lt;SelectTrigger&gt;&lt;SelectValue/&gt;&lt;/SelectTrigger&gt;&lt;/FormControl&gt;&lt;SelectContent&gt;&lt;SelectItem&#13;&#10;                                value=&quot;daily&quot;&gt;Daily&lt;/SelectItem&gt;&lt;SelectItem&#13;&#10;                                value=&quot;weekly&quot;&gt;Weekly&lt;/SelectItem&gt;&lt;/SelectContent&gt;&lt;/Select&gt;&lt;/FormItem&gt;&#13;&#10;                        )}/&gt;&#13;&#10;                        &lt;Controller name=&quot;interval&quot; control={control} render={({field}) =&gt; (&#13;&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Repeat Every&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input type=&quot;number&quot;&#13;&#10;                                                                                             min=&quot;1&quot; {...field}&#13;&#10;                                                                                             onChange={e =&gt; field.onChange(parseInt(e.target.value))}/&gt;&lt;/FormControl&gt;&lt;/FormItem&gt;&#13;&#10;                        )}/&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &lt;Controller name=&quot;count&quot; control={control} render={({field}) =&gt; (&#13;&#10;                        &lt;FormItem&gt;&lt;FormLabel&gt;Number of Sessions&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input type=&quot;number&quot; min=&quot;1&quot;&#13;&#10;                                                                                               max=&quot;52&quot; {...field}&#13;&#10;                                                                                               onChange={e =&gt; field.onChange(parseInt(e.target.value))}/&gt;&lt;/FormControl&gt;&lt;/FormItem&gt;&#13;&#10;                    )}/&gt;&#13;&#10;                    &lt;Controller name=&quot;startDate&quot; control={control} render={({field}) =&gt; (&#13;&#10;                        &lt;FormItem&gt;&lt;FormLabel&gt;Start Date&lt;/FormLabel&gt;&lt;Popover&gt;&lt;PopoverTrigger asChild&gt;&lt;Button&#13;&#10;                            variant=&quot;outline&quot; className=&quot;w-full justify-start font-normal&quot;&gt;&lt;CalendarIcon&#13;&#10;                            className=&quot;mr-2 h-4 w-4&quot;/&gt;{field.value ? format(field.value, 'PPP') :&#13;&#10;                            &lt;span&gt;Pick a date&lt;/span&gt;}&lt;/Button&gt;&lt;/PopoverTrigger&gt;&lt;PopoverContent&#13;&#10;                            className=&quot;w-auto p-0&quot;&gt;&lt;Calendar mode=&quot;single&quot; selected={field.value}&#13;&#10;                                                             onSelect={field.onChange}&#13;&#10;                                                             autoFocus/&gt;&lt;/PopoverContent&gt;&lt;/Popover&gt;&lt;/FormItem&gt;&#13;&#10;                    )}/&gt;&#13;&#10;                    &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#13;&#10;                        &lt;Controller name=&quot;startTime&quot; control={control} render={({field}) =&gt; (&#13;&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Start Time&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#13;&#10;                                type=&quot;time&quot; {...field}/&gt;&lt;/FormControl&gt;&lt;/FormItem&gt;&#13;&#10;                        )}/&gt;&#13;&#10;                        &lt;Controller name=&quot;durationHours&quot; control={control} render={({field}) =&gt; (&#13;&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Duration (hours)&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input type=&quot;number&quot; min=&quot;0.5&quot;&#13;&#10;                                                                                                 step=&quot;0.5&quot; {...field}&#13;&#10;                                                                                                 onChange={e =&gt; field.onChange(parseFloat(e.target.value))}/&gt;&lt;/FormControl&gt;&lt;/FormItem&gt;&#13;&#10;                        )}/&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;&#13;&#10;                    &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#13;&#10;                        &lt;Controller name=&quot;salesStartRuleType&quot; control={control} render={({field}) =&gt; (&#13;&#10;                            &lt;FormItem&gt;&#13;&#10;                                &lt;FormLabel&gt;Sales Start Rule&lt;/FormLabel&gt;&#13;&#10;                                &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#13;&#10;                                    &lt;FormControl&gt;&#13;&#10;                                        &lt;SelectTrigger&gt;&#13;&#10;                                            &lt;SelectValue/&gt;&#13;&#10;                                        &lt;/SelectTrigger&gt;&#13;&#10;                                    &lt;/FormControl&gt;&#13;&#10;                                    &lt;SelectContent&gt;&#13;&#10;                                        &lt;SelectItem value=&quot;IMMEDIATE&quot;&gt;Immediate&lt;/SelectItem&gt;&#13;&#10;                                        &lt;SelectItem value=&quot;ROLLING&quot;&gt;Rolling (Before Event)&lt;/SelectItem&gt;&#13;&#10;                                        &lt;SelectItem value=&quot;FIXED&quot;&gt;Fixed Datetime&lt;/SelectItem&gt;&#13;&#10;                                    &lt;/SelectContent&gt;&#13;&#10;                                &lt;/Select&gt;&#13;&#10;                            &lt;/FormItem&gt;&#13;&#10;                        )}/&gt;&#13;&#10;&#13;&#10;&#13;&#10;                        {watch('salesStartRuleType') === 'ROLLING' &amp;&amp; (&#13;&#10;                            &lt;div className=&quot;space-y-2&quot;&gt;&#13;&#10;                                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#13;&#10;                                    &lt;FormLabel&gt;Unit&lt;/FormLabel&gt;&#13;&#10;                                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#13;&#10;                                        &lt;span className=&quot;text-sm text-muted-foreground&quot;&gt;Hours&lt;/span&gt;&#13;&#10;                                        &lt;Controller&#13;&#10;                                            name=&quot;isDaysNotHours&quot;&#13;&#10;                                            control={control}&#13;&#10;                                            render={({field}) =&gt; (&#13;&#10;                                                &lt;Switch&#13;&#10;                                                    checked={field.value}&#13;&#10;                                                    onCheckedChange={handleUnitToggle}&#13;&#10;                                                /&gt;&#13;&#10;                                            )}&#13;&#10;                                        /&gt;&#13;&#10;                                        &lt;span className=&quot;text-sm text-muted-foreground&quot;&gt;Days&lt;/span&gt;&#13;&#10;                                    &lt;/div&gt;&#13;&#10;                                &lt;/div&gt;&#13;&#10;&#13;&#10;                                &lt;Controller&#13;&#10;                                    name=&quot;salesStartHoursBefore&quot;&#13;&#10;                                    control={control}&#13;&#10;                                    render={({field}) =&gt; (&#13;&#10;                                        &lt;FormItem&gt;&#13;&#10;                                            &lt;FormLabel&gt;&#13;&#10;                                                {isDaysNotHours ? 'Days before event' : 'Hours before event'}&#13;&#10;                                            &lt;/FormLabel&gt;&#13;&#10;                                            &lt;FormControl&gt;&#13;&#10;                                                &lt;Input&#13;&#10;                                                    type=&quot;number&quot;&#13;&#10;                                                    min=&quot;1&quot;&#13;&#10;                                                    {...field}&#13;&#10;                                                    value={isDaysNotHours ? Math.round(field.value / 24) : field.value}&#13;&#10;                                                    onChange={(e) =&gt; {&#13;&#10;                                                        const value = parseInt(e.target.value);&#13;&#10;                                                        if (isDaysNotHours) {&#13;&#10;                                                            // If days, store as hours in the form data&#13;&#10;                                                            field.onChange(value * 24);&#13;&#10;                                                        } else {&#13;&#10;                                                            field.onChange(value);&#13;&#10;                                                        }&#13;&#10;                                                    }}&#13;&#10;                                                /&gt;&#13;&#10;                                            &lt;/FormControl&gt;&#13;&#10;                                        &lt;/FormItem&gt;&#13;&#10;                                    )}&#13;&#10;                                /&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;                        )}&#13;&#10;&#13;&#10;                        {watch('salesStartRuleType') === 'FIXED' &amp;&amp; (&#13;&#10;                            &lt;&gt;&#13;&#10;                                &lt;Controller name=&quot;salesStartFixedDatetime&quot; control={control} render={({field}) =&gt; (&#13;&#10;                                    &lt;FormItem&gt;&#13;&#10;                                        &lt;FormLabel&gt;Sales Start Date&lt;/FormLabel&gt;&#13;&#10;                                        &lt;Popover&gt;&#13;&#10;                                            &lt;PopoverTrigger asChild&gt;&#13;&#10;                                                &lt;Button variant=&quot;outline&quot; className=&quot;w-full justify-start font-normal&quot;&gt;&#13;&#10;                                                    &lt;CalendarIcon className=&quot;mr-2 h-4 w-4&quot;/&gt;&#13;&#10;                                                    {field.value ? format(field.value, 'PPP') :&#13;&#10;                                                        &lt;span&gt;Pick a date&lt;/span&gt;}&#13;&#10;                                                &lt;/Button&gt;&#13;&#10;                                            &lt;/PopoverTrigger&gt;&#13;&#10;                                            &lt;PopoverContent className=&quot;w-auto p-0&quot;&gt;&#13;&#10;                                                &lt;Calendar&#13;&#10;                                                    mode=&quot;single&quot;&#13;&#10;                                                    selected={field.value}&#13;&#10;                                                    onSelect={field.onChange}&#13;&#10;                                                    autoFocus&#13;&#10;                                                /&gt;&#13;&#10;                                            &lt;/PopoverContent&gt;&#13;&#10;                                        &lt;/Popover&gt;&#13;&#10;                                    &lt;/FormItem&gt;&#13;&#10;                                )}/&gt;&#13;&#10;                                &lt;Controller name=&quot;salesStartFixedTime&quot; control={control} render={({field}) =&gt; (&#13;&#10;                                    &lt;FormItem&gt;&#13;&#10;                                        &lt;FormLabel&gt;Sales Start Time&lt;/FormLabel&gt;&#13;&#10;                                        &lt;FormControl&gt;&#13;&#10;                                            &lt;Input type=&quot;time&quot; {...field} /&gt;&#13;&#10;                                        &lt;/FormControl&gt;&#13;&#10;                                    &lt;/FormItem&gt;&#13;&#10;                                )}/&gt;&#13;&#10;                            &lt;/&gt;&#13;&#10;                        )}&#13;&#10;                    &lt;/div&gt;&#13;&#10;&#13;&#10;                    &lt;DialogFooter&gt;&#13;&#10;                        &lt;Button type=&quot;button&quot; onClick={handleSubmit(onSubmit)}&gt;Generate Sessions&lt;/Button&gt;&#13;&#10;                    &lt;/DialogFooter&gt;&#13;&#10;                &lt;/form&gt;&#13;&#10;            &lt;/DialogContent&gt;&#13;&#10;        &lt;/Dialog&gt;&#13;&#10;    );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/SeratingStep.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/SeratingStep.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {useFieldArray, useFormContext} from 'react-hook-form';&#10;import {CreateEventFormData} from '@/lib/validators/event';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {&#10;    SessionListItemSeating&#10;} from &quot;@/app/manage/organization/[organization_id]/event/_components/SessionListItemSeating&quot;;&#10;import {OnlineConfigView} from &quot;@/app/manage/organization/[organization_id]/event/_components/OnlineConfigView&quot;;&#10;import {PhysicalConfigView} from &quot;@/app/manage/organization/[organization_id]/event/_components/PhysicalConfigView&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {Checkbox} from &quot;@/components/ui/checkbox&quot;;&#10;import {Label} from &quot;@/components/ui/label&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {ArrowLeft} from &quot;lucide-react&quot;;&#10;&#10;interface SeatingStepProps {&#10;    onConfigModeChange?: (isInConfigMode: boolean) =&gt; void;&#10;}&#10;&#10;// --- Main Seating Step Component ---&#10;export function SeatingStep({ onConfigModeChange }: SeatingStepProps) {&#10;    const { control, formState: { errors }, watch, getValues, setValue } = useFormContext&lt;CreateEventFormData&gt;();&#10;    const [configuringIndex, setConfiguringIndex] = useState&lt;number | null&gt;(null);&#10;    const [applyToAll, setApplyToAll] = useState(false);&#10;&#10;    const { fields } = useFieldArray({&#10;        control,&#10;        name: &quot;sessions&quot;,&#10;    });&#10;&#10;    // Get the session being configured&#10;    const currentSession = configuringIndex !== null ? watch(`sessions.${configuringIndex}`) : null;&#10;&#10;    // Notify parent component when configuration mode changes&#10;    useEffect(() =&gt; {&#10;        if (onConfigModeChange) {&#10;            onConfigModeChange(configuringIndex !== null);&#10;        }&#10;    }, [configuringIndex, onConfigModeChange]);&#10;&#10;    const handleSave = (layoutData: any) =&gt; {&#10;        if (configuringIndex === null) return;&#10;&#10;        setValue(`sessions.${configuringIndex}.layoutData`, layoutData);&#10;&#10;        if (applyToAll) {&#10;            const allSessions = getValues('sessions');&#10;            allSessions.forEach((s, i) =&gt; {&#10;                // Apply only to sessions of the same type (online/physical)&#10;                if (s.isOnline === currentSession?.isOnline) {&#10;                    setValue(`sessions.${i}.layoutData`, layoutData);&#10;                }&#10;            });&#10;            toast.success(`Seating applied to all ${currentSession?.isOnline ? 'online' : 'physical'} sessions.`);&#10;        } else {&#10;            toast.success(`Seating configured for Session ${configuringIndex + 1}.`);&#10;        }&#10;&#10;        setConfiguringIndex(null);&#10;    };&#10;&#10;    // If we're configuring a session, show the full-page configuration view&#10;    if (configuringIndex !== null &amp;&amp; currentSession) {&#10;        return (&#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;Button&#10;                        variant=&quot;ghost&quot;&#10;                        onClick={() =&gt; setConfiguringIndex(null)}&#10;                        className=&quot;flex items-center gap-1&quot;&#10;                    &gt;&#10;                        &lt;ArrowLeft className=&quot;h-4 w-4&quot; /&gt;&#10;                        Back to Sessions&#10;                    &lt;/Button&gt;&#10;                    &lt;h2 className=&quot;text-xl font-semibold&quot;&gt;&#10;                        Configure Seating for Session {configuringIndex + 1}&#10;                    &lt;/h2&gt;&#10;                    &lt;div&gt;&lt;/div&gt; {/* Empty div for flexbox spacing */}&#10;                &lt;/div&gt;&#10;&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;&#10;                            {currentSession.isOnline&#10;                                ? &quot;Online Capacity Configuration&quot;&#10;                                : &quot;Physical Seating Configuration&quot;}&#10;                        &lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;&#10;                            {currentSession.isOnline&#10;                                ? &quot;Set the capacity and ticket tier for your online event.&quot;&#10;                                : &quot;Choose a layout template or create a new one, then assign your tiers.&quot;}&#10;                        &lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                        {currentSession.isOnline ? (&#10;                            &lt;OnlineConfigView onSave={handleSave} /&gt;&#10;                        ) : (&#10;                            &lt;PhysicalConfigView onSave={handleSave} /&gt;&#10;                        )}&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                &lt;div className=&quot;flex items-center justify-between border-t pt-4 mt-8&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;Checkbox&#10;                            id=&quot;apply-to-all-seating&quot;&#10;                            checked={applyToAll}&#10;                            onCheckedChange={(checked) =&gt; setApplyToAll(checked === true)}&#10;                        /&gt;&#10;                        &lt;Label htmlFor=&quot;apply-to-all-seating&quot;&gt;&#10;                            Apply to all {currentSession.isOnline ? 'online' : 'physical'} sessions&#10;                        &lt;/Label&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    // Otherwise show the session list&#10;    return (&#10;        &lt;Card&gt;&#10;            &lt;CardHeader&gt;&#10;                &lt;CardTitle&gt;Seating &amp; Tier Assignment&lt;/CardTitle&gt;&#10;                &lt;CardDescription&gt;&#10;                    Configure the seating layout and assign ticket tiers for each session.&#10;                &lt;/CardDescription&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;                {fields.map((field, index) =&gt; (&#10;                    &lt;SessionListItemSeating&#10;                        key={field.id}&#10;                        field={field}&#10;                        index={index}&#10;                        onConfigure={() =&gt; setConfiguringIndex(index)}&#10;                    /&gt;&#10;                ))}&#10;&#10;                {errors.sessions?.root &amp;&amp; (&#10;                    &lt;p className=&quot;text-sm font-medium text-destructive&quot;&gt;{errors.sessions.root.message}&lt;/p&gt;&#10;                )}&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect} from 'react';&#10;import {useFieldArray, useFormContext} from 'react-hook-form';&#10;import {CreateEventFormData} from '@/lib/validators/event';&#10;import {SessionListItemSeating} from &quot;@/app/manage/organization/[organization_id]/event/_components/SessionListItemSeating&quot;;&#10;import {OnlineConfigView} from &quot;@/app/manage/organization/[organization_id]/event/_components/OnlineConfigView&quot;;&#10;import {PhysicalConfigView} from &quot;@/app/manage/organization/[organization_id]/event/_components/PhysicalConfigView&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {Checkbox} from &quot;@/components/ui/checkbox&quot;;&#10;import {Label} from &quot;@/components/ui/label&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {ArrowLeft} from &quot;lucide-react&quot;;&#10;&#10;interface SeatingStepProps {&#10;    onConfigModeChange?: (isInConfigMode: boolean) =&gt; void;&#10;}&#10;&#10;// --- Main Seating Step Component ---&#10;export function SeatingStep({ onConfigModeChange }: SeatingStepProps) {&#10;    const { control, formState: { errors }, watch, getValues, setValue } = useFormContext&lt;CreateEventFormData&gt;();&#10;    const [configuringIndex, setConfiguringIndex] = useState&lt;number | null&gt;(null);&#10;    const [applyToAll, setApplyToAll] = useState(false);&#10;&#10;    const { fields } = useFieldArray({&#10;        control,&#10;        name: &quot;sessions&quot;,&#10;    });&#10;&#10;    // Get the session being configured&#10;    const currentSession = configuringIndex !== null ? watch(`sessions.${configuringIndex}`) : null;&#10;&#10;    // Notify parent component when configuration mode changes&#10;    useEffect(() =&gt; {&#10;        if (onConfigModeChange) {&#10;            onConfigModeChange(configuringIndex !== null);&#10;        }&#10;    }, [configuringIndex, onConfigModeChange]);&#10;&#10;    const handleSave = (layoutData: any) =&gt; {&#10;        if (configuringIndex === null) return;&#10;&#10;        setValue(`sessions.${configuringIndex}.layoutData`, layoutData);&#10;&#10;        if (applyToAll) {&#10;            const allSessions = getValues('sessions');&#10;            allSessions.forEach((s, i) =&gt; {&#10;                // Apply only to sessions of the same type (online/physical)&#10;                if (s.isOnline === currentSession?.isOnline) {&#10;                    setValue(`sessions.${i}.layoutData`, layoutData);&#10;                }&#10;            });&#10;            toast.success(`Seating applied to all ${currentSession?.isOnline ? 'online' : 'physical'} sessions.`);&#10;        } else {&#10;            toast.success(`Seating configured for Session ${configuringIndex + 1}.`);&#10;        }&#10;&#10;        setConfiguringIndex(null);&#10;    };&#10;&#10;    // If we're configuring a session, show the full-page configuration view&#10;    if (configuringIndex !== null &amp;&amp; currentSession) {&#10;        return (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;Button&#10;                        variant=&quot;ghost&quot;&#10;                        onClick={() =&gt; setConfiguringIndex(null)}&#10;                        className=&quot;flex items-center gap-1&quot;&#10;                    &gt;&#10;                        &lt;ArrowLeft className=&quot;h-4 w-4&quot; /&gt;&#10;                        Back to Sessions&#10;                    &lt;/Button&gt;&#10;                    &lt;h2 className=&quot;text-xl font-semibold&quot;&gt;&#10;                        Configure Seating for Session {configuringIndex + 1}&#10;                    &lt;/h2&gt;&#10;                    &lt;div&gt;&lt;/div&gt; {/* Empty div for flexbox spacing */}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-medium&quot;&gt;&#10;                        {currentSession.isOnline&#10;                            ? &quot;Online Capacity Configuration&quot;&#10;                            : &quot;Physical Seating Configuration&quot;}&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-muted-foreground text-sm&quot;&gt;&#10;                        {currentSession.isOnline&#10;                            ? &quot;Set the capacity and ticket tier for your online event.&quot;&#10;                            : &quot;Choose a layout template or create a new one, then assign your tiers.&quot;}&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div className=&quot;border rounded-md p-6 bg-card&quot;&gt;&#10;                    {currentSession.isOnline ? (&#10;                        &lt;OnlineConfigView onSave={handleSave} /&gt;&#10;                    ) : (&#10;                        &lt;PhysicalConfigView onSave={handleSave} /&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex items-center border-t pt-4 mt-8&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;Checkbox&#10;                            id=&quot;apply-to-all-seating&quot;&#10;                            checked={applyToAll}&#10;                            onCheckedChange={(checked) =&gt; setApplyToAll(checked === true)}&#10;                        /&gt;&#10;                        &lt;Label htmlFor=&quot;apply-to-all-seating&quot;&gt;&#10;                            Apply to all {currentSession.isOnline ? 'online' : 'physical'} sessions&#10;                        &lt;/Label&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    // Otherwise show the session list&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;div&gt;&#10;                &lt;h2 className=&quot;text-xl font-semibold mb-1&quot;&gt;Seating &amp; Tier Assignment&lt;/h2&gt;&#10;                &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                    Configure the seating layout and assign ticket tiers for each session.&#10;                &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;                {fields.map((field, index) =&gt; (&#10;                    &lt;SessionListItemSeating&#10;                        key={field.id}&#10;                        field={field}&#10;                        index={index}&#10;                        onConfigure={() =&gt; setConfiguringIndex(index)}&#10;                    /&gt;&#10;                ))}&#10;&#10;                {errors.sessions?.root &amp;&amp; (&#10;                    &lt;p className=&quot;text-sm font-medium text-destructive&quot;&gt;{errors.sessions.root.message}&lt;/p&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/SingleSessionDialog.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/SingleSessionDialog.tsx" />
              <option name="originalContent" value="import {Controller, useForm} from &quot;react-hook-form&quot;;&#10;import {format, setHours, setMinutes, subDays, subHours} from &quot;date-fns&quot;;&#10;import {&#10;    Dialog,&#10;    DialogContent,&#10;    DialogDescription,&#10;    DialogFooter,&#10;    DialogHeader,&#10;    DialogTitle&#10;} from &quot;@/components/ui/dialog&quot;;&#10;import {FormControl, FormItem, FormLabel} from &quot;@/components/ui/form&quot;;&#10;import {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from &quot;@/components/ui/select&quot;;&#10;import {Input} from &quot;@/components/ui/input&quot;;&#10;import {Popover, PopoverContent, PopoverTrigger} from &quot;@/components/ui/popover&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {Calendar as CalendarIcon} from &quot;lucide-react&quot;;&#10;import {Calendar} from &quot;@/components/ui/calendar&quot;;&#10;import * as React from &quot;react&quot;;&#10;import {SessionFormData} from &quot;@/lib/validators/event&quot;;&#10;import {Switch} from &quot;@/components/ui/switch&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {Enums, SessionType} from &quot;@/lib/validators/enums&quot;;&#10;&#10;interface SingleSessionFormValues {&#10;    startDate: Date;&#10;    startTime: string;&#10;    durationHours: number;&#10;    salesStartRuleType: Enums;&#10;    salesStartHoursBefore: number;&#10;    salesStartFixedDatetime: Date;&#10;    salesStartFixedTime: string; // Added field for fixed time&#10;    isDaysNotHours: boolean;&#10;}&#10;&#10;export function SingleSessionDialog({open, setOpen, onAdd, currentSessionCount, maxSessions}: {&#10;    open: boolean,&#10;    setOpen: (open: boolean) =&gt; void,&#10;    onAdd: (session: SessionFormData) =&gt; void,&#10;    currentSessionCount: number,&#10;    maxSessions: number&#10;}) {&#10;    const {control, handleSubmit, watch, setValue} = useForm&lt;SingleSessionFormValues&gt;({&#10;        defaultValues: {&#10;            startDate: new Date(),&#10;            startTime: '19:00',&#10;            durationHours: 2,&#10;            salesStartRuleType: Enums.ROLLING,&#10;            salesStartHoursBefore: 168,&#10;            salesStartFixedDatetime: new Date(),&#10;            salesStartFixedTime: '12:00', // Default fixed time&#10;            isDaysNotHours: true, // Field to track if user is entering days or hours&#10;        }&#10;    });&#10;&#10;    const salesStartHoursBefore = watch('salesStartHoursBefore');&#10;    const isDaysNotHours = watch('isDaysNotHours');&#10;&#10;    // Handle toggling between days and hours&#10;    const handleUnitToggle = (checked: boolean) =&gt; {&#10;        setValue('isDaysNotHours', checked);&#10;        if (checked) {&#10;            // Converting hours to days (rounded)&#10;            setValue('salesStartHoursBefore', Math.round(salesStartHoursBefore / 24) * 24);&#10;        } else {&#10;            // Converting days to hours&#10;            setValue('salesStartHoursBefore', Math.round(salesStartHoursBefore / 24));&#10;        }&#10;    };&#10;&#10;    const onSubmit = (data: SingleSessionFormValues) =&gt; {&#10;        // Check if adding this session would exceed the limit&#10;        console.log(&quot;Current session count:&quot;, currentSessionCount);&#10;        console.log(&quot;Submitted data:&quot;, data);&#10;        if (currentSessionCount &gt;= maxSessions) {&#10;            toast.error(`Cannot add more sessions. You have reached the limit of ${maxSessions} sessions.`);&#10;            return;&#10;        }&#10;&#10;        // Create the session start time by combining date and time&#10;        const startTime = setMinutes(&#10;            setHours(&#10;                new Date(data.startDate), // Ensure we have a fresh Date object&#10;                parseInt(data.startTime.split(':')[0])&#10;            ),&#10;            parseInt(data.startTime.split(':')[1])&#10;        );&#10;&#10;        // Calculate end time based on duration&#10;        const endTime = new Date(startTime.getTime() + data.durationHours * 60 * 60 * 1000);&#10;&#10;        // Calculate sales start time based on the rule type&#10;        let salesStartTime = new Date(subDays(startTime, 7)).toISOString();&#10;&#10;        if (data.salesStartRuleType === Enums.IMMEDIATE) {&#10;            // For immediate sales, use current time&#10;            salesStartTime = new Date().toISOString();&#10;        } else if (data.salesStartRuleType === Enums.ROLLING) {&#10;            // For rolling sales, subtract the specified hours from the event start time&#10;            salesStartTime = subHours(startTime, data.salesStartHoursBefore).toISOString();&#10;        } else if (data.salesStartRuleType === Enums.FIXED) {&#10;            // For fixed datetime, combine the selected date with the time&#10;            const [hours, minutes] = data.salesStartFixedTime.split(':').map(num =&gt; parseInt(num));&#10;            const fixedSalesStartTime = setMinutes(&#10;                setHours(&#10;                    new Date(data.salesStartFixedDatetime),&#10;                    hours&#10;                ),&#10;                minutes&#10;            );&#10;&#10;            // Validate that sales start time is before event start time&#10;            if (fixedSalesStartTime &gt;= startTime) {&#10;                toast.error(&quot;Sales start time must be before the event start time&quot;);&#10;                return;&#10;            }&#10;&#10;            salesStartTime = fixedSalesStartTime.toISOString();&#10;        }&#10;&#10;        // Create the session object&#10;        const newSession: SessionFormData = {&#10;            startTime: startTime.toISOString(),&#10;            endTime: endTime.toISOString(),&#10;            sessionType: SessionType.PHYSICAL,&#10;            salesStartTime: salesStartTime, // Use the calculated sales start time&#10;            layoutData: {name: null, layout: {blocks: []}}&#10;        };&#10;&#10;        console.log(&quot;New session:&quot;, newSession);&#10;        onAdd(newSession);&#10;        setOpen(false);&#10;    };&#10;&#10;    return (&#10;        &lt;Dialog open={open} onOpenChange={setOpen}&gt;&#10;            &lt;DialogContent&gt;&#10;                &lt;DialogHeader&gt;&#10;                    &lt;DialogTitle&gt;Add Single Session&lt;/DialogTitle&gt;&#10;                    &lt;DialogDescription&gt;&#10;                        Configure the details for this session.&#10;                        {maxSessions &gt; 0 &amp;&amp; (&#10;                            &lt;span className=&quot;block mt-1 text-sm text-muted-foreground&quot;&gt;&#10;                                Limit: {currentSessionCount}/{maxSessions} sessions used.&#10;                            &lt;/span&gt;&#10;                        )}&#10;                    &lt;/DialogDescription&gt;&#10;                &lt;/DialogHeader&gt;&#10;                &lt;form onSubmit={handleSubmit(onSubmit)} className=&quot;space-y-4&quot;&gt;&#10;                    &lt;Controller name=&quot;startDate&quot; control={control} render={({field}) =&gt; (&#10;                        &lt;FormItem&gt;&#10;                            &lt;FormLabel&gt;Date&lt;/FormLabel&gt;&#10;                            &lt;Popover&gt;&#10;                                &lt;PopoverTrigger asChild&gt;&#10;                                    &lt;Button variant=&quot;outline&quot; className=&quot;w-full justify-start font-normal&quot;&gt;&#10;                                        &lt;CalendarIcon className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;                                        {field.value ? format(field.value, 'PPP') : &lt;span&gt;Pick a date&lt;/span&gt;}&#10;                                    &lt;/Button&gt;&#10;                                &lt;/PopoverTrigger&gt;&#10;                                &lt;PopoverContent className=&quot;w-auto p-0&quot;&gt;&#10;                                    &lt;Calendar&#10;                                        mode=&quot;single&quot;&#10;                                        selected={field.value}&#10;                                        onSelect={field.onChange}&#10;                                        autoFocus&#10;                                    /&gt;&#10;                                &lt;/PopoverContent&gt;&#10;                            &lt;/Popover&gt;&#10;                        &lt;/FormItem&gt;&#10;                    )}/&gt;&#10;&#10;                    &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;Controller name=&quot;startTime&quot; control={control} render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&#10;                                &lt;FormLabel&gt;Start Time&lt;/FormLabel&gt;&#10;                                &lt;FormControl&gt;&#10;                                    &lt;Input type=&quot;time&quot; {...field}/&gt;&#10;                                &lt;/FormControl&gt;&#10;                            &lt;/FormItem&gt;&#10;                        )}/&gt;&#10;                        &lt;Controller name=&quot;durationHours&quot; control={control} render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&#10;                                &lt;FormLabel&gt;Duration (hours)&lt;/FormLabel&gt;&#10;                                &lt;FormControl&gt;&#10;                                    &lt;Input&#10;                                        type=&quot;number&quot;&#10;                                        min=&quot;0.5&quot;&#10;                                        step=&quot;0.5&quot;&#10;                                        {...field}&#10;                                        onChange={e =&gt; field.onChange(parseFloat(e.target.value))}&#10;                                    /&gt;&#10;                                &lt;/FormControl&gt;&#10;                            &lt;/FormItem&gt;&#10;                        )}/&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;Controller name=&quot;salesStartRuleType&quot; control={control} render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&#10;                                &lt;FormLabel&gt;Sales Start Rule&lt;/FormLabel&gt;&#10;                                &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#10;                                    &lt;FormControl&gt;&#10;                                        &lt;SelectTrigger&gt;&#10;                                            &lt;SelectValue/&gt;&#10;                                        &lt;/SelectTrigger&gt;&#10;                                    &lt;/FormControl&gt;&#10;                                    &lt;SelectContent&gt;&#10;                                        &lt;SelectItem value=&quot;IMMEDIATE&quot;&gt;Immediate&lt;/SelectItem&gt;&#10;                                        &lt;SelectItem value=&quot;ROLLING&quot;&gt;Rolling (Before Event)&lt;/SelectItem&gt;&#10;                                        &lt;SelectItem value=&quot;FIXED&quot;&gt;Fixed Datetime&lt;/SelectItem&gt;&#10;                                    &lt;/SelectContent&gt;&#10;                                &lt;/Select&gt;&#10;                            &lt;/FormItem&gt;&#10;                        )}/&gt;&#10;&#10;                        {watch('salesStartRuleType') === 'ROLLING' &amp;&amp; (&#10;                            &lt;div className=&quot;space-y-2&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                                    &lt;FormLabel&gt;Unit&lt;/FormLabel&gt;&#10;                                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                                        &lt;span className=&quot;text-sm text-muted-foreground&quot;&gt;Hours&lt;/span&gt;&#10;                                        &lt;Controller&#10;                                            name=&quot;isDaysNotHours&quot;&#10;                                            control={control}&#10;                                            render={({field}) =&gt; (&#10;                                                &lt;Switch&#10;                                                    checked={field.value}&#10;                                                    onCheckedChange={handleUnitToggle}&#10;                                                /&gt;&#10;                                            )}&#10;                                        /&gt;&#10;                                        &lt;span className=&quot;text-sm text-muted-foreground&quot;&gt;Days&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;                                &lt;Controller&#10;                                    name=&quot;salesStartHoursBefore&quot;&#10;                                    control={control}&#10;                                    render={({field}) =&gt; (&#10;                                        &lt;FormItem&gt;&#10;                                            &lt;FormLabel&gt;&#10;                                                {isDaysNotHours ? 'Days before event' : 'Hours before event'}&#10;                                            &lt;/FormLabel&gt;&#10;                                            &lt;FormControl&gt;&#10;                                                &lt;Input&#10;                                                    type=&quot;number&quot;&#10;                                                    min=&quot;1&quot;&#10;                                                    {...field}&#10;                                                    value={isDaysNotHours ? Math.round(field.value / 24) : field.value}&#10;                                                    onChange={(e) =&gt; {&#10;                                                        const value = parseInt(e.target.value);&#10;                                                        if (isDaysNotHours) {&#10;                                                            // If days, store as hours in the form data&#10;                                                            field.onChange(value * 24);&#10;                                                        } else {&#10;                                                            field.onChange(value);&#10;                                                        }&#10;                                                    }}&#10;                                                /&gt;&#10;                                            &lt;/FormControl&gt;&#10;                                        &lt;/FormItem&gt;&#10;                                    )}&#10;                                /&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {watch('salesStartRuleType') === 'FIXED' &amp;&amp; (&#10;                            &lt;&gt;&#10;                                &lt;Controller name=&quot;salesStartFixedDatetime&quot; control={control} render={({field}) =&gt; (&#10;                                    &lt;FormItem&gt;&#10;                                        &lt;FormLabel&gt;Sales Start Date&lt;/FormLabel&gt;&#10;                                        &lt;Popover&gt;&#10;                                            &lt;PopoverTrigger asChild&gt;&#10;                                                &lt;Button variant=&quot;outline&quot; className=&quot;w-full justify-start font-normal&quot;&gt;&#10;                                                    &lt;CalendarIcon className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;                                                    {field.value ? format(field.value, 'PPP') :&#10;                                                        &lt;span&gt;Pick a date&lt;/span&gt;}&#10;                                                &lt;/Button&gt;&#10;                                            &lt;/PopoverTrigger&gt;&#10;                                            &lt;PopoverContent className=&quot;w-auto p-0&quot;&gt;&#10;                                                &lt;Calendar&#10;                                                    mode=&quot;single&quot;&#10;                                                    selected={field.value}&#10;                                                    onSelect={field.onChange}&#10;                                                    autoFocus&#10;                                                /&gt;&#10;                                            &lt;/PopoverContent&gt;&#10;                                        &lt;/Popover&gt;&#10;                                    &lt;/FormItem&gt;&#10;                                )}/&gt;&#10;                                &lt;Controller name=&quot;salesStartFixedTime&quot; control={control} render={({field}) =&gt; (&#10;                                    &lt;FormItem&gt;&#10;                                        &lt;FormLabel&gt;Sales Start Time&lt;/FormLabel&gt;&#10;                                        &lt;FormControl&gt;&#10;                                            &lt;Input type=&quot;time&quot; {...field} /&gt;&#10;                                        &lt;/FormControl&gt;&#10;                                    &lt;/FormItem&gt;&#10;                                )}/&gt;&#10;                            &lt;/&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;DialogFooter&gt;&#10;                        &lt;Button type=&quot;submit&quot;&gt;Add Session&lt;/Button&gt;&#10;                    &lt;/DialogFooter&gt;&#10;                &lt;/form&gt;&#10;            &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import {Controller, useForm} from &quot;react-hook-form&quot;;&#13;&#10;import {format, setHours, setMinutes, subDays, subHours} from &quot;date-fns&quot;;&#13;&#10;import {&#13;&#10;    Dialog,&#13;&#10;    DialogContent,&#13;&#10;    DialogDescription,&#13;&#10;    DialogFooter,&#13;&#10;    DialogHeader,&#13;&#10;    DialogTitle&#13;&#10;} from &quot;@/components/ui/dialog&quot;;&#13;&#10;import {FormControl, FormItem, FormLabel} from &quot;@/components/ui/form&quot;;&#13;&#10;import {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from &quot;@/components/ui/select&quot;;&#13;&#10;import {Input} from &quot;@/components/ui/input&quot;;&#13;&#10;import {Popover, PopoverContent, PopoverTrigger} from &quot;@/components/ui/popover&quot;;&#13;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#13;&#10;import {Calendar as CalendarIcon} from &quot;lucide-react&quot;;&#13;&#10;import {Calendar} from &quot;@/components/ui/calendar&quot;;&#13;&#10;import * as React from &quot;react&quot;;&#13;&#10;import {SessionFormData} from &quot;@/lib/validators/event&quot;;&#13;&#10;import {Switch} from &quot;@/components/ui/switch&quot;;&#13;&#10;import {toast} from &quot;sonner&quot;;&#13;&#10;import {Enums, SessionType} from &quot;@/lib/validators/enums&quot;;&#13;&#10;&#13;&#10;interface SingleSessionFormValues {&#13;&#10;    startDate: Date;&#13;&#10;    startTime: string;&#13;&#10;    durationHours: number;&#13;&#10;    salesStartRuleType: Enums;&#13;&#10;    salesStartHoursBefore: number;&#13;&#10;    salesStartFixedDatetime: Date;&#13;&#10;    salesStartFixedTime: string; // Added field for fixed time&#13;&#10;    isDaysNotHours: boolean;&#13;&#10;}&#13;&#10;&#13;&#10;export function SingleSessionDialog({open, setOpen, onAdd, currentSessionCount, maxSessions}: {&#13;&#10;    open: boolean,&#13;&#10;    setOpen: (open: boolean) =&gt; void,&#13;&#10;    onAdd: (session: SessionFormData) =&gt; void,&#13;&#10;    currentSessionCount: number,&#13;&#10;    maxSessions: number&#13;&#10;}) {&#13;&#10;    const {control, handleSubmit, watch, setValue} = useForm&lt;SingleSessionFormValues&gt;({&#13;&#10;        defaultValues: {&#13;&#10;            startDate: new Date(),&#13;&#10;            startTime: '19:00',&#13;&#10;            durationHours: 2,&#13;&#10;            salesStartRuleType: Enums.ROLLING,&#13;&#10;            salesStartHoursBefore: 168,&#13;&#10;            salesStartFixedDatetime: new Date(),&#13;&#10;            salesStartFixedTime: '12:00', // Default fixed time&#13;&#10;            isDaysNotHours: true, // Field to track if user is entering days or hours&#13;&#10;        }&#13;&#10;    });&#13;&#10;&#13;&#10;    const salesStartHoursBefore = watch('salesStartHoursBefore');&#13;&#10;    const isDaysNotHours = watch('isDaysNotHours');&#13;&#10;&#13;&#10;    // Handle toggling between days and hours&#13;&#10;    const handleUnitToggle = (checked: boolean) =&gt; {&#13;&#10;        setValue('isDaysNotHours', checked);&#13;&#10;        if (checked) {&#13;&#10;            // Converting hours to days (rounded)&#13;&#10;            setValue('salesStartHoursBefore', Math.round(salesStartHoursBefore / 24) * 24);&#13;&#10;        } else {&#13;&#10;            // Converting days to hours&#13;&#10;            setValue('salesStartHoursBefore', Math.round(salesStartHoursBefore / 24));&#13;&#10;        }&#13;&#10;    };&#13;&#10;&#13;&#10;    const onSubmit = (data: SingleSessionFormValues) =&gt; {&#13;&#10;        // Check if adding this session would exceed the limit&#13;&#10;        console.log(&quot;Current session count:&quot;, currentSessionCount);&#13;&#10;        console.log(&quot;Submitted data:&quot;, data);&#13;&#10;        if (currentSessionCount &gt;= maxSessions) {&#13;&#10;            toast.error(`Cannot add more sessions. You have reached the limit of ${maxSessions} sessions.`);&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        // Create the session start time by combining date and time&#13;&#10;        const startTime = setMinutes(&#13;&#10;            setHours(&#13;&#10;                new Date(data.startDate), // Ensure we have a fresh Date object&#13;&#10;                parseInt(data.startTime.split(':')[0])&#13;&#10;            ),&#13;&#10;            parseInt(data.startTime.split(':')[1])&#13;&#10;        );&#13;&#10;&#13;&#10;        // Calculate end time based on duration&#13;&#10;        const endTime = new Date(startTime.getTime() + data.durationHours * 60 * 60 * 1000);&#13;&#10;&#13;&#10;        // Calculate sales start time based on the rule type&#13;&#10;        let salesStartTime = new Date(subDays(startTime, 7)).toISOString();&#13;&#10;&#13;&#10;        if (data.salesStartRuleType === Enums.IMMEDIATE) {&#13;&#10;            // For immediate sales, use current time&#13;&#10;            salesStartTime = new Date().toISOString();&#13;&#10;        } else if (data.salesStartRuleType === Enums.ROLLING) {&#13;&#10;            // For rolling sales, subtract the specified hours from the event start time&#13;&#10;            salesStartTime = subHours(startTime, data.salesStartHoursBefore).toISOString();&#13;&#10;        } else if (data.salesStartRuleType === Enums.FIXED) {&#13;&#10;            // For fixed datetime, combine the selected date with the time&#13;&#10;            const [hours, minutes] = data.salesStartFixedTime.split(':').map(num =&gt; parseInt(num));&#13;&#10;            const fixedSalesStartTime = setMinutes(&#13;&#10;                setHours(&#13;&#10;                    new Date(data.salesStartFixedDatetime),&#13;&#10;                    hours&#13;&#10;                ),&#13;&#10;                minutes&#13;&#10;            );&#13;&#10;&#13;&#10;            // Validate that sales start time is before event start time&#13;&#10;            if (fixedSalesStartTime &gt;= startTime) {&#13;&#10;                toast.error(&quot;Sales start time must be before the event start time&quot;);&#13;&#10;                return;&#13;&#10;            }&#13;&#10;&#13;&#10;            salesStartTime = fixedSalesStartTime.toISOString();&#13;&#10;        }&#13;&#10;&#13;&#10;        // Create the session object&#13;&#10;        const newSession: SessionFormData = {&#13;&#10;            startTime: startTime.toISOString(),&#13;&#10;            endTime: endTime.toISOString(),&#13;&#10;            sessionType: SessionType.PHYSICAL,&#13;&#10;            salesStartTime: salesStartTime, // Use the calculated sales start time&#13;&#10;            layoutData: {name: null, layout: {blocks: []}}&#13;&#10;        };&#13;&#10;&#13;&#10;        console.log(&quot;New session:&quot;, newSession);&#13;&#10;        onAdd(newSession);&#13;&#10;        setOpen(false);&#13;&#10;    };&#13;&#10;&#13;&#10;    return (&#13;&#10;        &lt;Dialog open={open} onOpenChange={setOpen}&gt;&#13;&#10;            &lt;DialogContent&gt;&#13;&#10;                &lt;DialogHeader&gt;&#13;&#10;                    &lt;DialogTitle&gt;Add Single Session&lt;/DialogTitle&gt;&#13;&#10;                    &lt;DialogDescription&gt;&#13;&#10;                        Configure the details for this session.&#13;&#10;                        {maxSessions &gt; 0 &amp;&amp; (&#13;&#10;                            &lt;span className=&quot;block mt-1 text-sm text-muted-foreground&quot;&gt;&#13;&#10;                                Limit: {currentSessionCount}/{maxSessions} sessions used.&#13;&#10;                            &lt;/span&gt;&#13;&#10;                        )}&#13;&#10;                    &lt;/DialogDescription&gt;&#13;&#10;                &lt;/DialogHeader&gt;&#13;&#10;                &lt;form onSubmit={handleSubmit(onSubmit)} className=&quot;space-y-4&quot;&gt;&#13;&#10;                    &lt;Controller name=&quot;startDate&quot; control={control} render={({field}) =&gt; (&#13;&#10;                        &lt;FormItem&gt;&#13;&#10;                            &lt;FormLabel&gt;Date&lt;/FormLabel&gt;&#13;&#10;                            &lt;Popover&gt;&#13;&#10;                                &lt;PopoverTrigger asChild&gt;&#13;&#10;                                    &lt;Button variant=&quot;outline&quot; className=&quot;w-full justify-start font-normal&quot;&gt;&#13;&#10;                                        &lt;CalendarIcon className=&quot;mr-2 h-4 w-4&quot;/&gt;&#13;&#10;                                        {field.value ? format(field.value, 'PPP') : &lt;span&gt;Pick a date&lt;/span&gt;}&#13;&#10;                                    &lt;/Button&gt;&#13;&#10;                                &lt;/PopoverTrigger&gt;&#13;&#10;                                &lt;PopoverContent className=&quot;w-auto p-0&quot;&gt;&#13;&#10;                                    &lt;Calendar&#13;&#10;                                        mode=&quot;single&quot;&#13;&#10;                                        selected={field.value}&#13;&#10;                                        onSelect={field.onChange}&#13;&#10;                                        autoFocus&#13;&#10;                                    /&gt;&#13;&#10;                                &lt;/PopoverContent&gt;&#13;&#10;                            &lt;/Popover&gt;&#13;&#10;                        &lt;/FormItem&gt;&#13;&#10;                    )}/&gt;&#13;&#10;&#13;&#10;                    &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#13;&#10;                        &lt;Controller name=&quot;startTime&quot; control={control} render={({field}) =&gt; (&#13;&#10;                            &lt;FormItem&gt;&#13;&#10;                                &lt;FormLabel&gt;Start Time&lt;/FormLabel&gt;&#13;&#10;                                &lt;FormControl&gt;&#13;&#10;                                    &lt;Input type=&quot;time&quot; {...field}/&gt;&#13;&#10;                                &lt;/FormControl&gt;&#13;&#10;                            &lt;/FormItem&gt;&#13;&#10;                        )}/&gt;&#13;&#10;                        &lt;Controller name=&quot;durationHours&quot; control={control} render={({field}) =&gt; (&#13;&#10;                            &lt;FormItem&gt;&#13;&#10;                                &lt;FormLabel&gt;Duration (hours)&lt;/FormLabel&gt;&#13;&#10;                                &lt;FormControl&gt;&#13;&#10;                                    &lt;Input&#13;&#10;                                        type=&quot;number&quot;&#13;&#10;                                        min=&quot;0.5&quot;&#13;&#10;                                        step=&quot;0.5&quot;&#13;&#10;                                        {...field}&#13;&#10;                                        onChange={e =&gt; field.onChange(parseFloat(e.target.value))}&#13;&#10;                                    /&gt;&#13;&#10;                                &lt;/FormControl&gt;&#13;&#10;                            &lt;/FormItem&gt;&#13;&#10;                        )}/&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;&#13;&#10;                    &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#13;&#10;                        &lt;Controller name=&quot;salesStartRuleType&quot; control={control} render={({field}) =&gt; (&#13;&#10;                            &lt;FormItem&gt;&#13;&#10;                                &lt;FormLabel&gt;Sales Start Rule&lt;/FormLabel&gt;&#13;&#10;                                &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#13;&#10;                                    &lt;FormControl&gt;&#13;&#10;                                        &lt;SelectTrigger&gt;&#13;&#10;                                            &lt;SelectValue/&gt;&#13;&#10;                                        &lt;/SelectTrigger&gt;&#13;&#10;                                    &lt;/FormControl&gt;&#13;&#10;                                    &lt;SelectContent&gt;&#13;&#10;                                        &lt;SelectItem value=&quot;IMMEDIATE&quot;&gt;Immediate&lt;/SelectItem&gt;&#13;&#10;                                        &lt;SelectItem value=&quot;ROLLING&quot;&gt;Rolling (Before Event)&lt;/SelectItem&gt;&#13;&#10;                                        &lt;SelectItem value=&quot;FIXED&quot;&gt;Fixed Datetime&lt;/SelectItem&gt;&#13;&#10;                                    &lt;/SelectContent&gt;&#13;&#10;                                &lt;/Select&gt;&#13;&#10;                            &lt;/FormItem&gt;&#13;&#10;                        )}/&gt;&#13;&#10;&#13;&#10;                        {watch('salesStartRuleType') === 'ROLLING' &amp;&amp; (&#13;&#10;                            &lt;div className=&quot;space-y-2&quot;&gt;&#13;&#10;                                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#13;&#10;                                    &lt;FormLabel&gt;Unit&lt;/FormLabel&gt;&#13;&#10;                                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#13;&#10;                                        &lt;span className=&quot;text-sm text-muted-foreground&quot;&gt;Hours&lt;/span&gt;&#13;&#10;                                        &lt;Controller&#13;&#10;                                            name=&quot;isDaysNotHours&quot;&#13;&#10;                                            control={control}&#13;&#10;                                            render={({field}) =&gt; (&#13;&#10;                                                &lt;Switch&#13;&#10;                                                    checked={field.value}&#13;&#10;                                                    onCheckedChange={handleUnitToggle}&#13;&#10;                                                /&gt;&#13;&#10;                                            )}&#13;&#10;                                        /&gt;&#13;&#10;                                        &lt;span className=&quot;text-sm text-muted-foreground&quot;&gt;Days&lt;/span&gt;&#13;&#10;                                    &lt;/div&gt;&#13;&#10;                                &lt;/div&gt;&#13;&#10;&#13;&#10;                                &lt;Controller&#13;&#10;                                    name=&quot;salesStartHoursBefore&quot;&#13;&#10;                                    control={control}&#13;&#10;                                    render={({field}) =&gt; (&#13;&#10;                                        &lt;FormItem&gt;&#13;&#10;                                            &lt;FormLabel&gt;&#13;&#10;                                                {isDaysNotHours ? 'Days before event' : 'Hours before event'}&#13;&#10;                                            &lt;/FormLabel&gt;&#13;&#10;                                            &lt;FormControl&gt;&#13;&#10;                                                &lt;Input&#13;&#10;                                                    type=&quot;number&quot;&#13;&#10;                                                    min=&quot;1&quot;&#13;&#10;                                                    {...field}&#13;&#10;                                                    value={isDaysNotHours ? Math.round(field.value / 24) : field.value}&#13;&#10;                                                    onChange={(e) =&gt; {&#13;&#10;                                                        const value = parseInt(e.target.value);&#13;&#10;                                                        if (isDaysNotHours) {&#13;&#10;                                                            // If days, store as hours in the form data&#13;&#10;                                                            field.onChange(value * 24);&#13;&#10;                                                        } else {&#13;&#10;                                                            field.onChange(value);&#13;&#10;                                                        }&#13;&#10;                                                    }}&#13;&#10;                                                /&gt;&#13;&#10;                                            &lt;/FormControl&gt;&#13;&#10;                                        &lt;/FormItem&gt;&#13;&#10;                                    )}&#13;&#10;                                /&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;                        )}&#13;&#10;&#13;&#10;                        {watch('salesStartRuleType') === 'FIXED' &amp;&amp; (&#13;&#10;                            &lt;&gt;&#13;&#10;                                &lt;Controller name=&quot;salesStartFixedDatetime&quot; control={control} render={({field}) =&gt; (&#13;&#10;                                    &lt;FormItem&gt;&#13;&#10;                                        &lt;FormLabel&gt;Sales Start Date&lt;/FormLabel&gt;&#13;&#10;                                        &lt;Popover&gt;&#13;&#10;                                            &lt;PopoverTrigger asChild&gt;&#13;&#10;                                                &lt;Button variant=&quot;outline&quot; className=&quot;w-full justify-start font-normal&quot;&gt;&#13;&#10;                                                    &lt;CalendarIcon className=&quot;mr-2 h-4 w-4&quot;/&gt;&#13;&#10;                                                    {field.value ? format(field.value, 'PPP') :&#13;&#10;                                                        &lt;span&gt;Pick a date&lt;/span&gt;}&#13;&#10;                                                &lt;/Button&gt;&#13;&#10;                                            &lt;/PopoverTrigger&gt;&#13;&#10;                                            &lt;PopoverContent className=&quot;w-auto p-0&quot;&gt;&#13;&#10;                                                &lt;Calendar&#13;&#10;                                                    mode=&quot;single&quot;&#13;&#10;                                                    selected={field.value}&#13;&#10;                                                    onSelect={field.onChange}&#13;&#10;                                                    autoFocus&#13;&#10;                                                /&gt;&#13;&#10;                                            &lt;/PopoverContent&gt;&#13;&#10;                                        &lt;/Popover&gt;&#13;&#10;                                    &lt;/FormItem&gt;&#13;&#10;                                )}/&gt;&#13;&#10;                                &lt;Controller name=&quot;salesStartFixedTime&quot; control={control} render={({field}) =&gt; (&#13;&#10;                                    &lt;FormItem&gt;&#13;&#10;                                        &lt;FormLabel&gt;Sales Start Time&lt;/FormLabel&gt;&#13;&#10;                                        &lt;FormControl&gt;&#13;&#10;                                            &lt;Input type=&quot;time&quot; {...field} /&gt;&#13;&#10;                                        &lt;/FormControl&gt;&#13;&#10;                                    &lt;/FormItem&gt;&#13;&#10;                                )}/&gt;&#13;&#10;                            &lt;/&gt;&#13;&#10;                        )}&#13;&#10;                    &lt;/div&gt;&#13;&#10;&#13;&#10;                    &lt;DialogFooter&gt;&#13;&#10;                        &lt;Button type=&quot;button&quot; onClick={handleSubmit(onSubmit)}&gt;Add Session&lt;/Button&gt;&#13;&#10;                    &lt;/DialogFooter&gt;&#13;&#10;                &lt;/form&gt;&#13;&#10;            &lt;/DialogContent&gt;&#13;&#10;        &lt;/Dialog&gt;&#13;&#10;    );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/TierDialog.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/TierDialog.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {z} from 'zod';&#10;import {useForm} from 'react-hook-form';&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter} from '@/components/ui/dialog';&#10;import {Form, FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;&#10;const tierSchema = z.object({&#10;    name: z.string().min(1, {message: &quot;Tier name is required&quot;}),&#10;    price: z.number().min(0, {message: &quot;Price must be a positive number&quot;}),&#10;    color: z.string().min(1, {message: &quot;Color is required&quot;})&#10;});&#10;&#10;type TierFormValues = z.infer&lt;typeof tierSchema&gt;;&#10;&#10;interface TierDialogProps {&#10;    open: boolean;&#10;    setOpen: (open: boolean) =&gt; void;&#10;    onSave: (tier: { name: string, price: number, color: string }) =&gt; void;&#10;    initialValues?: { name: string, price: number, color: string };&#10;    mode: 'create' | 'edit';&#10;}&#10;&#10;export function TierDialog({open, setOpen, onSave, initialValues, mode}: TierDialogProps) {&#10;    // Default values when creating a new tier&#10;    const defaultValues: TierFormValues = {&#10;        name: '',&#10;        price: 0,&#10;        color: '#8B5CF6' // Default purple color&#10;    };&#10;&#10;    const form = useForm&lt;TierFormValues&gt;({&#10;        resolver: zodResolver(tierSchema),&#10;        defaultValues: initialValues || defaultValues&#10;    });&#10;&#10;    const handleSubmit = (values: TierFormValues) =&gt; {&#10;        onSave({&#10;            name: values.name,&#10;            price: values.price,&#10;            color: values.color&#10;        });&#10;        setOpen(false);&#10;        form.reset();&#10;    };&#10;&#10;    return (&#10;        &lt;Dialog open={open} onOpenChange={setOpen}&gt;&#10;            &lt;DialogContent className=&quot;sm:max-w-[425px]&quot;&gt;&#10;                &lt;DialogHeader&gt;&#10;                    &lt;DialogTitle&gt;{mode === 'create' ? 'Create New Tier' : 'Edit Tier'}&lt;/DialogTitle&gt;&#10;                &lt;/DialogHeader&gt;&#10;&#10;                &lt;Form {...form}&gt;&#10;                    &lt;form onSubmit={form.handleSubmit(handleSubmit)} className=&quot;space-y-6 py-4&quot;&gt;&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;name&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Tier Name&lt;/FormLabel&gt;&#10;                                    &lt;FormControl&gt;&#10;                                        &lt;Input&#10;                                            placeholder=&quot;e.g., VIP, Premium, Gold&quot;&#10;                                            {...field}&#10;                                        /&gt;&#10;                                    &lt;/FormControl&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;price&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Price (USD)&lt;/FormLabel&gt;&#10;                                    &lt;FormControl&gt;&#10;                                        &lt;Input&#10;                                            type=&quot;number&quot;&#10;                                            min=&quot;0&quot;&#10;                                            step=&quot;0.01&quot;&#10;                                            placeholder=&quot;50.00&quot;&#10;                                            {...field}&#10;                                            onChange={(e) =&gt; field.onChange(parseFloat(e.target.value) || 0)}&#10;                                        /&gt;&#10;                                    &lt;/FormControl&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;color&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Theme Color&lt;/FormLabel&gt;&#10;                                    &lt;FormControl&gt;&#10;                                        &lt;div className=&quot;flex gap-2 items-center&quot;&gt;&#10;                                            &lt;Input&#10;                                                type=&quot;color&quot;&#10;                                                className=&quot;p-1 h-10 w-16 cursor-pointer bg-background&quot;&#10;                                                {...field}&#10;                                            /&gt;&#10;                                            &lt;Input&#10;                                                type=&quot;text&quot;&#10;                                                placeholder=&quot;#8B5CF6&quot;&#10;                                                className=&quot;flex-1 font-mono text-sm&quot;&#10;                                                {...field}&#10;                                            /&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/FormControl&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;DialogFooter&gt;&#10;                            &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; onClick={() =&gt; setOpen(false)}&gt;&#10;                                Cancel&#10;                            &lt;/Button&gt;&#10;                            &lt;Button&#10;                                onClick={(e) =&gt; {&#10;                                    e.preventDefault();&#10;                                    form.handleSubmit(handleSubmit)(e);&#10;                                }}&#10;                                type=&quot;button&quot;&#10;                            &gt;&#10;                                {mode === 'create' ? 'Create' : 'Save'}&#10;                            &lt;/Button&gt;&#10;                        &lt;/DialogFooter&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/Form&gt;&#10;            &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {z} from 'zod';&#10;import {useForm} from 'react-hook-form';&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter} from '@/components/ui/dialog';&#10;import {Form, FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;&#10;const tierSchema = z.object({&#10;    name: z.string().min(1, {message: &quot;Tier name is required&quot;}),&#10;    price: z.number().min(0, {message: &quot;Price must be a positive number&quot;}),&#10;    color: z.string().min(1, {message: &quot;Color is required&quot;})&#10;});&#10;&#10;type TierFormValues = z.infer&lt;typeof tierSchema&gt;;&#10;&#10;interface TierDialogProps {&#10;    open: boolean;&#10;    setOpen: (open: boolean) =&gt; void;&#10;    onSave: (tier: { name: string, price: number, color: string }) =&gt; void;&#10;    initialValues?: { name: string, price: number, color: string };&#10;    mode: 'create' | 'edit';&#10;}&#10;&#10;export function TierDialog({open, setOpen, onSave, initialValues, mode}: TierDialogProps) {&#10;    // Default values when creating a new tier&#10;    const defaultValues: TierFormValues = {&#10;        name: '',&#10;        price: 0,&#10;        color: '#8B5CF6' // Default purple color&#10;    };&#10;&#10;    const form = useForm&lt;TierFormValues&gt;({&#10;        resolver: zodResolver(tierSchema),&#10;        defaultValues: initialValues || defaultValues&#10;    });&#10;&#10;    const handleSubmit = (values: TierFormValues) =&gt; {&#10;        onSave({&#10;            name: values.name,&#10;            price: values.price,&#10;            color: values.color&#10;        });&#10;        setOpen(false);&#10;        form.reset();&#10;    };&#10;&#10;    return (&#10;        &lt;Dialog open={open} onOpenChange={setOpen}&gt;&#10;            &lt;DialogContent className=&quot;sm:max-w-[425px]&quot;&gt;&#10;                &lt;DialogHeader&gt;&#10;                    &lt;DialogTitle&gt;{mode === 'create' ? 'Create New Tier' : 'Edit Tier'}&lt;/DialogTitle&gt;&#10;                &lt;/DialogHeader&gt;&#10;&#10;                &lt;Form {...form}&gt;&#10;                    &lt;form onSubmit={form.handleSubmit(handleSubmit)} className=&quot;space-y-6 py-4&quot;&gt;&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;name&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Tier Name&lt;/FormLabel&gt;&#10;                                    &lt;FormControl&gt;&#10;                                        &lt;Input&#10;                                            placeholder=&quot;e.g., VIP, Premium, Gold&quot;&#10;                                            {...field}&#10;                                        /&gt;&#10;                                    &lt;/FormControl&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;price&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Price (LKR)&lt;/FormLabel&gt;&#10;                                    &lt;FormControl&gt;&#10;                                        &lt;Input&#10;                                            type=&quot;number&quot;&#10;                                            min=&quot;0&quot;&#10;                                            step=&quot;0.01&quot;&#10;                                            placeholder=&quot;5000.00&quot;&#10;                                            {...field}&#10;                                            onChange={(e) =&gt; field.onChange(parseFloat(e.target.value) || 0)}&#10;                                        /&gt;&#10;                                    &lt;/FormControl&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;color&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Theme Color&lt;/FormLabel&gt;&#10;                                    &lt;FormControl&gt;&#10;                                        &lt;div className=&quot;flex gap-2 items-center&quot;&gt;&#10;                                            &lt;Input&#10;                                                type=&quot;color&quot;&#10;                                                className=&quot;p-1 h-10 w-16 cursor-pointer bg-background&quot;&#10;                                                {...field}&#10;                                            /&gt;&#10;                                            &lt;Input&#10;                                                type=&quot;text&quot;&#10;                                                placeholder=&quot;#8B5CF6&quot;&#10;                                                className=&quot;flex-1 font-mono text-sm&quot;&#10;                                                {...field}&#10;                                            /&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/FormControl&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;DialogFooter&gt;&#10;                            &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; onClick={() =&gt; setOpen(false)}&gt;&#10;                                Cancel&#10;                            &lt;/Button&gt;&#10;                            &lt;Button&#10;                                onClick={(e) =&gt; {&#10;                                    e.preventDefault();&#10;                                    form.handleSubmit(handleSubmit)(e);&#10;                                }}&#10;                                type=&quot;button&quot;&#10;                            &gt;&#10;                                {mode === 'create' ? 'Create' : 'Save'}&#10;                            &lt;/Button&gt;&#10;                        &lt;/DialogFooter&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/Form&gt;&#10;            &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/coreDetailsStep.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/coreDetailsStep.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useForm, FormProvider} from 'react-hook-form';&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {useOrganization} from '@/providers/OrganizationProvider';&#10;import {useLimits} from '@/providers/LimitProvider';&#10;import {CategoryResponse} from '@/types/category';&#10;import {getAllCategories} from '@/lib/actions/categoryActions';&#10;import {coreDetailsSchema, CoreDetailsData} from '@/lib/validators/event';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Textarea} from '@/components/ui/textarea';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;import {&#10;    Select,&#10;    SelectContent,&#10;    SelectItem,&#10;    SelectTrigger,&#10;    SelectValue,&#10;    SelectGroup,&#10;    SelectLabel&#10;} from '@/components/ui/select';&#10;import {Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious} from &quot;@/components/ui/carousel&quot;;&#10;import Image from 'next/image';&#10;import {ImageIcon, X, PlusCircle, Upload} from 'lucide-react';&#10;import {toast} from 'sonner';&#10;import Autoplay from 'embla-carousel-autoplay';&#10;&#10;// --- Step 1: Core Details Component ---&#10;export function CoreDetailsStep({onNextAction}: { onNextAction: () =&gt; void }) {&#10;    const {organization} = useOrganization();&#10;    const {myLimits} = useLimits();&#10;    const [categories, setCategories] = useState&lt;CategoryResponse[]&gt;([]);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    const maxPhotos = myLimits?.eventLimits.maxCoverPhotos || 1;&#10;&#10;    const form = useForm&lt;CoreDetailsData&gt;({&#10;        resolver: zodResolver(coreDetailsSchema),&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            categoryId: '', // Ensure categoryId is present&#10;            isOnline: false,&#10;        },&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        getAllCategories().then(setCategories);&#10;    }, [organization]);&#10;&#10;    const handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        if (e.target.files) {&#10;            const files = Array.from(e.target.files);&#10;            if ((coverFiles.length + files.length) &gt; maxPhotos) {&#10;                toast.error(`You can only upload a maximum of ${maxPhotos} photos.`);&#10;                return;&#10;            }&#10;            setCoverFiles(prev =&gt; [...prev, ...files]);&#10;        }&#10;    };&#10;&#10;    const removeImage = (index: number) =&gt; {&#10;        setCoverFiles(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    };&#10;&#10;    function onSubmit(data: CoreDetailsData) {&#10;        console.log(&quot;Step 1 Data:&quot;, data);&#10;        console.log(&quot;Cover Files:&quot;, coverFiles);&#10;        onNextAction();&#10;    }&#10;&#10;    return (&#10;        &lt;FormProvider {...form}&gt;&#10;            &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt;&#10;                {/* Hero Cover Photos Section */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Cover Photos&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;This is the first thing people will see. Upload up&#10;                            to {maxPhotos} images.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                        {coverFiles.length &gt; 0 ? (&#10;                            &lt;Carousel plugins={[Autoplay({delay: 4000, stopOnInteraction: false})]}&gt;&#10;                                &lt;CarouselContent&gt;&#10;                                    {coverFiles.map((file, index) =&gt; (&#10;                                        &lt;CarouselItem key={index} className=&quot;relative&quot;&gt;&#10;                                            &lt;div className=&quot;aspect-[21/9] w-full relative&quot;&gt;&#10;                                                &lt;Image src={URL.createObjectURL(file)} alt={`Cover photo ${index + 1}`}&#10;                                                       fill className=&quot;object-cover rounded-lg&quot;/&gt;&#10;                                                &lt;Button type=&quot;button&quot; variant=&quot;destructive&quot; size=&quot;icon&quot;&#10;                                                        className=&quot;absolute top-4 right-4 h-8 w-8 z-10&quot;&#10;                                                        onClick={() =&gt; removeImage(index)}&gt;&lt;X&#10;                                                    className=&quot;h-4 w-4&quot;/&gt;&lt;/Button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/CarouselItem&gt;&#10;                                    ))}&#10;                                &lt;/CarouselContent&gt;&#10;                                &lt;CarouselPrevious type=&quot;button&quot;&#10;                                                  className=&quot;absolute left-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                                &lt;CarouselNext type=&quot;button&quot;&#10;                                              className=&quot;absolute right-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                            &lt;/Carousel&gt;&#10;                        ) : (&#10;                            &lt;div&#10;                                className=&quot;flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-12 text-center aspect-[21/9] w-full&quot;&gt;&#10;                                &lt;ImageIcon className=&quot;h-16 w-16 text-muted-foreground&quot;/&gt;&#10;                                &lt;p className=&quot;mt-4 text-lg font-medium&quot;&gt;Add cover photos for your event&lt;/p&gt;&#10;                                &lt;Button type=&quot;button&quot; className=&quot;mt-4&quot;&#10;                                        onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;Upload className=&quot;mr-2 h-4 w-4&quot;/&gt;Upload&#10;                                    Images&lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                        &lt;div className=&quot;mt-4 flex justify-center items-center gap-4&quot;&gt;&#10;                            {coverFiles.length &gt; 0 &amp;&amp; (&lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&#10;                                                               onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;PlusCircle&#10;                                className=&quot;mr-2 h-4 w-4&quot;/&gt;Add More&lt;/Button&gt;)}&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{coverFiles.length} of {maxPhotos} photos&#10;                                selected.&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;Input id=&quot;picture&quot; type=&quot;file&quot; multiple accept=&quot;image/*&quot; onChange={handleFileChange}&#10;                               className=&quot;hidden&quot; ref={fileInputRef}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                {/* Event Details Card with Category dropdown */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Event Details&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;Provide the core information about your event.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                        &lt;FormField control={form.control} name=&quot;title&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Event Title&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                placeholder=&quot;e.g., Annual Tech Conference 2025&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;&#10;                        {/* Category Selector as dropdown */}&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;categoryId&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Category&lt;/FormLabel&gt;&#10;                                    &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#10;                                        &lt;FormControl&gt;&#10;                                            &lt;SelectTrigger&gt;&#10;                                                &lt;SelectValue placeholder=&quot;Select a category for your event&quot;/&gt;&#10;                                            &lt;/SelectTrigger&gt;&#10;                                        &lt;/FormControl&gt;&#10;                                        &lt;SelectContent className=&quot;max-h-100&quot;&gt;&#10;                                            {categories.map((parentCat) =&gt; (&#10;                                                &lt;SelectGroup key={parentCat.id}&gt;&#10;                                                    &lt;SelectLabel&gt;{parentCat.name}&lt;/SelectLabel&gt;&#10;                                                    {parentCat.subCategories.map((subCat) =&gt; (&#10;                                                        &lt;SelectItem key={subCat.id} value={subCat.id}&gt;&#10;                                                            {subCat.name}&#10;                                                        &lt;/SelectItem&gt;&#10;                                                    ))}&#10;                                                &lt;/SelectGroup&gt;&#10;                                            ))}&#10;                                        &lt;/SelectContent&gt;&#10;                                    &lt;/Select&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;FormField control={form.control} name=&quot;description&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Short Description&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;A brief summary of your event.&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                        &lt;FormField control={form.control} name=&quot;overview&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Overview&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;Provide more details like schedule, speakers, etc.&quot;&#10;                                className=&quot;min-h-32&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;                &lt;div className=&quot;flex justify-end mt-8&quot;&gt;&#10;                    &lt;Button type=&quot;submit&quot;&gt;Next: Tiers &amp; Pricing&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/form&gt;&#10;        &lt;/FormProvider&gt;&#10;    )&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useState, useEffect, useRef} from 'react';&#10;import {useForm, FormProvider} from 'react-hook-form';&#10;import {zodResolver} from '@hookform/resolvers/zod';&#10;import {useOrganization} from '@/providers/OrganizationProvider';&#10;import {useLimits} from '@/providers/LimitProvider';&#10;import {CategoryResponse} from '@/types/category';&#10;import {getAllCategories} from '@/lib/actions/categoryActions';&#10;import {coreDetailsSchema, CoreDetailsData} from '@/lib/validators/event';&#10;&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Textarea} from '@/components/ui/textarea';&#10;import {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';&#10;import {FormControl, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';&#10;import {&#10;    Select,&#10;    SelectContent,&#10;    SelectItem,&#10;    SelectTrigger,&#10;    SelectValue,&#10;    SelectGroup,&#10;    SelectLabel&#10;} from '@/components/ui/select';&#10;import {Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious} from &quot;@/components/ui/carousel&quot;;&#10;import Image from 'next/image';&#10;import {ImageIcon, X, PlusCircle, Upload} from 'lucide-react';&#10;import {toast} from 'sonner';&#10;import Autoplay from 'embla-carousel-autoplay';&#10;&#10;// Updated props interface to match the required signature&#10;interface CoreDetailsStepProps {&#10;    coverFiles: File[];&#10;    setCoverFilesAction: React.Dispatch&lt;React.SetStateAction&lt;File[]&gt;&gt;;&#10;    onNextAction?: () =&gt; void;&#10;}&#10;&#10;// --- Step 1: Core Details Component ---&#10;export function CoreDetailsStep({ coverFiles, setCoverFilesAction, onNextAction }: CoreDetailsStepProps) {&#10;    const {organization} = useOrganization();&#10;    const {myLimits} = useLimits();&#10;    const [categories, setCategories] = useState&lt;CategoryResponse[]&gt;([]);&#10;    const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;    const maxPhotos = myLimits?.eventLimits.maxCoverPhotos || 1;&#10;&#10;    const form = useForm&lt;CoreDetailsData&gt;({&#10;        resolver: zodResolver(coreDetailsSchema),&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            categoryId: '', // Ensure categoryId is present&#10;            isOnline: false,&#10;        },&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        getAllCategories().then(setCategories);&#10;    }, [organization]);&#10;&#10;    const handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        if (e.target.files) {&#10;            const files = Array.from(e.target.files);&#10;            if ((coverFiles.length + files.length) &gt; maxPhotos) {&#10;                toast.error(`You can only upload a maximum of ${maxPhotos} photos.`);&#10;                return;&#10;            }&#10;            setCoverFilesAction(prev =&gt; [...prev, ...files]);&#10;        }&#10;    };&#10;&#10;    const removeImage = (index: number) =&gt; {&#10;        setCoverFilesAction(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    };&#10;&#10;    function onSubmit(data: CoreDetailsData) {&#10;        console.log(&quot;Step 1 Data:&quot;, data);&#10;        console.log(&quot;Cover Files:&quot;, coverFiles);&#10;        if (onNextAction) onNextAction();&#10;    }&#10;&#10;    return (&#10;        &lt;FormProvider {...form}&gt;&#10;            &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-8&quot;&gt;&#10;                {/* Hero Cover Photos Section */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Cover Photos&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;This is the first thing people will see. Upload up&#10;                            to {maxPhotos} images.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                        {coverFiles.length &gt; 0 ? (&#10;                            &lt;Carousel plugins={[Autoplay({delay: 4000, stopOnInteraction: false})]}&gt;&#10;                                &lt;CarouselContent&gt;&#10;                                    {coverFiles.map((file, index) =&gt; (&#10;                                        &lt;CarouselItem key={index} className=&quot;relative&quot;&gt;&#10;                                            &lt;div className=&quot;aspect-[21/9] w-full relative&quot;&gt;&#10;                                                &lt;Image src={URL.createObjectURL(file)} alt={`Cover photo ${index + 1}`}&#10;                                                       fill className=&quot;object-cover rounded-lg&quot;/&gt;&#10;                                                &lt;Button type=&quot;button&quot; variant=&quot;destructive&quot; size=&quot;icon&quot;&#10;                                                        className=&quot;absolute top-4 right-4 h-8 w-8 z-10&quot;&#10;                                                        onClick={() =&gt; removeImage(index)}&gt;&lt;X&#10;                                                    className=&quot;h-4 w-4&quot;/&gt;&lt;/Button&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/CarouselItem&gt;&#10;                                    ))}&#10;                                &lt;/CarouselContent&gt;&#10;                                &lt;CarouselPrevious type=&quot;button&quot;&#10;                                                  className=&quot;absolute left-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                                &lt;CarouselNext type=&quot;button&quot;&#10;                                              className=&quot;absolute right-4 bg-black/50 text-white border-none hover:bg-black/75&quot;/&gt;&#10;                            &lt;/Carousel&gt;&#10;                        ) : (&#10;                            &lt;div&#10;                                className=&quot;flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-12 text-center aspect-[21/9] w-full&quot;&gt;&#10;                                &lt;ImageIcon className=&quot;h-16 w-16 text-muted-foreground&quot;/&gt;&#10;                                &lt;p className=&quot;mt-4 text-lg font-medium&quot;&gt;Add cover photos for your event&lt;/p&gt;&#10;                                &lt;Button type=&quot;button&quot; className=&quot;mt-4&quot;&#10;                                        onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;Upload className=&quot;mr-2 h-4 w-4&quot;/&gt;Upload&#10;                                    Images&lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                        &lt;div className=&quot;mt-4 flex justify-center items-center gap-4&quot;&gt;&#10;                            {coverFiles.length &gt; 0 &amp;&amp; (&lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&#10;                                                               onClick={() =&gt; fileInputRef.current?.click()}&gt;&lt;PlusCircle&#10;                                className=&quot;mr-2 h-4 w-4&quot;/&gt;Add More&lt;/Button&gt;)}&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{coverFiles.length} of {maxPhotos} photos&#10;                                selected.&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;Input id=&quot;picture&quot; type=&quot;file&quot; multiple accept=&quot;image/*&quot; onChange={handleFileChange}&#10;                               className=&quot;hidden&quot; ref={fileInputRef}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                {/* Event Details Card with Category dropdown */}&#10;                &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                        &lt;CardTitle&gt;Event Details&lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;Provide the core information about your event.&lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                        &lt;FormField control={form.control} name=&quot;title&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Event Title&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Input&#10;                                placeholder=&quot;e.g., Annual Tech Conference 2025&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;&#10;                        {/* Category Selector as dropdown */}&#10;                        &lt;FormField&#10;                            control={form.control}&#10;                            name=&quot;categoryId&quot;&#10;                            render={({field}) =&gt; (&#10;                                &lt;FormItem&gt;&#10;                                    &lt;FormLabel&gt;Category&lt;/FormLabel&gt;&#10;                                    &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#10;                                        &lt;FormControl&gt;&#10;                                            &lt;SelectTrigger&gt;&#10;                                                &lt;SelectValue placeholder=&quot;Select a category for your event&quot;/&gt;&#10;                                            &lt;/SelectTrigger&gt;&#10;                                        &lt;/FormControl&gt;&#10;                                        &lt;SelectContent className=&quot;max-h-100&quot;&gt;&#10;                                            {categories.map((parentCat) =&gt; (&#10;                                                &lt;SelectGroup key={parentCat.id}&gt;&#10;                                                    &lt;SelectLabel&gt;{parentCat.name}&lt;/SelectLabel&gt;&#10;                                                    {parentCat.subCategories.map((subCat) =&gt; (&#10;                                                        &lt;SelectItem key={subCat.id} value={subCat.id}&gt;&#10;                                                            {subCat.name}&#10;                                                        &lt;/SelectItem&gt;&#10;                                                    ))}&#10;                                                &lt;/SelectGroup&gt;&#10;                                            ))}&#10;                                        &lt;/SelectContent&gt;&#10;                                    &lt;/Select&gt;&#10;                                    &lt;FormMessage/&gt;&#10;                                &lt;/FormItem&gt;&#10;                            )}&#10;                        /&gt;&#10;&#10;                        &lt;FormField control={form.control} name=&quot;description&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Short Description&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;A brief summary of your event.&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                        &lt;FormField control={form.control} name=&quot;overview&quot; render={({field}) =&gt; (&#10;                            &lt;FormItem&gt;&lt;FormLabel&gt;Overview&lt;/FormLabel&gt;&lt;FormControl&gt;&lt;Textarea&#10;                                placeholder=&quot;Provide more details like schedule, speakers, etc.&quot;&#10;                                className=&quot;min-h-32&quot; {...field} /&gt;&lt;/FormControl&gt;&lt;FormMessage/&gt;&lt;/FormItem&gt;)}/&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;                &lt;div className=&quot;flex justify-end mt-8&quot;&gt;&#10;                    &lt;Button type=&quot;submit&quot;&gt;Next: Tiers &amp; Pricing&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/form&gt;&#10;        &lt;/FormProvider&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/review/ReviewSessions.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/_components/review/ReviewSessions.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {format, parseISO} from 'date-fns';&#10;import {Calendar, MapPin, Tag, Users, Clock, Armchair, LinkIcon} from 'lucide-react';&#10;import {&#10;    Accordion,&#10;    AccordionContent,&#10;    AccordionItem,&#10;    AccordionTrigger,&#10;} from &quot;@/components/ui/accordion&quot;;&#10;import {Badge} from '@/components/ui/badge';&#10;import {&#10;    SessionFormData,&#10;    SalesStartRuleType,&#10;    SessionType,&#10;    Seat,&#10;    Tier&#10;} from '@/lib/validators/event';&#10;import {&#10;    Popover,&#10;    PopoverContent,&#10;    PopoverTrigger&#10;} from '@/components/ui/popover';&#10;import {Button} from '@/components/ui/button';&#10;import {GoogleMap, useJsApiLoader, Marker} from '@react-google-maps/api';&#10;&#10;interface ReviewSessionsProps {&#10;    sessions: SessionFormData[];&#10;    tiers: Tier[];&#10;}&#10;&#10;export const ReviewSessions: React.FC&lt;ReviewSessionsProps&gt; = ({sessions, tiers}) =&gt; {&#10;    if (sessions.length === 0) return null;&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;h2 className=&quot;text-2xl font-semibold&quot;&gt;Schedule&lt;/h2&gt;&#10;            &lt;Accordion type=&quot;single&quot; collapsible className=&quot;w-full&quot;&gt;&#10;                {sessions.map((session, index) =&gt; (&#10;                    &lt;SessionAccordionItem&#10;                        key={`session-${index}`}&#10;                        session={session}&#10;                        index={index}&#10;                        tiers={tiers}&#10;                    /&gt;&#10;                ))}&#10;            &lt;/Accordion&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;interface SessionAccordionItemProps {&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;    index: number;&#10;}&#10;&#10;const SessionAccordionItem: React.FC&lt;SessionAccordionItemProps&gt; = ({session, index, tiers}) =&gt; {&#10;    const startDate = parseISO(session.startTime);&#10;    const endDate = parseISO(session.endTime);&#10;    const isOnline = session.sessionType === SessionType.ONLINE;&#10;    const {layoutData} = session;&#10;&#10;    return (&#10;        &lt;AccordionItem&#10;            value={`item-${index}`}&#10;            className=&quot;border rounded-lg mb-4 overflow-hidden&quot;&#10;        &gt;&#10;            &lt;AccordionTrigger className=&quot;px-4 py-3 hover:no-underline hover:bg-muted/40&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-3 text-left&quot;&gt;&#10;                    &lt;Calendar className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                    &lt;div&gt;&#10;                        &lt;div className=&quot;font-medium&quot;&gt;&#10;                            {format(startDate, &quot;EEEE, MMMM d, yyyy&quot;)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                            {format(startDate, &quot;h:mm a&quot;)} - {format(endDate, &quot;h:mm a&quot;)}&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Badge variant={isOnline ? &quot;secondary&quot; : &quot;default&quot;} className=&quot;ml-4&quot;&gt;&#10;                        {isOnline ? 'Online' : 'Physical'}&#10;                    &lt;/Badge&gt;&#10;                &lt;/div&gt;&#10;            &lt;/AccordionTrigger&gt;&#10;            &lt;AccordionContent className=&quot;px-4 pt-2 pb-4&quot;&gt;&#10;                &lt;div className=&quot;grid grid-cols-1 gap-6&quot;&gt;&#10;                    &lt;SessionDetails session={session}/&gt;&#10;                    {layoutData &amp;&amp; layoutData.layout.blocks.length &gt; 0 &amp;&amp; (&#10;                        &lt;SeatingInformation&#10;                            isOnline={isOnline}&#10;                            session={session}&#10;                            tiers={tiers}&#10;                        /&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/AccordionContent&gt;&#10;        &lt;/AccordionItem&gt;&#10;    );&#10;};&#10;&#10;interface SessionDetailsProps {&#10;    session: SessionFormData;&#10;}&#10;&#10;const SessionDetails: React.FC&lt;SessionDetailsProps&gt; = ({session}) =&gt; {&#10;    const startDate = parseISO(session.startTime);&#10;    const endDate = parseISO(session.endTime);&#10;    const isOnline = session.sessionType === SessionType.ONLINE;&#10;    const {venueDetails} = session;&#10;&#10;    // Calculate event duration&#10;    const getDuration = (): string =&gt; {&#10;        try {&#10;            const durationMs = endDate.getTime() - startDate.getTime();&#10;            const hours = Math.floor(durationMs / (1000 * 60 * 60));&#10;            const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));&#10;&#10;            return hours &gt; 0&#10;                ? `${hours} hour${hours !== 1 ? 's' : ''}${minutes &gt; 0 ? ` ${minutes} min` : ''}`&#10;                : `${minutes} minutes`;&#10;        } catch (e) {&#10;            console.error(&quot;Error calculating duration:&quot;, e);&#10;            return &quot;Duration unavailable&quot;;&#10;        }&#10;    };&#10;&#10;    // Sales rule description&#10;    const getSalesRuleDescription = (): string =&gt; {&#10;        switch (session.salesStartRuleType) {&#10;            case SalesStartRuleType.IMMEDIATE:&#10;                return &quot;On sale immediately&quot;;&#10;            case SalesStartRuleType.FIXED:&#10;                return session.salesStartFixedDatetime&#10;                    ? `Sales start on ${format(parseISO(session.salesStartFixedDatetime), 'MMM d, yyyy h:mm a')}`&#10;                    : &quot;Fixed date not set&quot;;&#10;            case SalesStartRuleType.ROLLING:&#10;                if (session.salesStartHoursBefore === undefined || session.salesStartHoursBefore === null || session.salesStartHoursBefore &lt; 0) {&#10;                    return &quot;Rolling hours not set or invalid&quot;;&#10;                } else if (session.salesStartHoursBefore &lt; 24) {&#10;                    return `Sales start ${session.salesStartHoursBefore} hour(s) before the session`;&#10;                } else {&#10;                    const days = Math.floor(session.salesStartHoursBefore / 24);&#10;                    const hours = session.salesStartHoursBefore % 24;&#10;                    return `Sales start ${days} day(s)${hours &gt; 0 ? ` and ${hours} hour(s)` : ''} before the session`;&#10;                }&#10;            default:&#10;                return &quot;Not set&quot;;&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;Clock className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                &lt;span&gt;Duration: {getDuration()}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-start gap-2&quot;&gt;&#10;                {isOnline ? (&#10;                    &lt;&gt;&#10;                        &lt;LinkIcon className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                        &lt;div&gt;&#10;                            &lt;div&gt;Online Event&lt;/div&gt;&#10;                            {venueDetails?.onlineLink ? (&#10;                                &lt;div className=&quot;text-sm text-muted-foreground break-all&quot;&gt;&#10;                                    {venueDetails.onlineLink}&#10;                                &lt;/div&gt;&#10;                            ) : (&#10;                                &lt;div className=&quot;text-sm text-destructive&quot;&gt;&#10;                                    Link not provided&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                ) : (&#10;                    &lt;&gt;&#10;                        &lt;MapPin className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                        &lt;div className=&quot;w-full&quot;&gt;&#10;                            {venueDetails?.name ? (&#10;                                &lt;&gt;&#10;                                    &lt;div&gt;{venueDetails.name}&lt;/div&gt;&#10;                                    {venueDetails.address &amp;&amp; (&#10;                                        &lt;div className=&quot;text-sm text-muted-foreground mb-2&quot;&gt;&#10;                                            {venueDetails.address}&#10;                                        &lt;/div&gt;&#10;                                    )}&#10;                                &lt;/&gt;&#10;                            ) : (&#10;                                &lt;div className=&quot;text-destructive&quot;&gt;&#10;                                    Venue not specified&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;Tag className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                &lt;span&gt;{getSalesRuleDescription()}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;interface SeatingInformationProps {&#10;    isOnline: boolean;&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;}&#10;&#10;const SeatingInformation: React.FC&lt;SeatingInformationProps&gt; = ({isOnline, session, tiers}) =&gt; {&#10;    const {layoutData} = session;&#10;    const {venueDetails} = session;&#10;&#10;&#10;    // For physical events with coordinates, prepare Google Map&#10;    const {isLoaded} = useJsApiLoader({&#10;        id: 'google-map-script',&#10;    const googleMapsApiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;&#10;    if (!googleMapsApiKey) {&#10;        throw new Error('Google Maps API key is missing. Please set NEXT_PUBLIC_GOOGLE_MAPS_API_KEY in your environment.');&#10;    }&#10;    const {isLoaded} = useJsApiLoader({&#10;        id: 'google-map-script',&#10;        googleMapsApiKey,&#10;    });&#10;&#10;    const mapCenter = venueDetails?.latitude &amp;&amp; venueDetails?.longitude&#10;        ? {lat: venueDetails.latitude, lng: venueDetails.longitude}&#10;        : {lat: 6.9271, lng: 79.8612}; // Default: Colombo, Sri Lanka&#10;&#10;    // Function to count seats by tier&#10;    const getSeatCountByTier = () =&gt; {&#10;        const tierCounts: Record&lt;string, number&gt; = {};&#10;&#10;        layoutData.layout.blocks.forEach(block =&gt; {&#10;            if (block.rows) {&#10;                // For seated blocks with rows&#10;                block.rows.forEach(row =&gt; {&#10;                    row.seats.forEach(seat =&gt; {&#10;                        if (seat.status !== 'RESERVED') {&#10;                            const tierId = seat.tierId || 'unassigned';&#10;                            tierCounts[tierId] = (tierCounts[tierId] || 0) + 1;&#10;                        }&#10;                    });&#10;                });&#10;            } else if (block.seats) {&#10;                // For blocks with direct seats array&#10;                block.seats.forEach(seat =&gt; {&#10;                    if (seat.status !== 'RESERVED') {&#10;                        const tierId = seat.tierId || 'unassigned';&#10;                        tierCounts[tierId] = (tierCounts[tierId] || 0) + 1;&#10;                    }&#10;                });&#10;            } else if (block.capacity &amp;&amp; block.type === 'standing_capacity') {&#10;                // For standing blocks&#10;                // Fix the TypeScript error by explicitly typing the block.seats access&#10;                const blockSeats = block.seats as Seat[] | undefined;&#10;                const tierId = blockSeats?.[0]?.tierId || 'unassigned';&#10;                tierCounts[tierId] = (tierCounts[tierId] || 0) + (block.capacity || 0);&#10;            }&#10;        });&#10;&#10;        return tierCounts;&#10;    };&#10;&#10;    const seatCountByTier = getSeatCountByTier();&#10;    const totalSeats = Object.values(seatCountByTier).reduce((sum, count) =&gt; sum + count, 0);&#10;&#10;    // Display for online events&#10;    if (isOnline) {&#10;        return (&#10;            &lt;div className=&quot;bg-muted/30 p-4 rounded-lg&quot;&gt;&#10;                &lt;div className=&quot;flex items-start gap-2 mb-2&quot;&gt;&#10;                    &lt;Users className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                    &lt;span className=&quot;font-medium&quot;&gt;Capacity Information&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-sm ml-6&quot;&gt;&#10;                    &lt;p&gt;Total capacity: {totalSeats}&lt;/p&gt;&#10;                    {Object.entries(seatCountByTier).map(([tierId, count]) =&gt; (&#10;                        &lt;div key={tierId} className=&quot;flex items-center gap-2 mt-1&quot;&gt;&#10;                            {tierId !== 'unassigned' &amp;&amp; (&#10;                                &lt;div&#10;                                    className=&quot;h-3 w-3 rounded-full&quot;&#10;                                    style={{&#10;                                        backgroundColor: getTierColor(tierId, session, tiers)&#10;                                    }}&#10;                                /&gt;&#10;                            )}&#10;                            &lt;span&gt;&#10;                                {getTierName(tierId, session, tiers)}: {count} {count === 1 ? 'seat' : 'seats'}&#10;                            &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    // Display for physical events - side by side layout&#10;    return (&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold&quot;&gt;Venue &amp; Seating Information&lt;/h3&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                {/* Left side: Google Map */}&#10;                &lt;div className=&quot;h-[300px] rounded-md overflow-hidden border&quot;&gt;&#10;                    {isLoaded ? (&#10;                        &lt;GoogleMap&#10;                            mapContainerStyle={{&#10;                                width: '100%',&#10;                                height: '100%',&#10;                            }}&#10;                            center={mapCenter}&#10;                            zoom={15}&#10;                        &gt;&#10;                            &lt;Marker position={mapCenter}/&gt;&#10;                        &lt;/GoogleMap&gt;&#10;                    ) : (&#10;                        &lt;div className=&quot;h-full w-full bg-muted flex items-center justify-center&quot;&gt;&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Loading map...&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Right side: Seating summary */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;bg-muted/30 p-4 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-start gap-2 mb-2&quot;&gt;&#10;                            &lt;Armchair className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Seating Summary&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm ml-6&quot;&gt;&#10;                            &lt;p&gt;Total capacity: {totalSeats}&lt;/p&gt;&#10;                            {Object.entries(seatCountByTier).map(([tierId, count]) =&gt; (&#10;                                &lt;div key={tierId} className=&quot;flex items-center gap-2 mt-1&quot;&gt;&#10;                                    {tierId !== 'unassigned' &amp;&amp; (&#10;                                        &lt;div&#10;                                            className=&quot;h-3 w-3 rounded-full&quot;&#10;                                            style={{&#10;                                                backgroundColor: getTierColor(tierId, session, tiers)&#10;                                            }}&#10;                                        /&gt;&#10;                                    )}&#10;                                    &lt;span&gt;&#10;                                        {getTierName(tierId, session, tiers)}: {count} {count === 1 ? 'seat' : 'seats'}&#10;                                    &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                            ))}&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Seating Layout below the map and summary */}&#10;            {layoutData &amp;&amp; (&#10;                &lt;SeatingLayout session={session} tiers={tiers}/&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;// Helper to get tier color&#10;const getTierColor = (tierId: string, session: SessionFormData, tiers: Tier[]): string =&gt; {&#10;    if (tierId === 'unassigned') return '#d1d5db'; // gray-300&#10;&#10;    // We need to check if tiers exist in the session&#10;    const tier = tiers.find(t =&gt; t.id === tierId);&#10;    return tier?.color || '#6b7280'; // gray-500 as fallback&#10;};&#10;&#10;// Helper to get tier name&#10;const getTierName = (tierId: string, session: SessionFormData, tiers: Tier[]): string =&gt; {&#10;    if (tierId === 'unassigned') return 'Unassigned';&#10;&#10;    const tier = tiers.find(t =&gt; t.id === tierId);&#10;    return tier?.name || 'Unknown Tier';&#10;};&#10;&#10;interface SeatingLayoutProps {&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;}&#10;&#10;const SeatingLayout: React.FC&lt;SeatingLayoutProps&gt; = ({session, tiers}) =&gt; {&#10;    // const [selectedSeat, setSelectedSeat] = useState&lt;{&#10;    //     seat: Seat;&#10;    //     rowLabel?: string;&#10;    //     blockName: string;&#10;    //     tier?: string;&#10;    // } | null&gt;(null);&#10;&#10;    const {layoutData} = session;&#10;&#10;    // Only render for physical events with layout data&#10;    if (!layoutData || session.sessionType !== SessionType.PHYSICAL) return null;&#10;&#10;    // const handleSeatClick = (&#10;    //     seat: Seat,&#10;    //     blockName: string,&#10;    //     rowLabel?: string&#10;    // ) =&gt; {&#10;    //     setSelectedSeat({&#10;    //         seat,&#10;    //         rowLabel,&#10;    //         blockName,&#10;    //         tier: seat.tierId ? getTierName(seat.tierId, session, tiers) : undefined&#10;    //     });&#10;    // };&#10;&#10;    return (&#10;        &lt;div className=&quot;border rounded-lg p-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold mb-4&quot;&gt;Seating Layout&lt;/h3&gt;&#10;            &lt;div className=&quot;relative bg-muted/30 min-h-[300px] p-4 rounded-lg overflow-auto&quot;&gt;&#10;                {layoutData.layout.blocks.map(block =&gt; (&#10;                    &lt;div&#10;                        key={block.id}&#10;                        className=&quot;absolute bg-card border rounded-lg p-3 shadow-sm&quot;&#10;                        style={{&#10;                            left: block.position.x,&#10;                            top: block.position.y,&#10;                            width: block.width ? `${block.width}px` : 'auto',&#10;                            height: block.height ? `${block.height}px` : 'auto'&#10;                        }}&#10;                    &gt;&#10;                        &lt;div className=&quot;text-sm font-medium mb-1&quot;&gt;{block.name}&lt;/div&gt;&#10;&#10;                        {block.type === 'seated_grid' &amp;&amp; block.rows &amp;&amp; (&#10;                            &lt;div&#10;                                className=&quot;grid gap-1&quot;&#10;                                style={{&#10;                                    gridTemplateColumns: `repeat(${block.rows[0]?.seats?.length || 1}, 1fr)`&#10;                                }}&#10;                            &gt;&#10;                                {block.rows.map(row =&gt;&#10;                                    row.seats.map(seat =&gt; (&#10;                                        &lt;Popover key={seat.id}&gt;&#10;                                            &lt;PopoverTrigger asChild&gt;&#10;                                                &lt;Button&#10;                                                    type=&quot;button&quot;&#10;                                                    variant=&quot;ghost&quot;&#10;                                                    className=&quot;h-6 w-6 p-0 rounded-full text-xs font-mono&quot;&#10;                                                    style={{&#10;                                                        backgroundColor: seat.tierId ?&#10;                                                            `${getTierColor(seat.tierId, session, tiers)}80` : // 50% opacity&#10;                                                            undefined,&#10;                                                        opacity: seat.status === 'RESERVED' ? 0.3 : 1&#10;                                                    }}&#10;                                                    // onClick={() =&gt; handleSeatClick(seat, block.name, row.label)}&#10;                                                &gt;&#10;                                                    {seat.label}&#10;                                                &lt;/Button&gt;&#10;                                            &lt;/PopoverTrigger&gt;&#10;                                            &lt;PopoverContent side=&quot;top&quot; className=&quot;w-60 p-0&quot;&gt;&#10;                                                &lt;div className=&quot;p-4&quot;&gt;&#10;                                                    &lt;div className=&quot;font-semibold mb-2&quot;&gt;Seat Information&lt;/div&gt;&#10;                                                    &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Block:&lt;/span&gt;&#10;                                                            &lt;span&gt;{block.name}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Row:&lt;/span&gt;&#10;                                                            &lt;span&gt;{row.label}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Seat:&lt;/span&gt;&#10;                                                            &lt;span&gt;{seat.label}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Status:&lt;/span&gt;&#10;                                                            &lt;Badge&#10;                                                                variant={seat.status === 'RESERVED' ? 'destructive' : 'outline'}&gt;&#10;                                                                {seat.status || 'Available'}&#10;                                                            &lt;/Badge&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Tier:&lt;/span&gt;&#10;                                                            &lt;div className=&quot;flex items-center gap-1&quot;&gt;&#10;                                                                {seat.tierId &amp;&amp; (&#10;                                                                    &lt;div&#10;                                                                        className=&quot;h-3 w-3 rounded-full&quot;&#10;                                                                        style={{&#10;                                                                            backgroundColor: getTierColor(seat.tierId, session, tiers)&#10;                                                                        }}&#10;                                                                    /&gt;&#10;                                                                )}&#10;                                                                &lt;span&gt;&#10;                                                                    {seat.tierId ? getTierName(seat.tierId, session, tiers) : 'Unassigned'}&#10;                                                                &lt;/span&gt;&#10;                                                            &lt;/div&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/PopoverContent&gt;&#10;                                        &lt;/Popover&gt;&#10;                                    ))&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {block.type === 'standing_capacity' &amp;&amp; (&#10;                            &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;                                &lt;p className=&quot;text-sm text-center&quot;&gt;&#10;                                    &lt;span className=&quot;block font-medium&quot;&gt;Standing Area&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-muted-foreground&quot;&gt;&#10;                                        Capacity: {block.capacity || 0}&#10;                                    &lt;/span&gt;&#10;                                &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {block.type === 'non_sellable' &amp;&amp; (&#10;                            &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;                                &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                                    Non-sellable area&#10;                                &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {format, parseISO} from 'date-fns';&#10;import {Calendar, MapPin, Tag, Users, Clock, Armchair, LinkIcon} from 'lucide-react';&#10;import {&#10;    Accordion,&#10;    AccordionContent,&#10;    AccordionItem,&#10;    AccordionTrigger,&#10;} from &quot;@/components/ui/accordion&quot;;&#10;import {Badge} from '@/components/ui/badge';&#10;import {&#10;    SessionFormData,&#10;    SalesStartRuleType,&#10;    SessionType,&#10;    Seat,&#10;    Tier&#10;} from '@/lib/validators/event';&#10;import {&#10;    Popover,&#10;    PopoverContent,&#10;    PopoverTrigger&#10;} from '@/components/ui/popover';&#10;import {Button} from '@/components/ui/button';&#10;import {GoogleMap, useJsApiLoader, Marker} from '@react-google-maps/api';&#10;&#10;interface ReviewSessionsProps {&#10;    sessions: SessionFormData[];&#10;    tiers: Tier[];&#10;}&#10;&#10;export const ReviewSessions: React.FC&lt;ReviewSessionsProps&gt; = ({sessions, tiers}) =&gt; {&#10;    if (sessions.length === 0) return null;&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;h2 className=&quot;text-2xl font-semibold&quot;&gt;Schedule&lt;/h2&gt;&#10;            &lt;Accordion type=&quot;single&quot; collapsible className=&quot;w-full&quot;&gt;&#10;                {sessions.map((session, index) =&gt; (&#10;                    &lt;SessionAccordionItem&#10;                        key={`session-${index}`}&#10;                        session={session}&#10;                        index={index}&#10;                        tiers={tiers}&#10;                    /&gt;&#10;                ))}&#10;            &lt;/Accordion&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;interface SessionAccordionItemProps {&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;    index: number;&#10;}&#10;&#10;const SessionAccordionItem: React.FC&lt;SessionAccordionItemProps&gt; = ({session, index, tiers}) =&gt; {&#10;    const startDate = parseISO(session.startTime);&#10;    const endDate = parseISO(session.endTime);&#10;    const isOnline = session.sessionType === SessionType.ONLINE;&#10;    const {layoutData} = session;&#10;&#10;    return (&#10;        &lt;AccordionItem&#10;            value={`item-${index}`}&#10;            className=&quot;border rounded-lg mb-4 overflow-hidden&quot;&#10;        &gt;&#10;            &lt;AccordionTrigger className=&quot;px-4 py-3 hover:no-underline hover:bg-muted/40&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-3 text-left&quot;&gt;&#10;                    &lt;Calendar className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                    &lt;div&gt;&#10;                        &lt;div className=&quot;font-medium&quot;&gt;&#10;                            {format(startDate, &quot;EEEE, MMMM d, yyyy&quot;)}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                            {format(startDate, &quot;h:mm a&quot;)} - {format(endDate, &quot;h:mm a&quot;)}&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Badge variant={isOnline ? &quot;secondary&quot; : &quot;default&quot;} className=&quot;ml-4&quot;&gt;&#10;                        {isOnline ? 'Online' : 'Physical'}&#10;                    &lt;/Badge&gt;&#10;                &lt;/div&gt;&#10;            &lt;/AccordionTrigger&gt;&#10;            &lt;AccordionContent className=&quot;px-4 pt-2 pb-4&quot;&gt;&#10;                &lt;div className=&quot;grid grid-cols-1 gap-6&quot;&gt;&#10;                    &lt;SessionDetails session={session}/&gt;&#10;                    {layoutData &amp;&amp; layoutData.layout.blocks.length &gt; 0 &amp;&amp; (&#10;                        &lt;SeatingInformation&#10;                            isOnline={isOnline}&#10;                            session={session}&#10;                            tiers={tiers}&#10;                        /&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/AccordionContent&gt;&#10;        &lt;/AccordionItem&gt;&#10;    );&#10;};&#10;&#10;interface SessionDetailsProps {&#10;    session: SessionFormData;&#10;}&#10;&#10;const SessionDetails: React.FC&lt;SessionDetailsProps&gt; = ({session}) =&gt; {&#10;    const startDate = parseISO(session.startTime);&#10;    const endDate = parseISO(session.endTime);&#10;    const isOnline = session.sessionType === SessionType.ONLINE;&#10;    const {venueDetails} = session;&#10;&#10;    // Calculate event duration&#10;    const getDuration = (): string =&gt; {&#10;        try {&#10;            const durationMs = endDate.getTime() - startDate.getTime();&#10;            const hours = Math.floor(durationMs / (1000 * 60 * 60));&#10;            const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));&#10;&#10;            return hours &gt; 0&#10;                ? `${hours} hour${hours !== 1 ? 's' : ''}${minutes &gt; 0 ? ` ${minutes} min` : ''}`&#10;                : `${minutes} minutes`;&#10;        } catch (e) {&#10;            console.error(&quot;Error calculating duration:&quot;, e);&#10;            return &quot;Duration unavailable&quot;;&#10;        }&#10;    };&#10;&#10;    // Sales rule description&#10;    const getSalesRuleDescription = (): string =&gt; {&#10;        switch (session.salesStartRuleType) {&#10;            case SalesStartRuleType.IMMEDIATE:&#10;                return &quot;On sale immediately&quot;;&#10;            case SalesStartRuleType.FIXED:&#10;                return session.salesStartFixedDatetime&#10;                    ? `Sales start on ${format(parseISO(session.salesStartFixedDatetime), 'MMM d, yyyy h:mm a')}`&#10;                    : &quot;Fixed date not set&quot;;&#10;            case SalesStartRuleType.ROLLING:&#10;                if (session.salesStartHoursBefore === undefined || session.salesStartHoursBefore === null || session.salesStartHoursBefore &lt; 0) {&#10;                    return &quot;Rolling hours not set or invalid&quot;;&#10;                } else if (session.salesStartHoursBefore &lt; 24) {&#10;                    return `Sales start ${session.salesStartHoursBefore} hour(s) before the session`;&#10;                } else {&#10;                    const days = Math.floor(session.salesStartHoursBefore / 24);&#10;                    const hours = session.salesStartHoursBefore % 24;&#10;                    return `Sales start ${days} day(s)${hours &gt; 0 ? ` and ${hours} hour(s)` : ''} before the session`;&#10;                }&#10;            default:&#10;                return &quot;Not set&quot;;&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;Clock className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                &lt;span&gt;Duration: {getDuration()}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-start gap-2&quot;&gt;&#10;                {isOnline ? (&#10;                    &lt;&gt;&#10;                        &lt;LinkIcon className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                        &lt;div&gt;&#10;                            &lt;div&gt;Online Event&lt;/div&gt;&#10;                            {venueDetails?.onlineLink ? (&#10;                                &lt;div className=&quot;text-sm text-muted-foreground break-all&quot;&gt;&#10;                                    {venueDetails.onlineLink}&#10;                                &lt;/div&gt;&#10;                            ) : (&#10;                                &lt;div className=&quot;text-sm text-destructive&quot;&gt;&#10;                                    Link not provided&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                ) : (&#10;                    &lt;&gt;&#10;                        &lt;MapPin className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                        &lt;div className=&quot;w-full&quot;&gt;&#10;                            {venueDetails?.name ? (&#10;                                &lt;&gt;&#10;                                    &lt;div&gt;{venueDetails.name}&lt;/div&gt;&#10;                                    {venueDetails.address &amp;&amp; (&#10;                                        &lt;div className=&quot;text-sm text-muted-foreground mb-2&quot;&gt;&#10;                                            {venueDetails.address}&#10;                                        &lt;/div&gt;&#10;                                    )}&#10;                                &lt;/&gt;&#10;                            ) : (&#10;                                &lt;div className=&quot;text-destructive&quot;&gt;&#10;                                    Venue not specified&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;Tag className=&quot;h-4 w-4 text-muted-foreground&quot;/&gt;&#10;                &lt;span&gt;{getSalesRuleDescription()}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;interface SeatingInformationProps {&#10;    isOnline: boolean;&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;}&#10;&#10;const SeatingInformation: React.FC&lt;SeatingInformationProps&gt; = ({isOnline, session, tiers}) =&gt; {&#10;    const {layoutData} = session;&#10;    const {venueDetails} = session;&#10;    &#10;    // For physical events with coordinates, prepare Google Map&#10;    const googleMapsApiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;&#10;    if (!googleMapsApiKey) {&#10;        console.error('Google Maps API key is missing. Please set NEXT_PUBLIC_GOOGLE_MAPS_API_KEY in your environment.');&#10;    }&#10;    &#10;    const {isLoaded} = useJsApiLoader({&#10;        id: 'google-map-script',&#10;        googleMapsApiKey: googleMapsApiKey || '',&#10;    });&#10;&#10;    const mapCenter = venueDetails?.latitude &amp;&amp; venueDetails?.longitude&#10;        ? {lat: venueDetails.latitude, lng: venueDetails.longitude}&#10;        : {lat: 6.9271, lng: 79.8612}; // Default: Colombo, Sri Lanka&#10;&#10;    // Function to count seats by tier&#10;    const getSeatCountByTier = () =&gt; {&#10;        const tierCounts: Record&lt;string, number&gt; = {};&#10;&#10;        layoutData.layout.blocks.forEach(block =&gt; {&#10;            if (block.rows) {&#10;                // For seated blocks with rows&#10;                block.rows.forEach(row =&gt; {&#10;                    row.seats.forEach(seat =&gt; {&#10;                        if (seat.status !== 'RESERVED') {&#10;                            const tierId = seat.tierId || 'unassigned';&#10;                            tierCounts[tierId] = (tierCounts[tierId] || 0) + 1;&#10;                        }&#10;                    });&#10;                });&#10;            } else if (block.seats) {&#10;                // For blocks with direct seats array&#10;                block.seats.forEach(seat =&gt; {&#10;                    if (seat.status !== 'RESERVED') {&#10;                        const tierId = seat.tierId || 'unassigned';&#10;                        tierCounts[tierId] = (tierCounts[tierId] || 0) + 1;&#10;                    }&#10;                });&#10;            } else if (block.capacity &amp;&amp; block.type === 'standing_capacity') {&#10;                // For standing blocks&#10;                // Fix the TypeScript error by explicitly typing the block.seats access&#10;                const blockSeats = block.seats as Seat[] | undefined;&#10;                const tierId = blockSeats?.[0]?.tierId || 'unassigned';&#10;                tierCounts[tierId] = (tierCounts[tierId] || 0) + (block.capacity || 0);&#10;            }&#10;        });&#10;&#10;        return tierCounts;&#10;    };&#10;&#10;    const seatCountByTier = getSeatCountByTier();&#10;    const totalSeats = Object.values(seatCountByTier).reduce((sum, count) =&gt; sum + count, 0);&#10;&#10;    // Display for online events&#10;    if (isOnline) {&#10;        return (&#10;            &lt;div className=&quot;bg-muted/30 p-4 rounded-lg&quot;&gt;&#10;                &lt;div className=&quot;flex items-start gap-2 mb-2&quot;&gt;&#10;                    &lt;Users className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                    &lt;span className=&quot;font-medium&quot;&gt;Capacity Information&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-sm ml-6&quot;&gt;&#10;                    &lt;p&gt;Total capacity: {totalSeats}&lt;/p&gt;&#10;                    {Object.entries(seatCountByTier).map(([tierId, count]) =&gt; (&#10;                        &lt;div key={tierId} className=&quot;flex items-center gap-2 mt-1&quot;&gt;&#10;                            {tierId !== 'unassigned' &amp;&amp; (&#10;                                &lt;div&#10;                                    className=&quot;h-3 w-3 rounded-full&quot;&#10;                                    style={{&#10;                                        backgroundColor: getTierColor(tierId, session, tiers)&#10;                                    }}&#10;                                /&gt;&#10;                            )}&#10;                            &lt;span&gt;&#10;                                {getTierName(tierId, session, tiers)}: {count} {count === 1 ? 'seat' : 'seats'}&#10;                            &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    ))}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    // Display for physical events - side by side layout&#10;    return (&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold&quot;&gt;Venue &amp; Seating Information&lt;/h3&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                {/* Left side: Google Map */}&#10;                &lt;div className=&quot;h-[300px] rounded-md overflow-hidden border&quot;&gt;&#10;                    {isLoaded ? (&#10;                        &lt;GoogleMap&#10;                            mapContainerStyle={{&#10;                                width: '100%',&#10;                                height: '100%',&#10;                            }}&#10;                            center={mapCenter}&#10;                            zoom={15}&#10;                        &gt;&#10;                            &lt;Marker position={mapCenter}/&gt;&#10;                        &lt;/GoogleMap&gt;&#10;                    ) : (&#10;                        &lt;div className=&quot;h-full w-full bg-muted flex items-center justify-center&quot;&gt;&#10;                            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Loading map...&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Right side: Seating summary */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;bg-muted/30 p-4 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;flex items-start gap-2 mb-2&quot;&gt;&#10;                            &lt;Armchair className=&quot;h-4 w-4 text-muted-foreground mt-0.5&quot;/&gt;&#10;                            &lt;span className=&quot;font-medium&quot;&gt;Seating Summary&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm ml-6&quot;&gt;&#10;                            &lt;p&gt;Total capacity: {totalSeats}&lt;/p&gt;&#10;                            {Object.entries(seatCountByTier).map(([tierId, count]) =&gt; (&#10;                                &lt;div key={tierId} className=&quot;flex items-center gap-2 mt-1&quot;&gt;&#10;                                    {tierId !== 'unassigned' &amp;&amp; (&#10;                                        &lt;div&#10;                                            className=&quot;h-3 w-3 rounded-full&quot;&#10;                                            style={{&#10;                                                backgroundColor: getTierColor(tierId, session, tiers)&#10;                                            }}&#10;                                        /&gt;&#10;                                    )}&#10;                                    &lt;span&gt;&#10;                                        {getTierName(tierId, session, tiers)}: {count} {count === 1 ? 'seat' : 'seats'}&#10;                                    &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                            ))}&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Seating Layout below the map and summary */}&#10;            {layoutData &amp;&amp; (&#10;                &lt;SeatingLayout session={session} tiers={tiers}/&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;// Helper to get tier color&#10;const getTierColor = (tierId: string, session: SessionFormData, tiers: Tier[]): string =&gt; {&#10;    if (tierId === 'unassigned') return '#d1d5db'; // gray-300&#10;&#10;    // We need to check if tiers exist in the session&#10;    const tier = tiers.find(t =&gt; t.id === tierId);&#10;    return tier?.color || '#6b7280'; // gray-500 as fallback&#10;};&#10;&#10;// Helper to get tier name&#10;const getTierName = (tierId: string, session: SessionFormData, tiers: Tier[]): string =&gt; {&#10;    if (tierId === 'unassigned') return 'Unassigned';&#10;&#10;    const tier = tiers.find(t =&gt; t.id === tierId);&#10;    return tier?.name || 'Unknown Tier';&#10;};&#10;&#10;interface SeatingLayoutProps {&#10;    session: SessionFormData;&#10;    tiers: Tier[];&#10;}&#10;&#10;const SeatingLayout: React.FC&lt;SeatingLayoutProps&gt; = ({session, tiers}) =&gt; {&#10;    // const [selectedSeat, setSelectedSeat] = useState&lt;{&#10;    //     seat: Seat;&#10;    //     rowLabel?: string;&#10;    //     blockName: string;&#10;    //     tier?: string;&#10;    // } | null&gt;(null);&#10;&#10;    const {layoutData} = session;&#10;&#10;    // Only render for physical events with layout data&#10;    if (!layoutData || session.sessionType !== SessionType.PHYSICAL) return null;&#10;&#10;    // const handleSeatClick = (&#10;    //     seat: Seat,&#10;    //     blockName: string,&#10;    //     rowLabel?: string&#10;    // ) =&gt; {&#10;    //     setSelectedSeat({&#10;    //         seat,&#10;    //         rowLabel,&#10;    //         blockName,&#10;    //         tier: seat.tierId ? getTierName(seat.tierId, session, tiers) : undefined&#10;    //     });&#10;    // };&#10;&#10;    return (&#10;        &lt;div className=&quot;border rounded-lg p-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold mb-4&quot;&gt;Seating Layout&lt;/h3&gt;&#10;            &lt;div className=&quot;relative bg-muted/30 min-h-[300px] p-4 rounded-lg overflow-auto&quot;&gt;&#10;                {layoutData.layout.blocks.map(block =&gt; (&#10;                    &lt;div&#10;                        key={block.id}&#10;                        className=&quot;absolute bg-card border rounded-lg p-3 shadow-sm&quot;&#10;                        style={{&#10;                            left: block.position.x,&#10;                            top: block.position.y,&#10;                            width: block.width ? `${block.width}px` : 'auto',&#10;                            height: block.height ? `${block.height}px` : 'auto'&#10;                        }}&#10;                    &gt;&#10;                        &lt;div className=&quot;text-sm font-medium mb-1&quot;&gt;{block.name}&lt;/div&gt;&#10;&#10;                        {block.type === 'seated_grid' &amp;&amp; block.rows &amp;&amp; (&#10;                            &lt;div&#10;                                className=&quot;grid gap-1&quot;&#10;                                style={{&#10;                                    gridTemplateColumns: `repeat(${block.rows[0]?.seats?.length || 1}, 1fr)`&#10;                                }}&#10;                            &gt;&#10;                                {block.rows.map(row =&gt;&#10;                                    row.seats.map(seat =&gt; (&#10;                                        &lt;Popover key={seat.id}&gt;&#10;                                            &lt;PopoverTrigger asChild&gt;&#10;                                                &lt;Button&#10;                                                    type=&quot;button&quot;&#10;                                                    variant=&quot;ghost&quot;&#10;                                                    className=&quot;h-6 w-6 p-0 rounded-full text-xs font-mono&quot;&#10;                                                    style={{&#10;                                                        backgroundColor: seat.tierId ?&#10;                                                            `${getTierColor(seat.tierId, session, tiers)}80` : // 50% opacity&#10;                                                            undefined,&#10;                                                        opacity: seat.status === 'RESERVED' ? 0.3 : 1&#10;                                                    }}&#10;                                                    // onClick={() =&gt; handleSeatClick(seat, block.name, row.label)}&#10;                                                &gt;&#10;                                                    {seat.label}&#10;                                                &lt;/Button&gt;&#10;                                            &lt;/PopoverTrigger&gt;&#10;                                            &lt;PopoverContent side=&quot;top&quot; className=&quot;w-60 p-0&quot;&gt;&#10;                                                &lt;div className=&quot;p-4&quot;&gt;&#10;                                                    &lt;div className=&quot;font-semibold mb-2&quot;&gt;Seat Information&lt;/div&gt;&#10;                                                    &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Block:&lt;/span&gt;&#10;                                                            &lt;span&gt;{block.name}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Row:&lt;/span&gt;&#10;                                                            &lt;span&gt;{row.label}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Seat:&lt;/span&gt;&#10;                                                            &lt;span&gt;{seat.label}&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Status:&lt;/span&gt;&#10;                                                            &lt;Badge&#10;                                                                variant={seat.status === 'RESERVED' ? 'destructive' : 'outline'}&gt;&#10;                                                                {seat.status || 'Available'}&#10;                                                            &lt;/Badge&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                                            &lt;span className=&quot;text-muted-foreground&quot;&gt;Tier:&lt;/span&gt;&#10;                                                            &lt;div className=&quot;flex items-center gap-1&quot;&gt;&#10;                                                                {seat.tierId &amp;&amp; (&#10;                                                                    &lt;div&#10;                                                                        className=&quot;h-3 w-3 rounded-full&quot;&#10;                                                                        style={{&#10;                                                                            backgroundColor: getTierColor(seat.tierId, session, tiers)&#10;                                                                        }}&#10;                                                                    /&gt;&#10;                                                                )}&#10;                                                                &lt;span&gt;&#10;                                                                    {seat.tierId ? getTierName(seat.tierId, session, tiers) : 'Unassigned'}&#10;                                                                &lt;/span&gt;&#10;                                                            &lt;/div&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/PopoverContent&gt;&#10;                                        &lt;/Popover&gt;&#10;                                    ))&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {block.type === 'standing_capacity' &amp;&amp; (&#10;                            &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;                                &lt;p className=&quot;text-sm text-center&quot;&gt;&#10;                                    &lt;span className=&quot;block font-medium&quot;&gt;Standing Area&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-muted-foreground&quot;&gt;&#10;                                        Capacity: {block.capacity || 0}&#10;                                    &lt;/span&gt;&#10;                                &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {block.type === 'non_sellable' &amp;&amp; (&#10;                            &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;                                &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                                    Non-sellable area&#10;                                &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx.new">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/manage/organization/[organization_id]/event/create/page.tsx.new" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import {useEffect, useState} from 'react';&#10;import {CoreDetailsStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/CoreDetailsStep&quot;;&#10;import {Progress} from &quot;@/components/ui/progress&quot;;&#10;import {CreateEventRequest} from &quot;@/types/event&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import {FormProvider, useForm} from &quot;react-hook-form&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {TiersStep} from &quot;@/app/manage/organization/[organization_id]/event/_components/TierStep&quot;;&#10;import {zodResolver} from &quot;@hookform/resolvers/zod&quot;;&#10;import {coreDetailsSchema, tiersSchema} from &quot;@/lib/validators/event&quot;;&#10;import {WizardSidebar} from &quot;../_components/WizardSideBar&quot;;&#10;import {useSidebar} from &quot;@/components/ui/sidebar&quot;;&#10;&#10;// --- Main Wizard Parent Component ---&#10;export default function CreateEventPage() {&#10;    const [step, setStep] = useState(1);&#10;    const [coverFiles, setCoverFiles] = useState&lt;File[]&gt;([]);&#10;    const totalSteps = 5;&#10;    const {setOpen} = useSidebar();&#10;    &#10;    const steps = [&#10;        {number: 1, title: &quot;Core Details&quot;, description: &quot;Name, category, and location&quot;},&#10;        {number: 2, title: &quot;Tiers &amp; Pricing&quot;, description: &quot;Set your ticket prices&quot;},&#10;        {number: 3, title: &quot;Scheduling&quot;, description: &quot;Add dates and times&quot;},&#10;        {number: 4, title: &quot;Seating&quot;, description: &quot;Configure seating maps&quot;},&#10;        {number: 5, title: &quot;Review &amp; Publish&quot;, description: &quot;Final check before submission&quot;},&#10;    ];&#10;&#10;    // Collapse the main sidebar when component mounts&#10;    useEffect(() =&gt; {&#10;        setOpen(false);&#10;    }, [setOpen]);&#10;&#10;    // ✅ The single form instance for the entire wizard is created here.&#10;    const methods = useForm&lt;CreateEventRequest&gt;({&#10;        defaultValues: {&#10;            title: '',&#10;            description: '',&#10;            overview: '',&#10;            organizationId: '', // Should be set from context/params&#10;            categoryId: '',&#10;            isOnline: false,&#10;            tiers: [],&#10;            sessions: [],&#10;        },&#10;        mode: 'onSubmit', // Only validate when explicitly triggered&#10;    });&#10;&#10;    // Update the validation schema based on the current step&#10;    useEffect(() =&gt; {&#10;        if (step === 1) {&#10;            methods.clearErrors();&#10;        } else if (step === 2) {&#10;            methods.clearErrors();&#10;        }&#10;    }, [step, methods]);&#10;&#10;    const validateCoreDetails = async () =&gt; {&#10;        try {&#10;            // Check for cover photos&#10;            if (coverFiles.length === 0) {&#10;                toast.error(&quot;Please upload at least one cover photo.&quot;);&#10;                return false;&#10;            }&#10;            &#10;            // Get form values for core details&#10;            const values = methods.getValues();&#10;            const coreData = {&#10;                title: values.title,&#10;                description: values.description || &quot;&quot;,&#10;                overview: values.overview || &quot;&quot;,&#10;                categoryId: values.categoryId || &quot;&quot;,&#10;                isOnline: values.isOnline || false,&#10;                venueId: values.venueId,&#10;                onlineLink: values.onlineLink,&#10;                locationDescription: values.locationDescription,&#10;            };&#10;            &#10;            // Validate with Zod schema&#10;            const result = coreDetailsSchema.safeParse(coreData);&#10;            &#10;            if (!result.success) {&#10;                // Show validation errors&#10;                result.error.errors.forEach(err =&gt; {&#10;                    toast.error(`${err.path.join('.')}: ${err.message}`);&#10;                });&#10;                &#10;                // Also set form errors for field highlighting&#10;                result.error.errors.forEach(err =&gt; {&#10;                    const path = err.path.join('.') as keyof CreateEventRequest;&#10;                    methods.setError(path, { &#10;                        type: 'manual', &#10;                        message: err.message &#10;                    });&#10;                });&#10;                &#10;                return false;&#10;            }&#10;            &#10;            return true;&#10;        } catch (error: any) {&#10;            console.error(&quot;Validation error:&quot;, error);&#10;            toast.error(&quot;Please check all required fields&quot;);&#10;            return false;&#10;        }&#10;    };&#10;&#10;    const validateTiers = async () =&gt; {&#10;        try {&#10;            // Get tiers data&#10;            const values = methods.getValues();&#10;            const tiersData = { tiers: values.tiers || [] };&#10;            &#10;            // Validate with Zod schema&#10;            const result = tiersSchema.safeParse(tiersData);&#10;            &#10;            if (!result.success) {&#10;                // Show validation errors&#10;                result.error.errors.forEach(err =&gt; {&#10;                    toast.error(`${err.message}`);&#10;                });&#10;                return false;&#10;            }&#10;            &#10;            return true;&#10;        } catch (error: any) {&#10;            console.error(&quot;Tier validation error:&quot;, error);&#10;            toast.error(&quot;Please add at least one tier with valid information&quot;);&#10;            return false;&#10;        }&#10;    };&#10;&#10;    const onNext = async () =&gt; {&#10;        let isValid = false;&#10;        &#10;        if (step === 1) {&#10;            isValid = await validateCoreDetails();&#10;        } else if (step === 2) {&#10;            isValid = await validateTiers();&#10;        } else {&#10;            // For future steps that don't have validation yet&#10;            isValid = true;&#10;        }&#10;&#10;        if (isValid) {&#10;            setStep(s =&gt; Math.min(totalSteps, s + 1));&#10;        }&#10;    };&#10;&#10;    const onPrev = () =&gt; setStep(s =&gt; Math.max(1, s - 1));&#10;&#10;    const onSubmit = async (data: CreateEventRequest) =&gt; {&#10;        // Perform final validation before submission&#10;        let isValid = true;&#10;        &#10;        // Validate the current step first&#10;        if (step === 1) {&#10;            isValid = await validateCoreDetails();&#10;        } else if (step === 2) {&#10;            isValid = await validateTiers();&#10;        }&#10;        &#10;        if (isValid) {&#10;            console.log(&quot;Final Assembled Form Data:&quot;, data);&#10;            console.log(&quot;Final Cover Files:&quot;, coverFiles);&#10;            // Here you would call your createEvent API action&#10;            toast.success(&quot;Event submitted for approval!&quot;);&#10;        }&#10;    };&#10;&#10;    const renderStep = () =&gt; {&#10;        switch (step) {&#10;            case 1:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;            case 2:&#10;                return &lt;TiersStep/&gt;;&#10;            // Add cases for other steps here&#10;            default:&#10;                return &lt;CoreDetailsStep coverFiles={coverFiles} setCoverFilesAction={setCoverFiles}/&gt;;&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;flex min-h-screen bg-muted/40&quot;&gt;&#10;            &lt;WizardSidebar currentStep={step} steps={steps}/&gt;&#10;            &lt;main className=&quot;flex-1 p-4 md:p-8 overflow-y-auto ml-72&quot;&gt;&#10;                &lt;div className=&quot;max-w-4xl mx-auto&quot;&gt;&#10;                    &lt;div className=&quot;mb-8&quot;&gt;&#10;                        &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Step {step} of {totalSteps}&lt;/p&gt;&#10;                        &lt;Progress value={(step / totalSteps) * 100} className=&quot;mt-2&quot;/&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* ✅ The FormProvider broadcasts the form state to all children */}&#10;                    &lt;FormProvider {...methods}&gt;&#10;                        &lt;form onSubmit={methods.handleSubmit(onSubmit)}&gt;&#10;                            {renderStep()}&#10;&#10;                            &lt;div className=&quot;flex justify-between mt-8&quot;&gt;&#10;                                &lt;Button type=&quot;button&quot; variant=&quot;outline&quot; onClick={onPrev} disabled={step === 1}&gt;&#10;                                    Previous&#10;                                &lt;/Button&gt;&#10;                                {step &lt; totalSteps ? (&#10;                                    &lt;Button type=&quot;button&quot; onClick={onNext}&gt;&#10;                                        Next&#10;                                    &lt;/Button&gt;&#10;                                ) : (&#10;                                    &lt;Button type=&quot;submit&quot;&gt;&#10;                                        Submit for Approval&#10;                                    &lt;/Button&gt;&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        &lt;/form&gt;&#10;                    &lt;/FormProvider&gt;&#10;                &lt;/div&gt;&#10;            &lt;/main&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/actions/eventActions.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/actions/eventActions.ts" />
              <option name="originalContent" value="import {apiFetch} from '@/lib/api';&#10;import {CreateEventFormData} from '@/lib/validators/event';&#10;import {EventDetailDTO, EventStatus, EventSummaryDTO} from '@/lib/validators/event';&#10;&#10;import {PaginatedResponse} from &quot;@/types/paginatedResponse&quot;;&#10;import {EventResponseDTO} from &quot;@/types/event&quot;;&#10;&#10;const API_BASE_PATH = '/event-seating/v1/events';&#10;&#10;// ================================================================================&#10;// General User &amp; Organizer Actions&#10;// ================================================================================&#10;&#10;/**&#10; * Creates a new event.&#10; */&#10;export const createEvent = (eventData: CreateEventFormData, coverImages: File[]): Promise&lt;EventResponseDTO&gt; =&gt; {&#10;    const formData = new FormData();&#10;    formData.append('request', JSON.stringify(eventData));&#10;    if (coverImages?.length &gt; 0) {&#10;        coverImages.forEach(file =&gt; formData.append('coverImages', file));&#10;    }&#10;    return apiFetch&lt;EventResponseDTO&gt;(API_BASE_PATH, {&#10;        method: 'POST',&#10;        body: formData,&#10;    });&#10;};&#10;&#10;/**&#10; * Fetches event details for an event the current user OWNS.&#10; */&#10;export const getMyEventById = (eventId: string): Promise&lt;EventDetailDTO&gt; =&gt; {&#10;    return apiFetch&lt;EventDetailDTO&gt;(`${API_BASE_PATH}/${eventId}`);&#10;};&#10;&#10;/**&#10; * Fetches a paginated list of events for an organization the current user OWNS.&#10; */&#10;export const getMyOrganizationEvents = (&#10;    organizationId: string,&#10;    status?: EventStatus,&#10;    search?: string,&#10;    page: number = 0,&#10;    size: number = 10&#10;): Promise&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({&#10;        page: page.toString(),&#10;        size: size.toString(),&#10;    });&#10;    if (status) params.append('status', status);&#10;    if (search) params.append('search', search);&#10;&#10;    return apiFetch&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt;(`${API_BASE_PATH}/organization/${organizationId}?${params.toString()}`);&#10;};&#10;&#10;/**&#10; * Deletes an event the current user OWNS.&#10; */&#10;export const deleteEvent = (eventId: string): Promise&lt;void&gt; =&gt; {&#10;    return apiFetch&lt;void&gt;(`${API_BASE_PATH}/${eventId}`, {&#10;        method: 'DELETE',&#10;    });&#10;};&#10;&#10;&#10;// ================================================================================&#10;// Administrator-Only Actions&#10;// ================================================================================&#10;&#10;/**&#10; * [ADMIN] Fetches event details for ANY event by its ID.&#10; */&#10;export const getAnyEventById_Admin = (eventId: string): Promise&lt;EventDetailDTO&gt; =&gt; {&#10;    return apiFetch&lt;EventDetailDTO&gt;(`${API_BASE_PATH}/admin/${eventId}`);&#10;};&#10;&#10;/**&#10; * [ADMIN] Fetches a paginated list of ALL events in the system.&#10; */&#10;export const getAllEvents_Admin = (&#10;    status?: EventStatus,&#10;    search?: string,&#10;    page: number = 0,&#10;    size: number = 10&#10;): Promise&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({&#10;        page: page.toString(),&#10;        size: size.toString(),&#10;    });&#10;    if (status) params.append('status', status);&#10;    if (search) params.append('search', search);&#10;&#10;    return apiFetch&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt;(`${API_BASE_PATH}/admin/all?${params.toString()}`);&#10;};&#10;&#10;/**&#10; * [ADMIN] Fetches a paginated list of events for ANY organization.&#10; */&#10;export const getAnyOrganizationEvents_Admin = (&#10;    organizationId: string,&#10;    status?: EventStatus,&#10;    search?: string,&#10;    page: number = 0,&#10;    size: number = 10&#10;): Promise&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({&#10;        page: page.toString(),&#10;        size: size.toString(),&#10;    });&#10;    if (status) params.append('status', status);&#10;    if (search) params.append('search', search);&#10;&#10;    return apiFetch&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt;(`${API_BASE_PATH}/admin/organization/${organizationId}?${params.toString()}`);&#10;};&#10;&#10;/**&#10;" />
              <option name="updatedContent" value="import {apiFetch} from '@/lib/api';&#10;import {CreateEventFormData} from '@/lib/validators/event';&#10;import {EventDetailDTO, EventStatus, EventSummaryDTO} from '@/lib/validators/event';&#10;&#10;import {PaginatedResponse} from &quot;@/types/paginatedResponse&quot;;&#10;import {EventResponseDTO} from &quot;@/types/event&quot;;&#10;&#10;const API_BASE_PATH = '/event-seating/v1/events';&#10;&#10;// ================================================================================&#10;// General User &amp; Organizer Actions&#10;// ================================================================================&#10;&#10;/**&#10; * Creates a new event.&#10; */&#10;export const createEvent = (eventData: CreateEventFormData, coverImages: File[]): Promise&lt;EventResponseDTO&gt; =&gt; {&#10;    const formData = new FormData();&#10;    formData.append('request', JSON.stringify(eventData));&#10;    if (coverImages?.length &gt; 0) {&#10;        coverImages.forEach(file =&gt; formData.append('coverImages', file));&#10;    }&#10;    return apiFetch&lt;EventResponseDTO&gt;(API_BASE_PATH, {&#10;        method: 'POST',&#10;        body: formData,&#10;    });&#10;};&#10;&#10;/**&#10; * Fetches event details for an event the current user OWNS.&#10; */&#10;export const getMyEventById = (eventId: string): Promise&lt;EventDetailDTO&gt; =&gt; {&#10;    return apiFetch&lt;EventDetailDTO&gt;(`${API_BASE_PATH}/${eventId}`);&#10;};&#10;&#10;/**&#10; * Fetches a paginated list of events for an organization the current user OWNS.&#10; */&#10;export const getMyOrganizationEvents = (&#10;    organizationId: string,&#10;    status?: EventStatus,&#10;    search?: string,&#10;    page: number = 0,&#10;    size: number = 10&#10;): Promise&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({&#10;        page: page.toString(),&#10;        size: size.toString(),&#10;    });&#10;    if (status) params.append('status', status);&#10;    if (search) params.append('search', search);&#10;&#10;    return apiFetch&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt;(`${API_BASE_PATH}/organization/${organizationId}?${params.toString()}`);&#10;};&#10;&#10;/**&#10; * Deletes an event the current user OWNS.&#10; */&#10;export const deleteEvent = (eventId: string): Promise&lt;void&gt; =&gt; {&#10;    return apiFetch&lt;void&gt;(`${API_BASE_PATH}/${eventId}`, {&#10;        method: 'DELETE',&#10;    });&#10;};&#10;&#10;&#10;// ================================================================================&#10;// Administrator-Only Actions&#10;// ================================================================================&#10;&#10;/**&#10; * [ADMIN] Fetches event details for ANY event by its ID.&#10; */&#10;export const getAnyEventById_Admin = (eventId: string): Promise&lt;EventDetailDTO&gt; =&gt; {&#10;    return apiFetch&lt;EventDetailDTO&gt;(`${API_BASE_PATH}/admin/${eventId}`);&#10;};&#10;&#10;/**&#10; * [ADMIN] Fetches a paginated list of ALL events in the system.&#10; */&#10;export const getAllEvents_Admin = (&#10;    status?: EventStatus,&#10;    search?: string,&#10;    page: number = 0,&#10;    size: number = 10&#10;): Promise&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({&#10;        page: page.toString(),&#10;        size: size.toString(),&#10;    });&#10;    if (status) params.append('status', status);&#10;    if (search) params.append('search', search);&#10;&#10;    return apiFetch&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt;(`${API_BASE_PATH}/admin/all?${params.toString()}`);&#10;};&#10;&#10;/**&#10; * [ADMIN] Fetches a paginated list of events for ANY organization.&#10; */&#10;export const getAnyOrganizationEvents_Admin = (&#10;    organizationId: string,&#10;    status?: EventStatus,&#10;    search?: string,&#10;    page: number = 0,&#10;    size: number = 10&#10;): Promise&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt; =&gt; {&#10;    const params = new URLSearchParams({&#10;        page: page.toString(),&#10;        size: size.toString(),&#10;    });&#10;    if (status) params.append('status', status);&#10;    if (search) params.append('search', search);&#10;&#10;    return apiFetch&lt;PaginatedResponse&lt;EventSummaryDTO&gt;&gt;(`${API_BASE_PATH}/admin/organization/${organizationId}?${params.toString()}`);&#10;};&#10;&#10;/**&#10; * [ADMIN] Approves a pending event.&#10; * Returns void as the endpoint returns no content&#10; */&#10;export const approveEvent_Admin = (eventId: string): Promise&lt;void&gt; =&gt; {&#10;    return apiFetch&lt;void&gt;(`${API_BASE_PATH}/${eventId}/approve`, {&#10;        method: 'POST',&#10;    });&#10;};&#10;&#10;/**&#10; * [ADMIN] Rejects a pending event.&#10; * Returns void as the endpoint returns no content&#10; */&#10;export const rejectEvent_Admin = (eventId: string, reason: string): Promise&lt;void&gt; =&gt; {&#10;    return apiFetch&lt;void&gt;(`${API_BASE_PATH}/${eventId}/reject`, {&#10;        method: 'POST',&#10;        body: JSON.stringify({reason}),&#10;    });&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/actions/public/eventActions.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/actions/public/eventActions.ts" />
              <option name="originalContent" value="import {EventThumbnailDTO, SessionInfoBasicDTO} from &quot;@/types/event&quot;;&#10;import {PaginatedResponse} from &quot;@/types/paginatedResponse&quot;;&#10;&#10;const API_BASE_PATH = `${process.env.NEXT_PUBLIC_API_BASE_URL}/event-query/v1/events`;&#10;&#10;export async function searchEvents({&#10;                                       searchTerm,&#10;                                       categoryId,&#10;                                       longitude,&#10;                                       latitude,&#10;                                       radiusKm,&#10;                                       dateFrom,&#10;                                       dateTo,&#10;                                       priceMin,&#10;                                       priceMax,&#10;                                       page = 0,&#10;                                       size = 20,&#10;                                       sort = &quot;sessions.startTime,asc&quot;&#10;                                   }: {&#10;    searchTerm?: string;&#10;    categoryId?: string;&#10;    longitude?: number;&#10;    latitude?: number;&#10;    radiusKm?: number;&#10;    dateFrom?: string;&#10;    dateTo?: string;&#10;    priceMin?: number;&#10;    priceMax?: number;&#10;    page?: number;&#10;    size?: number;&#10;    sort?: string;&#10;}): Promise&lt;PaginatedResponse&lt;EventThumbnailDTO&gt;&gt; {&#10;    const params = new URLSearchParams();&#10;    if (searchTerm) params.append(&quot;searchTerm&quot;, searchTerm);&#10;    if (categoryId) params.append(&quot;categoryId&quot;, categoryId);&#10;    if (longitude !== undefined) params.append(&quot;longitude&quot;, longitude.toString());&#10;    if (latitude !== undefined) params.append(&quot;latitude&quot;, latitude.toString());&#10;    if (radiusKm !== undefined) params.append(&quot;radiusKm&quot;, radiusKm.toString());&#10;    if (dateFrom) params.append(&quot;dateFrom&quot;, dateFrom);&#10;    if (dateTo) params.append(&quot;dateTo&quot;, dateTo);&#10;    if (priceMin !== undefined) params.append(&quot;priceMin&quot;, priceMin.toString());&#10;    if (priceMax !== undefined) params.append(&quot;priceMax&quot;, priceMax.toString());&#10;    params.append(&quot;page&quot;, page.toString());&#10;    params.append(&quot;size&quot;, size.toString());&#10;    params.append(&quot;sort&quot;, sort);&#10;&#10;    const url = `${API_BASE_PATH}/search?${params.toString()}`;&#10;    const res = await fetch(url, {&#10;        method: &quot;GET&quot;,&#10;        headers: {&#10;            &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        cache: &quot;no-store&quot;&#10;    });&#10;    if (!res.ok) {&#10;        throw new Error(&quot;Failed to fetch events&quot;);&#10;    }&#10;    return await res.json();&#10;}&#10;&#10;/**&#10; * Fetches event sessions for a specific event&#10; */&#10;export async function getEventSessions({&#10;                                           eventId,&#10;                                           page = 0,&#10;                                           size = 10,&#10;                                           sort = &quot;startTime,asc&quot;&#10;                                       }: {&#10;    eventId: string;&#10;    page?: number;&#10;    size?: number;&#10;    sort?: string;&#10;}): Promise&lt;PaginatedResponse&lt;SessionInfoBasicDTO&gt;&gt; {&#10;    const params = new URLSearchParams();&#10;    params.append(&quot;page&quot;, page.toString());&#10;    params.append(&quot;size&quot;, size.toString());&#10;    params.append(&quot;sort&quot;, sort);&#10;&#10;    const url = `${API_BASE_PATH}/${eventId}/sessions?${params.toString()}`;&#10;    const res = await fetch(url, {&#10;        method: &quot;GET&quot;,&#10;        headers: {&#10;            &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        cache: &quot;no-store&quot;&#10;    });&#10;&#10;    if (!res.ok) {&#10;        throw new Error(`Failed to fetch event sessions: ${res.status}`);&#10;    }&#10;&#10;    return await res.json();&#10;}&#10;&#10;/**&#10; * Fetches event sessions for a specific event&#10; */&#10;export async function getEventSessionsInRange({&#10;                                                  eventId,&#10;                                                  fromDate,&#10;                                                  toDate,&#10;                                              }: {&#10;    eventId: string;&#10;    fromDate: string;&#10;    toDate: string;&#10;}): Promise&lt;SessionInfoBasicDTO[]&gt; {&#10;    const params = new URLSearchParams();&#10;    params.append(&quot;fromDate&quot;, fromDate.toString());&#10;    params.append(&quot;toDate&quot;, toDate.toString());&#10;&#10;    const url = `${API_BASE_PATH}/${eventId}/sessions/sessions-in-range?${params.toString()}`;&#10;    const res = await fetch(url, {&#10;        method: &quot;GET&quot;,&#10;        headers: {&#10;            &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        cache: &quot;no-store&quot;&#10;    });&#10;&#10;    if (!res.ok) {&#10;        throw new Error(`Failed to fetch event sessions: ${res.status}`);&#10;    }&#10;&#10;    return await res.json();&#10;}&#10;&#10;export type EventSearchResult = Awaited&lt;ReturnType&lt;typeof searchEvents&gt;&gt;;&#10;export type EventSessionsResult = Awaited&lt;ReturnType&lt;typeof getEventSessions&gt;&gt;;&#10;" />
              <option name="updatedContent" value="import {EventThumbnailDTO, SessionInfoBasicDTO} from &quot;@/types/event&quot;;&#10;import {PaginatedResponse} from &quot;@/types/paginatedResponse&quot;;&#10;&#10;const API_BASE_PATH = `${process.env.NEXT_PUBLIC_API_BASE_URL}/event-query/v1/events`;&#10;&#10;export async function searchEvents({&#10;                                       searchTerm,&#10;                                       categoryId,&#10;                                       longitude,&#10;                                       latitude,&#10;                                       radiusKm,&#10;                                       dateFrom,&#10;                                       dateTo,&#10;                                       priceMin,&#10;                                       priceMax,&#10;                                       page = 0,&#10;                                       size = 20,&#10;                                       sort = &quot;sessions.startTime,asc&quot;&#10;                                   }: {&#10;    searchTerm?: string;&#10;    categoryId?: string;&#10;    longitude?: number;&#10;    latitude?: number;&#10;    radiusKm?: number;&#10;    dateFrom?: string;&#10;    dateTo?: string;&#10;    priceMin?: number;&#10;    priceMax?: number;&#10;    page?: number;&#10;    size?: number;&#10;    sort?: string;&#10;}): Promise&lt;PaginatedResponse&lt;EventThumbnailDTO&gt;&gt; {&#10;    const params = new URLSearchParams();&#10;    if (searchTerm) params.append(&quot;searchTerm&quot;, searchTerm);&#10;    if (categoryId) params.append(&quot;categoryId&quot;, categoryId);&#10;    if (longitude !== undefined) params.append(&quot;longitude&quot;, longitude.toString());&#10;    if (latitude !== undefined) params.append(&quot;latitude&quot;, latitude.toString());&#10;    if (radiusKm !== undefined) params.append(&quot;radiusKm&quot;, radiusKm.toString());&#10;    if (dateFrom) params.append(&quot;dateFrom&quot;, dateFrom);&#10;    if (dateTo) params.append(&quot;dateTo&quot;, dateTo);&#10;    if (priceMin !== undefined) params.append(&quot;priceMin&quot;, priceMin.toString());&#10;    if (priceMax !== undefined) params.append(&quot;priceMax&quot;, priceMax.toString());&#10;    params.append(&quot;page&quot;, page.toString());&#10;    params.append(&quot;size&quot;, size.toString());&#10;    params.append(&quot;sort&quot;, sort);&#10;&#10;    const url = `${API_BASE_PATH}/search?${params.toString()}`;&#10;    const res = await fetch(url, {&#10;        method: &quot;GET&quot;,&#10;        headers: {&#10;            &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        cache: &quot;no-store&quot;&#10;    });&#10;    if (!res.ok) {&#10;        throw new Error(&quot;Failed to fetch events&quot;);&#10;    }&#10;    return await res.json();&#10;}&#10;&#10;/**&#10; * Fetches event sessions for a specific event&#10; */&#10;export async function getEventSessions({&#10;                                           eventId,&#10;                                           page = 0,&#10;                                           size = 10,&#10;                                           sort = &quot;startTime,asc&quot;&#10;                                       }: {&#10;    eventId: string;&#10;    page?: number;&#10;    size?: number;&#10;    sort?: string;&#10;}): Promise&lt;PaginatedResponse&lt;SessionInfoBasicDTO&gt;&gt; {&#10;    const params = new URLSearchParams();&#10;    params.append(&quot;page&quot;, page.toString());&#10;    params.append(&quot;size&quot;, size.toString());&#10;    params.append(&quot;sort&quot;, sort);&#10;&#10;    const url = `${API_BASE_PATH}/${eventId}/sessions?${params.toString()}`;&#10;    const res = await fetch(url, {&#10;        method: &quot;GET&quot;,&#10;        headers: {&#10;            &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        cache: &quot;no-store&quot;&#10;    });&#10;&#10;    if (!res.ok) {&#10;        throw new Error(`Failed to fetch event sessions: ${res.status}`);&#10;    }&#10;&#10;    return await res.json();&#10;}&#10;&#10;/**&#10; * Fetches event sessions for a specific event&#10; */&#10;export async function getEventSessionsInRange({&#10;                                                  eventId,&#10;                                                  fromDate,&#10;                                                  toDate,&#10;                                              }: {&#10;    eventId: string;&#10;    fromDate: string;&#10;    toDate: string;&#10;}): Promise&lt;SessionInfoBasicDTO[]&gt; {&#10;    const params = new URLSearchParams();&#10;    params.append(&quot;fromDate&quot;, fromDate);&#10;    params.append(&quot;toDate&quot;, toDate);&#10;&#10;    const url = `${API_BASE_PATH}/${eventId}/sessions/sessions-in-range?${params.toString()}`;&#10;    const res = await fetch(url, {&#10;        method: &quot;GET&quot;,&#10;        headers: {&#10;            &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;        cache: &quot;no-store&quot;,&#10;    });&#10;&#10;    if (!res.ok) {&#10;        throw new Error(`Failed to fetch event sessions in range: ${res.status}`);&#10;    }&#10;&#10;    return await res.json();&#10;}&#10;&#10;export type EventSearchResult = Awaited&lt;ReturnType&lt;typeof searchEvents&gt;&gt;;&#10;export type EventSessionsResult = Awaited&lt;ReturnType&lt;typeof getEventSessions&gt;&gt;;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/imageUtils.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/imageUtils.ts" />
              <option name="originalContent" value="import imageCompression from 'browser-image-compression';&#10;&#10;// Define the options for image compression&#10;const compressionOptions = {&#10;    maxSizeMB: 1,          // Max file size in MB&#10;    maxWidthOrHeight: 1920, // Max width or height in pixels&#10;    useWebWorker: true,    // Use a web worker for better performance&#10;    fileType: 'image/jpeg', // Force output to JPEG for better compression&#10;};&#10;&#10;/**&#10; * Compresses an image file on the client-side before uploading.&#10; * @param {File} imageFile The original image file to compress.&#10; * @returns {Promise&lt;File&gt;} A promise that resolves with the compressed file.&#10; */&#10;export const compressImage = async (imageFile: File): Promise&lt;File&gt; =&gt; {&#10;    console.log(`Original file size: ${(imageFile.size / 1024 / 1024).toFixed(2)} MB`);&#10;&#10;    try {&#10;        const compressedFile = await imageCompression(imageFile, compressionOptions);&#10;        console.log(`Compressed file size: ${(compressedFile.size / 1024 / 1024).toFixed(2)} MB`);&#10;        return compressedFile;&#10;    } catch (error) {&#10;        console.error(&quot;Error during image compression:&quot;, error);&#10;        // If compression fails, return the original file&#10;        return imageFile;&#10;    }&#10;};" />
              <option name="updatedContent" value="import imageCompression from 'browser-image-compression';&#10;&#10;// Default compression options&#10;export const defaultCompressionOptions = {&#10;    maxSizeMB: 1,          // Max file size in MB&#10;    maxWidthOrHeight: 1920, // Max width or height in pixels&#10;    useWebWorker: true,    // Use a web worker for better performance&#10;    fileType: 'image/jpeg', // Force output to JPEG for better compression&#10;};&#10;&#10;/**&#10; * Interface for image compression options&#10; */&#10;export interface CompressionOptions {&#10;    maxSizeMB?: number;&#10;    maxWidthOrHeight?: number;&#10;    useWebWorker?: boolean;&#10;    fileType?: string;&#10;}&#10;&#10;/**&#10; * Compresses an image file on the client-side before uploading.&#10; * @param {File} imageFile The original image file to compress.&#10; * @param {CompressionOptions} options Optional compression options to override defaults.&#10; * @returns {Promise&lt;File&gt;} A promise that resolves with the compressed file.&#10; */&#10;export const compressImage = async (&#10;    imageFile: File, &#10;    options?: CompressionOptions&#10;): Promise&lt;File&gt; =&gt; {&#10;    console.log(`Original file size: ${(imageFile.size / 1024 / 1024).toFixed(2)} MB`);&#10;&#10;    // Merge provided options with defaults&#10;    const compressionOptions = {&#10;        ...defaultCompressionOptions,&#10;        ...options&#10;    };&#10;&#10;    try {&#10;        const compressedFile = await imageCompression(imageFile, compressionOptions);&#10;        console.log(`Compressed file size: ${(compressedFile.size / 1024 / 1024).toFixed(2)} MB`);&#10;        return compressedFile;&#10;    } catch (error) {&#10;        console.error(&quot;Error during image compression:&quot;, error);&#10;        // If compression fails, return the original file&#10;        return imageFile;&#10;    }&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/providers/LimitProvider.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/providers/LimitProvider.ts" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, {createContext, useContext, useState, useEffect, ReactNode, useMemo} from 'react';&#10;import {useAuth} from '@/providers/AuthProvider';&#10;import {getAppConfiguration} from '@/lib/actions/configActions';&#10;import {AppConfig, TierLimitDetails, TierName} from '@/types/config';&#10;&#10;// Define the shape of the context&#10;interface LimitContextType {&#10;    config: AppConfig | null;&#10;    isLoading: boolean;&#10;    error: string | null;&#10;    currentUserTier: TierName;&#10;    currentUserTierLimits: TierLimitDetails | null;&#10;    getLimitsForTier: (tier: TierName) =&gt; TierLimitDetails | null;&#10;}&#10;&#10;const LimitContext = createContext&lt;LimitContextType | undefined&gt;(undefined);&#10;&#10;export const LimitProvider = ({children}: { children: ReactNode }) =&gt; {&#10;    const {keycloak} = useAuth();&#10;    const [config, setConfig] = useState&lt;AppConfig | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    // Fetch the entire configuration on initial application load&#10;    useEffect(() =&gt; {&#10;        const fetchConfig = async () =&gt; {&#10;            try {&#10;                const appConfig = await getAppConfiguration();&#10;                setConfig(appConfig);&#10;            } catch (err) {&#10;                setError('Failed to load application configuration. Some features may be unavailable.');&#10;                console.error(err);&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;        fetchConfig();&#10;    }, []);&#10;&#10;    // A memoized helper to get the current user's highest tier from their JWT&#10;    const currentUserTier = useMemo((): TierName =&gt; {&#10;        if (!keycloak?.tokenParsed?.user_groups || !Array.isArray(keycloak.tokenParsed.user_groups)) return 'FREE';&#10;&#10;        const userGroups: string[] = keycloak.tokenParsed.user_groups;&#10;        let highestTier: TierName = 'FREE';&#10;        let maxLevel = 0;&#10;&#10;        const tierLevels: Record&lt;TierName, number&gt; = {FREE: 0, PRO: 1, ENTERPRISE: 2};&#10;&#10;        userGroups.forEach(group =&gt; {&#10;            if (group.startsWith('/Tiers/')) {&#10;                const tierName = group.substring('/Tiers/'.length).toUpperCase() as TierName;&#10;                if (tierLevels[tierName] !== undefined &amp;&amp; tierLevels[tierName] &gt; maxLevel) {&#10;                    maxLevel = tierLevels[tierName];&#10;                    highestTier = tierName;&#10;                }&#10;            }&#10;        });&#10;        return highestTier;&#10;    }, [keycloak]);&#10;&#10;    // A memoized value for the current user's specific limits, derived from the full config&#10;    const currentUserTierLimits = useMemo(() =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[currentUserTier] || config.tierLimits.FREE;&#10;    }, [config, currentUserTier]);&#10;&#10;    // A function to get limits for any specified tier (useful for upgrade pages)&#10;    const getLimitsForTier = (tier: TierName): TierLimitDetails | null =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[tier] || null;&#10;    };&#10;&#10;    const value = {config, isLoading, error, currentUserTier, currentUserTierLimits, getLimitsForTier};&#10;&#10;    return (&#10;        &lt;LimitContext.Provider value={value}&gt;&#10;            {children}&#10;        &lt;/LimitContext.Provider&gt;&#10;    );&#10;};&#10;&#10;// The custom hook to easily access the limits from any component&#10;export const useLimits = (): LimitContextType =&gt; {&#10;    const context = useContext(LimitContext);&#10;    if (context === undefined) {&#10;        throw new Error('useLimits must be used within a LimitProvider');&#10;    }&#10;    return context;&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, {createContext, useContext, useState, useEffect, ReactNode, useMemo} from 'react';&#10;import {useAuth} from '@/providers/AuthProvider';&#10;import {getAppConfiguration} from '@/lib/actions/configActions';&#10;import {AppConfig, TierLimitDetails, TierName} from '@/types/config';&#10;&#10;// Define the shape of the context&#10;interface LimitContextType {&#10;    config: AppConfig | null;&#10;    isLoading: boolean;&#10;    error: string | null;&#10;    currentUserTier: TierName;&#10;    currentUserTierLimits: TierLimitDetails | null;&#10;    getLimitsForTier: (tier: TierName) =&gt; TierLimitDetails | null;&#10;}&#10;&#10;const LimitContext = createContext&lt;LimitContextType | undefined&gt;(undefined);&#10;&#10;export const LimitProvider = ({children}: { children: ReactNode }) =&gt; {&#10;    const {keycloak} = useAuth();&#10;    const [config, setConfig] = useState&lt;AppConfig | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    // Fetch the entire configuration on initial application load&#10;    useEffect(() =&gt; {&#10;        const fetchConfig = async () =&gt; {&#10;            try {&#10;                const appConfig = await getAppConfiguration();&#10;                setConfig(appConfig);&#10;            } catch (err) {&#10;                setError('Failed to load application configuration. Some features may be unavailable.');&#10;                console.error(err);&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;        fetchConfig();&#10;    }, []);&#10;&#10;    // A memoized helper to get the current user's highest tier from their JWT&#10;    const currentUserTier = useMemo((): TierName =&gt; {&#10;        if (!keycloak?.tokenParsed?.user_groups || !Array.isArray(keycloak.tokenParsed.user_groups)) return 'FREE';&#10;&#10;        const userGroups: string[] = keycloak.tokenParsed.user_groups;&#10;        let highestTier: TierName = 'FREE';&#10;        let maxLevel = 0;&#10;&#10;        const tierLevels: Record&lt;TierName, number&gt; = {FREE: 0, PRO: 1, ENTERPRISE: 2};&#10;&#10;        userGroups.forEach(group =&gt; {&#10;            if (group.startsWith('/Tiers/')) {&#10;                const tierName = group.substring('/Tiers/'.length).toUpperCase() as TierName;&#10;                if (tierLevels[tierName] !== undefined &amp;&amp; tierLevels[tierName] &gt; maxLevel) {&#10;                    maxLevel = tierLevels[tierName];&#10;                    highestTier = tierName;&#10;                }&#10;            }&#10;        });&#10;        return highestTier;&#10;    }, [keycloak]);&#10;&#10;    // A memoized value for the current user's specific limits, derived from the full config&#10;    const currentUserTierLimits = useMemo(() =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[currentUserTier] || config.tierLimits.FREE;&#10;    }, [config, currentUserTier]);&#10;&#10;    // A function to get limits for any specified tier (useful for upgrade pages)&#10;    const getLimitsForTier = (tier: TierName): TierLimitDetails | null =&gt; {&#10;        if (!config) return null;&#10;        return config.tierLimits[tier] || null;&#10;    };&#10;&#10;    const value = {config, isLoading, error, currentUserTier, currentUserTierLimits, getLimitsForTier};&#10;&#10;    return React.createElement(&#10;        LimitContext.Provider,&#10;        { value },&#10;        children&#10;    );&#10;};&#10;&#10;// The custom hook to easily access the limits from any component&#10;export const useLimits = (): LimitContextType =&gt; {&#10;    const context = useContext(LimitContext);&#10;    if (context === undefined) {&#10;        throw new Error('useLimits must be used within a LimitProvider');&#10;    }&#10;    return context;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>